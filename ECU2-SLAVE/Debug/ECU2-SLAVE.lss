
ECU2-SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000423c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  0000423c  000042d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000a2  008000a2  00004312  2**0
                  ALLOC
  3 .stab         00003b64  00000000  00000000  00004314  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001841  00000000  00000000  00007e78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_1>
       8:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__vector_2>
       c:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 38 20 	call	0x4070	; 0x4070 <main>
      8a:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f1 20 	jmp	0x41e2	; 0x41e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0d 21 	jmp	0x421a	; 0x421a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f1 20 	jmp	0x41e2	; 0x41e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0d 21 	jmp	0x421a	; 0x421a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 01 21 	jmp	0x4202	; 0x4202 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ed 20 	jmp	0x41da	; 0x41da <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f1 20 	jmp	0x41e2	; 0x41e2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0d 21 	jmp	0x421a	; 0x421a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f1 20 	jmp	0x41e2	; 0x41e2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0d 21 	jmp	0x421a	; 0x421a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f1 20 	jmp	0x41e2	; 0x41e2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0d 21 	jmp	0x421a	; 0x421a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <USART_Init>:


#include "USART.h"

void USART_Init( unsigned int baud )
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <USART_Init+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
/* Set baud rate */
UBRRH = (unsigned char)(baud>>8);
     cac:	e0 e4       	ldi	r30, 0x40	; 64
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	89 2f       	mov	r24, r25
     cb6:	99 27       	eor	r25, r25
     cb8:	80 83       	st	Z, r24
UBRRL = (unsigned char)baud;
     cba:	e9 e2       	ldi	r30, 0x29	; 41
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	80 83       	st	Z, r24
/* Enable receiver and transmitter */
UCSRB = (1<<RXEN)|(1<<TXEN);
     cc2:	ea e2       	ldi	r30, 0x2A	; 42
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	88 e1       	ldi	r24, 0x18	; 24
     cc8:	80 83       	st	Z, r24
/* Set frame format: 8data, 2stop bit */
UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     cca:	e0 e4       	ldi	r30, 0x40	; 64
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	8e e8       	ldi	r24, 0x8E	; 142
     cd0:	80 83       	st	Z, r24
}
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <USART_Transmit_5_8>:


void USART_Transmit_5_8( unsigned char data )
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	0f 92       	push	r0
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	89 83       	std	Y+1, r24	; 0x01
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) );
     ce8:	eb e2       	ldi	r30, 0x2B	; 43
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	80 72       	andi	r24, 0x20	; 32
     cf4:	90 70       	andi	r25, 0x00	; 0
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	b9 f3       	breq	.-18     	; 0xce8 <USART_Transmit_5_8+0xc>
/* Put data into buffer, sends the data */
UDR = data;
     cfa:	ec e2       	ldi	r30, 0x2C	; 44
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	80 83       	st	Z, r24
}
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <USART_Transmit_9>:

void USART_Transmit_9( unsigned int data )
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <USART_Transmit_9+0x6>
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	9a 83       	std	Y+2, r25	; 0x02
     d16:	89 83       	std	Y+1, r24	; 0x01
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)));
     d18:	eb e2       	ldi	r30, 0x2B	; 43
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	88 2f       	mov	r24, r24
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	80 72       	andi	r24, 0x20	; 32
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	b9 f3       	breq	.-18     	; 0xd18 <USART_Transmit_9+0xe>
/* Copy 9th bit to TXB8 */
UCSRB &= ~(1<<TXB8);
     d2a:	aa e2       	ldi	r26, 0x2A	; 42
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ea e2       	ldi	r30, 0x2A	; 42
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8e 7f       	andi	r24, 0xFE	; 254
     d36:	8c 93       	st	X, r24
if (data & 0x0100)
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	80 70       	andi	r24, 0x00	; 0
     d3e:	91 70       	andi	r25, 0x01	; 1
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	39 f0       	breq	.+14     	; 0xd52 <USART_Transmit_9+0x48>
UCSRB |= (1<<TXB8);
     d44:	aa e2       	ldi	r26, 0x2A	; 42
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	ea e2       	ldi	r30, 0x2A	; 42
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	81 60       	ori	r24, 0x01	; 1
     d50:	8c 93       	st	X, r24
/* Put data into buffer, sends the data */
UDR = data;
     d52:	ec e2       	ldi	r30, 0x2C	; 44
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	80 83       	st	Z, r24
}
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <SPI_SLAVE_INIT>:
 *      Author: ahmed
 */

#include "SPI.h"

void SPI_SLAVE_INIT() {
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62

// Enable SPI.
#if SPI_STATUS == ENABLE
	SET_BIT(SPCR, SPE);
     d6c:	ad e2       	ldi	r26, 0x2D	; 45
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ed e2       	ldi	r30, 0x2D	; 45
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 64       	ori	r24, 0x40	; 64
     d78:	8c 93       	st	X, r24

// Enabling Slave/Master.
#if SPI_MSTR_SLVE_SET == MASTER
	SET_BIT(SPCR, MSTR);
#elif SPI_MSTR_SLVE_SET == SLAVE
	CLR_BIT(SPCR, MSTR);
     d7a:	ad e2       	ldi	r26, 0x2D	; 45
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	ed e2       	ldi	r30, 0x2D	; 45
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	8f 7e       	andi	r24, 0xEF	; 239
     d86:	8c 93       	st	X, r24
#if SPI_CLOCK_FREQ == FOSC_4
		CLR_BIT(SPCR, SPR0);
		CLR_BIT(SPCR, SPR1);
		CLR_BIT(SPSR, SPI2X);
#elif SPI_CLOCK_FREQ == FOSC_16
		SET_BIT(SPCR, SPR0);
     d88:	ad e2       	ldi	r26, 0x2D	; 45
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ed e2       	ldi	r30, 0x2D	; 45
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	81 60       	ori	r24, 0x01	; 1
     d94:	8c 93       	st	X, r24
		CLR_BIT(SPCR, SPR1);
     d96:	ad e2       	ldi	r26, 0x2D	; 45
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	ed e2       	ldi	r30, 0x2D	; 45
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	8d 7f       	andi	r24, 0xFD	; 253
     da2:	8c 93       	st	X, r24
		CLR_BIT(SPSR, SPI2X);
     da4:	ae e2       	ldi	r26, 0x2E	; 46
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	ee e2       	ldi	r30, 0x2E	; 46
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	8e 7f       	andi	r24, 0xFE	; 254
     db0:	8c 93       	st	X, r24
		break;
	}

// Plarity Setting.
#if SPI_MODE == LeSampRise_TrSetFall
	CLR_BIT(SPCR, CPHA);
     db2:	ad e2       	ldi	r26, 0x2D	; 45
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	ed e2       	ldi	r30, 0x2D	; 45
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8b 7f       	andi	r24, 0xFB	; 251
     dbe:	8c 93       	st	X, r24
	CLR_BIT(SPCR, CPOL);
     dc0:	ad e2       	ldi	r26, 0x2D	; 45
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	ed e2       	ldi	r30, 0x2D	; 45
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	87 7f       	andi	r24, 0xF7	; 247
     dcc:	8c 93       	st	X, r24
	SET_BIT(SPCR, CPOL);
#elif SPI_MODE == LeSetFall_TrSampRise
	SET_BIT(SPCR, CPHA);
	SET_BIT(SPCR, CPOL);
#endif
}
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	08 95       	ret

00000dd4 <SPI_SLV_RECEV>:


uint8 SPI_SLV_RECEV(void) {
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)));
     ddc:	ee e2       	ldi	r30, 0x2E	; 46
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	88 23       	and	r24, r24
     de4:	dc f7       	brge	.-10     	; 0xddc <SPI_SLV_RECEV+0x8>
/* Return data register */
return SPDR;
     de6:	ef e2       	ldi	r30, 0x2F	; 47
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
}
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <XTRN_INT_init>:

void (*p2f0)(void);
void (*p2f1)(void);
void (*p2f2)(void);

void XTRN_INT_init() {
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT0 == ENABLED
	SET_BIT(GICR, INT0);
     dfa:	ab e5       	ldi	r26, 0x5B	; 91
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	eb e5       	ldi	r30, 0x5B	; 91
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 64       	ori	r24, 0x40	; 64
     e06:	8c 93       	st	X, r24
	CLR_BIT(MCUCR, ISC01);
#elif EXTI_INT0_EDGE == Falling_Edge
	CLR_BIT(MCUCR, ISC00);
	SET_BIT(MCUCR, ISC01);
#elif EXTI_INT0_EDGE == Raising_Edge
	SET_BIT(MCUCR, ISC00);
     e08:	a5 e5       	ldi	r26, 0x55	; 85
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e5 e5       	ldi	r30, 0x55	; 85
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	81 60       	ori	r24, 0x01	; 1
     e14:	8c 93       	st	X, r24
	SET_BIT(MCUCR, ISC01);
     e16:	a5 e5       	ldi	r26, 0x55	; 85
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e5 e5       	ldi	r30, 0x55	; 85
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	82 60       	ori	r24, 0x02	; 2
     e22:	8c 93       	st	X, r24
#endif

#if EXTI_INT1 == ENABLED
	SET_BIT(GICR, INT1);
#else
	CLR_BIT(GICR, INT1);
     e24:	ab e5       	ldi	r26, 0x5B	; 91
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	eb e5       	ldi	r30, 0x5B	; 91
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8f 77       	andi	r24, 0x7F	; 127
     e30:	8c 93       	st	X, r24
	CLR_BIT(MCUCR, ISC11);
#elif EXTI_INT1_EDGE == Both_Edges
	SET_BIT(MCUCR, ISC10);
	CLR_BIT(MCUCR, ISC11);
#elif EXTI_INT1_EDGE == Falling_Edge
	CLR_BIT(MCUCR, ISC10);
     e32:	a5 e5       	ldi	r26, 0x55	; 85
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e5 e5       	ldi	r30, 0x55	; 85
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	8b 7f       	andi	r24, 0xFB	; 251
     e3e:	8c 93       	st	X, r24
	SET_BIT(MCUCR, ISC11);
     e40:	a5 e5       	ldi	r26, 0x55	; 85
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e5 e5       	ldi	r30, 0x55	; 85
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	88 60       	ori	r24, 0x08	; 8
     e4c:	8c 93       	st	X, r24
#endif

#if EXTI_INT2 == ENABLED
	SET_BIT(GICR, INT2);
#else
	CLR_BIT(GICR, INT2);
     e4e:	ab e5       	ldi	r26, 0x5B	; 91
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	eb e5       	ldi	r30, 0x5B	; 91
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8f 7d       	andi	r24, 0xDF	; 223
     e5a:	8c 93       	st	X, r24
#endif

#if EXTI_INT2_EDGE == Falling_Edge
	CLR_BIT(MCUCR, ISC2);
#elif EXTI_INT2_EDGE == Raising_Edge
	SET_BIT(MCUCR, ISC2);
     e5c:	a5 e5       	ldi	r26, 0x55	; 85
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e5 e5       	ldi	r30, 0x55	; 85
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	80 64       	ori	r24, 0x40	; 64
     e68:	8c 93       	st	X, r24
#endif

	SET_BIT(SREG, 7);
     e6a:	af e5       	ldi	r26, 0x5F	; 95
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	ef e5       	ldi	r30, 0x5F	; 95
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 68       	ori	r24, 0x80	; 128
     e76:	8c 93       	st	X, r24
}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <CallBack_INT0>:


void CallBack_INT0(void (*p2func)(void)) {
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <CallBack_INT0+0x6>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
	p2f0 = p2func;
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	90 93 a3 00 	sts	0x00A3, r25
     e94:	80 93 a2 00 	sts	0x00A2, r24
}
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <CallBack_INT1>:

void CallBack_INT1(void (*p2func)(void)) {
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <CallBack_INT1+0x6>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
	p2f1 = p2func;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	90 93 a5 00 	sts	0x00A5, r25
     eb8:	80 93 a4 00 	sts	0x00A4, r24
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <CallBack_INT2>:

void CallBack_INT2(void (*p2func)(void)) {
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <CallBack_INT2+0x6>
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	89 83       	std	Y+1, r24	; 0x01
	p2f2 = p2func;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	90 93 a7 00 	sts	0x00A7, r25
     edc:	80 93 a6 00 	sts	0x00A6, r24
}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <__vector_1>:

ISR(INT0_vect) {
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	2f 93       	push	r18
     ef6:	3f 93       	push	r19
     ef8:	4f 93       	push	r20
     efa:	5f 93       	push	r21
     efc:	6f 93       	push	r22
     efe:	7f 93       	push	r23
     f00:	8f 93       	push	r24
     f02:	9f 93       	push	r25
     f04:	af 93       	push	r26
     f06:	bf 93       	push	r27
     f08:	ef 93       	push	r30
     f0a:	ff 93       	push	r31
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	p2f0();
     f14:	e0 91 a2 00 	lds	r30, 0x00A2
     f18:	f0 91 a3 00 	lds	r31, 0x00A3
     f1c:	09 95       	icall
}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	bf 91       	pop	r27
     f28:	af 91       	pop	r26
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	7f 91       	pop	r23
     f30:	6f 91       	pop	r22
     f32:	5f 91       	pop	r21
     f34:	4f 91       	pop	r20
     f36:	3f 91       	pop	r19
     f38:	2f 91       	pop	r18
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	0f 90       	pop	r0
     f40:	1f 90       	pop	r1
     f42:	18 95       	reti

00000f44 <__vector_2>:

ISR(INT1_vect) {
     f44:	1f 92       	push	r1
     f46:	0f 92       	push	r0
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	0f 92       	push	r0
     f4c:	11 24       	eor	r1, r1
     f4e:	2f 93       	push	r18
     f50:	3f 93       	push	r19
     f52:	4f 93       	push	r20
     f54:	5f 93       	push	r21
     f56:	6f 93       	push	r22
     f58:	7f 93       	push	r23
     f5a:	8f 93       	push	r24
     f5c:	9f 93       	push	r25
     f5e:	af 93       	push	r26
     f60:	bf 93       	push	r27
     f62:	ef 93       	push	r30
     f64:	ff 93       	push	r31
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
	p2f1();
     f6e:	e0 91 a4 00 	lds	r30, 0x00A4
     f72:	f0 91 a5 00 	lds	r31, 0x00A5
     f76:	09 95       	icall
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <__vector_3>:

ISR(INT2_vect) {
     f9e:	1f 92       	push	r1
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	p2f2();
     fc8:	e0 91 a6 00 	lds	r30, 0x00A6
     fcc:	f0 91 a7 00 	lds	r31, 0x00A7
     fd0:	09 95       	icall
}
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	bf 91       	pop	r27
     fdc:	af 91       	pop	r26
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	7f 91       	pop	r23
     fe4:	6f 91       	pop	r22
     fe6:	5f 91       	pop	r21
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	0f 90       	pop	r0
     ff4:	1f 90       	pop	r1
     ff6:	18 95       	reti

00000ff8 <Dio_write>:


#include "Dio.h"


void Dio_write(Dio_Channel_Type channel, Dir dir) {
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	00 d0       	rcall	.+0      	; 0xffe <Dio_write+0x6>
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <Dio_write+0x8>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <Dio_write+0xa>
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	8b 83       	std	Y+3, r24	; 0x03
    1008:	6c 83       	std	Y+4, r22	; 0x04

	Dio_PORT_Type port = channel / 8;
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	86 95       	lsr	r24
    100e:	86 95       	lsr	r24
    1010:	86 95       	lsr	r24
    1012:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Channel_Type pin = channel % 8;
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	87 70       	andi	r24, 0x07	; 7
    1018:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3e 83       	std	Y+6, r19	; 0x06
    1022:	2d 83       	std	Y+5, r18	; 0x05
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	91 05       	cpc	r25, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <Dio_write+0x38>
    102e:	43 c0       	rjmp	.+134    	; 0x10b6 <Dio_write+0xbe>
    1030:	2d 81       	ldd	r18, Y+5	; 0x05
    1032:	3e 81       	ldd	r19, Y+6	; 0x06
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	2c f4       	brge	.+10     	; 0x1044 <Dio_write+0x4c>
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	9e 81       	ldd	r25, Y+6	; 0x06
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	71 f0       	breq	.+28     	; 0x105e <Dio_write+0x66>
    1042:	bc c0       	rjmp	.+376    	; 0x11bc <Dio_write+0x1c4>
    1044:	2d 81       	ldd	r18, Y+5	; 0x05
    1046:	3e 81       	ldd	r19, Y+6	; 0x06
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <Dio_write+0x58>
    104e:	5f c0       	rjmp	.+190    	; 0x110e <Dio_write+0x116>
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	83 30       	cpi	r24, 0x03	; 3
    1056:	91 05       	cpc	r25, r1
    1058:	09 f4       	brne	.+2      	; 0x105c <Dio_write+0x64>
    105a:	85 c0       	rjmp	.+266    	; 0x1166 <Dio_write+0x16e>
    105c:	af c0       	rjmp	.+350    	; 0x11bc <Dio_write+0x1c4>

	case PORT_A:
		if (dir == OUTPUT) {
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	a1 f4       	brne	.+40     	; 0x108c <Dio_write+0x94>
			SET_BIT(DDRA, pin);
    1064:	aa e3       	ldi	r26, 0x3A	; 58
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ea e3       	ldi	r30, 0x3A	; 58
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <Dio_write+0x8a>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <Dio_write+0x86>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	98 c0       	rjmp	.+304    	; 0x11bc <Dio_write+0x1c4>
		} else {
			CLR_BIT(DDRA, pin);
    108c:	aa e3       	ldi	r26, 0x3A	; 58
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ea e3       	ldi	r30, 0x3A	; 58
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <Dio_write+0xb2>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <Dio_write+0xae>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	83 c0       	rjmp	.+262    	; 0x11bc <Dio_write+0x1c4>
		}
		break;

	case PORT_B:
		if (dir == OUTPUT) {
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	a1 f4       	brne	.+40     	; 0x10e4 <Dio_write+0xec>
			SET_BIT(DDRB, pin);
    10bc:	a7 e3       	ldi	r26, 0x37	; 55
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e7 e3       	ldi	r30, 0x37	; 55
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <Dio_write+0xe2>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <Dio_write+0xde>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	6c c0       	rjmp	.+216    	; 0x11bc <Dio_write+0x1c4>
		} else {
			CLR_BIT(DDRB, pin);
    10e4:	a7 e3       	ldi	r26, 0x37	; 55
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e7 e3       	ldi	r30, 0x37	; 55
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <Dio_write+0x10a>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <Dio_write+0x106>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	57 c0       	rjmp	.+174    	; 0x11bc <Dio_write+0x1c4>
		}
			break;

	case PORT_C:
		if (dir == OUTPUT) {
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	a1 f4       	brne	.+40     	; 0x113c <Dio_write+0x144>
			SET_BIT(DDRC, pin);
    1114:	a4 e3       	ldi	r26, 0x34	; 52
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e4 e3       	ldi	r30, 0x34	; 52
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <Dio_write+0x13a>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <Dio_write+0x136>
    1136:	84 2b       	or	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	40 c0       	rjmp	.+128    	; 0x11bc <Dio_write+0x1c4>
		} else {
			CLR_BIT(DDRC, pin);
    113c:	a4 e3       	ldi	r26, 0x34	; 52
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e4 e3       	ldi	r30, 0x34	; 52
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <Dio_write+0x162>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <Dio_write+0x15e>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	2b c0       	rjmp	.+86     	; 0x11bc <Dio_write+0x1c4>
		}
			break;

	case PORT_D:
		if (dir == OUTPUT) {
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	a1 f4       	brne	.+40     	; 0x1194 <Dio_write+0x19c>
			SET_BIT(DDRD, pin);
    116c:	a1 e3       	ldi	r26, 0x31	; 49
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e1 e3       	ldi	r30, 0x31	; 49
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <Dio_write+0x192>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <Dio_write+0x18e>
    118e:	84 2b       	or	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	14 c0       	rjmp	.+40     	; 0x11bc <Dio_write+0x1c4>
		} else {
			CLR_BIT(DDRD, pin);
    1194:	a1 e3       	ldi	r26, 0x31	; 49
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e1 e3       	ldi	r30, 0x31	; 49
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <Dio_write+0x1ba>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <Dio_write+0x1b6>
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	8c 93       	st	X, r24
			break;

	default:
		break;
	}
}
    11bc:	26 96       	adiw	r28, 0x06	; 6
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <Dio_write_PORT>:


void Dio_write_PORT(Dio_Channel_Type channel, LEVEL level) {
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <Dio_write_PORT+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <Dio_write_PORT+0x8>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <Dio_write_PORT+0xa>
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	8b 83       	std	Y+3, r24	; 0x03
    11de:	6c 83       	std	Y+4, r22	; 0x04

	Dio_PORT_Type port = channel / 8;
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	86 95       	lsr	r24
    11e4:	86 95       	lsr	r24
    11e6:	86 95       	lsr	r24
    11e8:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Channel_Type pin = channel % 8;
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	87 70       	andi	r24, 0x07	; 7
    11ee:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	3e 83       	std	Y+6, r19	; 0x06
    11f8:	2d 83       	std	Y+5, r18	; 0x05
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	91 05       	cpc	r25, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <Dio_write_PORT+0x38>
    1204:	43 c0       	rjmp	.+134    	; 0x128c <Dio_write_PORT+0xbe>
    1206:	2d 81       	ldd	r18, Y+5	; 0x05
    1208:	3e 81       	ldd	r19, Y+6	; 0x06
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	2c f4       	brge	.+10     	; 0x121a <Dio_write_PORT+0x4c>
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	71 f0       	breq	.+28     	; 0x1234 <Dio_write_PORT+0x66>
    1218:	bc c0       	rjmp	.+376    	; 0x1392 <Dio_write_PORT+0x1c4>
    121a:	2d 81       	ldd	r18, Y+5	; 0x05
    121c:	3e 81       	ldd	r19, Y+6	; 0x06
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	31 05       	cpc	r19, r1
    1222:	09 f4       	brne	.+2      	; 0x1226 <Dio_write_PORT+0x58>
    1224:	5f c0       	rjmp	.+190    	; 0x12e4 <Dio_write_PORT+0x116>
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	9e 81       	ldd	r25, Y+6	; 0x06
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	91 05       	cpc	r25, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <Dio_write_PORT+0x64>
    1230:	85 c0       	rjmp	.+266    	; 0x133c <Dio_write_PORT+0x16e>
    1232:	af c0       	rjmp	.+350    	; 0x1392 <Dio_write_PORT+0x1c4>

	case PORT_A:
			if (level == HIGH) {
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	a1 f4       	brne	.+40     	; 0x1262 <Dio_write_PORT+0x94>
				SET_BIT(PORTA, pin);
    123a:	ab e3       	ldi	r26, 0x3B	; 59
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	eb e3       	ldi	r30, 0x3B	; 59
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <Dio_write_PORT+0x8a>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <Dio_write_PORT+0x86>
    125c:	84 2b       	or	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	98 c0       	rjmp	.+304    	; 0x1392 <Dio_write_PORT+0x1c4>
			} else {
				CLR_BIT(PORTA, pin);
    1262:	ab e3       	ldi	r26, 0x3B	; 59
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	eb e3       	ldi	r30, 0x3B	; 59
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <Dio_write_PORT+0xb2>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <Dio_write_PORT+0xae>
    1284:	80 95       	com	r24
    1286:	84 23       	and	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	83 c0       	rjmp	.+262    	; 0x1392 <Dio_write_PORT+0x1c4>
			}
			break;

		case PORT_B:
			if (level == HIGH) {
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	a1 f4       	brne	.+40     	; 0x12ba <Dio_write_PORT+0xec>
				SET_BIT(PORTB, pin);
    1292:	a8 e3       	ldi	r26, 0x38	; 56
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e8 e3       	ldi	r30, 0x38	; 56
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <Dio_write_PORT+0xe2>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <Dio_write_PORT+0xde>
    12b4:	84 2b       	or	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	6c c0       	rjmp	.+216    	; 0x1392 <Dio_write_PORT+0x1c4>
			} else {
				CLR_BIT(PORTB, pin);
    12ba:	a8 e3       	ldi	r26, 0x38	; 56
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e8 e3       	ldi	r30, 0x38	; 56
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <Dio_write_PORT+0x10a>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <Dio_write_PORT+0x106>
    12dc:	80 95       	com	r24
    12de:	84 23       	and	r24, r20
    12e0:	8c 93       	st	X, r24
    12e2:	57 c0       	rjmp	.+174    	; 0x1392 <Dio_write_PORT+0x1c4>
			}
				break;

		case PORT_C:
			if (level == HIGH) {
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	a1 f4       	brne	.+40     	; 0x1312 <Dio_write_PORT+0x144>
				SET_BIT(PORTC, pin);
    12ea:	a5 e3       	ldi	r26, 0x35	; 53
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e5 e3       	ldi	r30, 0x35	; 53
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <Dio_write_PORT+0x13a>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <Dio_write_PORT+0x136>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	40 c0       	rjmp	.+128    	; 0x1392 <Dio_write_PORT+0x1c4>
			} else {
				CLR_BIT(PORTC, pin);
    1312:	a5 e3       	ldi	r26, 0x35	; 53
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e5 e3       	ldi	r30, 0x35	; 53
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <Dio_write_PORT+0x162>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <Dio_write_PORT+0x15e>
    1334:	80 95       	com	r24
    1336:	84 23       	and	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	2b c0       	rjmp	.+86     	; 0x1392 <Dio_write_PORT+0x1c4>
			}
				break;

		case PORT_D:
			if (level == HIGH) {
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	a1 f4       	brne	.+40     	; 0x136a <Dio_write_PORT+0x19c>
				SET_BIT(PORTD, pin);
    1342:	a2 e3       	ldi	r26, 0x32	; 50
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e2 e3       	ldi	r30, 0x32	; 50
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <Dio_write_PORT+0x192>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <Dio_write_PORT+0x18e>
    1364:	84 2b       	or	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	14 c0       	rjmp	.+40     	; 0x1392 <Dio_write_PORT+0x1c4>
			} else {
				CLR_BIT(PORTD, pin);
    136a:	a2 e3       	ldi	r26, 0x32	; 50
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e2 e3       	ldi	r30, 0x32	; 50
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <Dio_write_PORT+0x1ba>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <Dio_write_PORT+0x1b6>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
				break;

		default:
			break;
		}
}
    1392:	26 96       	adiw	r28, 0x06	; 6
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	cd bf       	out	0x3d, r28	; 61
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <Dio_Read_PORT>:


LEVEL Dio_Read_PORT(Dio_Channel_Type channel) {
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <Dio_Read_PORT+0x6>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <Dio_Read_PORT+0x8>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <Dio_Read_PORT+0xa>
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	8c 83       	std	Y+4, r24	; 0x04

	Dio_PORT_Type port = channel / 8;
    13b4:	8c 81       	ldd	r24, Y+4	; 0x04
    13b6:	86 95       	lsr	r24
    13b8:	86 95       	lsr	r24
    13ba:	86 95       	lsr	r24
    13bc:	8b 83       	std	Y+3, r24	; 0x03
	Dio_Channel_Type pin = channel % 8;
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	87 70       	andi	r24, 0x07	; 7
    13c2:	8a 83       	std	Y+2, r24	; 0x02

	LEVEL level;

	switch (port) {
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3e 83       	std	Y+6, r19	; 0x06
    13cc:	2d 83       	std	Y+5, r18	; 0x05
    13ce:	4d 81       	ldd	r20, Y+5	; 0x05
    13d0:	5e 81       	ldd	r21, Y+6	; 0x06
    13d2:	41 30       	cpi	r20, 0x01	; 1
    13d4:	51 05       	cpc	r21, r1
    13d6:	41 f1       	breq	.+80     	; 0x1428 <Dio_Read_PORT+0x84>
    13d8:	8d 81       	ldd	r24, Y+5	; 0x05
    13da:	9e 81       	ldd	r25, Y+6	; 0x06
    13dc:	82 30       	cpi	r24, 0x02	; 2
    13de:	91 05       	cpc	r25, r1
    13e0:	34 f4       	brge	.+12     	; 0x13ee <Dio_Read_PORT+0x4a>
    13e2:	2d 81       	ldd	r18, Y+5	; 0x05
    13e4:	3e 81       	ldd	r19, Y+6	; 0x06
    13e6:	21 15       	cp	r18, r1
    13e8:	31 05       	cpc	r19, r1
    13ea:	61 f0       	breq	.+24     	; 0x1404 <Dio_Read_PORT+0x60>
    13ec:	52 c0       	rjmp	.+164    	; 0x1492 <Dio_Read_PORT+0xee>
    13ee:	4d 81       	ldd	r20, Y+5	; 0x05
    13f0:	5e 81       	ldd	r21, Y+6	; 0x06
    13f2:	42 30       	cpi	r20, 0x02	; 2
    13f4:	51 05       	cpc	r21, r1
    13f6:	51 f1       	breq	.+84     	; 0x144c <Dio_Read_PORT+0xa8>
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	91 05       	cpc	r25, r1
    1400:	b9 f1       	breq	.+110    	; 0x1470 <Dio_Read_PORT+0xcc>
    1402:	47 c0       	rjmp	.+142    	; 0x1492 <Dio_Read_PORT+0xee>

	case PORT_A:
		level = GET_BIT(PORTA, pin);
    1404:	eb e3       	ldi	r30, 0x3B	; 59
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a9 01       	movw	r20, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <Dio_Read_PORT+0x78>
    1418:	55 95       	asr	r21
    141a:	47 95       	ror	r20
    141c:	8a 95       	dec	r24
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <Dio_Read_PORT+0x74>
    1420:	ca 01       	movw	r24, r20
    1422:	81 70       	andi	r24, 0x01	; 1
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	35 c0       	rjmp	.+106    	; 0x1492 <Dio_Read_PORT+0xee>
		break;

	case PORT_B:
		level = GET_BIT(PORTB, pin);
    1428:	e8 e3       	ldi	r30, 0x38	; 56
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a9 01       	movw	r20, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <Dio_Read_PORT+0x9c>
    143c:	55 95       	asr	r21
    143e:	47 95       	ror	r20
    1440:	8a 95       	dec	r24
    1442:	e2 f7       	brpl	.-8      	; 0x143c <Dio_Read_PORT+0x98>
    1444:	ca 01       	movw	r24, r20
    1446:	81 70       	andi	r24, 0x01	; 1
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	23 c0       	rjmp	.+70     	; 0x1492 <Dio_Read_PORT+0xee>
		break;

	case PORT_C:
		level = GET_BIT(PORTC, pin);
    144c:	e5 e3       	ldi	r30, 0x35	; 53
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a9 01       	movw	r20, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <Dio_Read_PORT+0xc0>
    1460:	55 95       	asr	r21
    1462:	47 95       	ror	r20
    1464:	8a 95       	dec	r24
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <Dio_Read_PORT+0xbc>
    1468:	ca 01       	movw	r24, r20
    146a:	81 70       	andi	r24, 0x01	; 1
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	11 c0       	rjmp	.+34     	; 0x1492 <Dio_Read_PORT+0xee>
		break;

	case PORT_D:
		level = GET_BIT(PORTD, pin);
    1470:	e2 e3       	ldi	r30, 0x32	; 50
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a9 01       	movw	r20, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <Dio_Read_PORT+0xe4>
    1484:	55 95       	asr	r21
    1486:	47 95       	ror	r20
    1488:	8a 95       	dec	r24
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <Dio_Read_PORT+0xe0>
    148c:	ca 01       	movw	r24, r20
    148e:	81 70       	andi	r24, 0x01	; 1
    1490:	89 83       	std	Y+1, r24	; 0x01

	default:
		break;
	}

		return level;
    1492:	89 81       	ldd	r24, Y+1	; 0x01
}
    1494:	26 96       	adiw	r28, 0x06	; 6
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <Dio_Read_PIN>:


LEVEL Dio_Read_PIN(Dio_Channel_Type channel) {
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <Dio_Read_PIN+0x6>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <Dio_Read_PIN+0x8>
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <Dio_Read_PIN+0xa>
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	8c 83       	std	Y+4, r24	; 0x04

	Dio_PORT_Type port = channel / 8;
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	86 95       	lsr	r24
    14ba:	86 95       	lsr	r24
    14bc:	86 95       	lsr	r24
    14be:	8b 83       	std	Y+3, r24	; 0x03
	Dio_Channel_Type pin = channel % 8;
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	87 70       	andi	r24, 0x07	; 7
    14c4:	8a 83       	std	Y+2, r24	; 0x02

	LEVEL level;

	switch (port) {
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3e 83       	std	Y+6, r19	; 0x06
    14ce:	2d 83       	std	Y+5, r18	; 0x05
    14d0:	4d 81       	ldd	r20, Y+5	; 0x05
    14d2:	5e 81       	ldd	r21, Y+6	; 0x06
    14d4:	41 30       	cpi	r20, 0x01	; 1
    14d6:	51 05       	cpc	r21, r1
    14d8:	41 f1       	breq	.+80     	; 0x152a <Dio_Read_PIN+0x84>
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	82 30       	cpi	r24, 0x02	; 2
    14e0:	91 05       	cpc	r25, r1
    14e2:	34 f4       	brge	.+12     	; 0x14f0 <Dio_Read_PIN+0x4a>
    14e4:	2d 81       	ldd	r18, Y+5	; 0x05
    14e6:	3e 81       	ldd	r19, Y+6	; 0x06
    14e8:	21 15       	cp	r18, r1
    14ea:	31 05       	cpc	r19, r1
    14ec:	61 f0       	breq	.+24     	; 0x1506 <Dio_Read_PIN+0x60>
    14ee:	52 c0       	rjmp	.+164    	; 0x1594 <Dio_Read_PIN+0xee>
    14f0:	4d 81       	ldd	r20, Y+5	; 0x05
    14f2:	5e 81       	ldd	r21, Y+6	; 0x06
    14f4:	42 30       	cpi	r20, 0x02	; 2
    14f6:	51 05       	cpc	r21, r1
    14f8:	51 f1       	breq	.+84     	; 0x154e <Dio_Read_PIN+0xa8>
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	83 30       	cpi	r24, 0x03	; 3
    1500:	91 05       	cpc	r25, r1
    1502:	b9 f1       	breq	.+110    	; 0x1572 <Dio_Read_PIN+0xcc>
    1504:	47 c0       	rjmp	.+142    	; 0x1594 <Dio_Read_PIN+0xee>

	case PORT_A:
		level = GET_BIT(PINA, pin);
    1506:	e9 e3       	ldi	r30, 0x39	; 57
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	a9 01       	movw	r20, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <Dio_Read_PIN+0x78>
    151a:	55 95       	asr	r21
    151c:	47 95       	ror	r20
    151e:	8a 95       	dec	r24
    1520:	e2 f7       	brpl	.-8      	; 0x151a <Dio_Read_PIN+0x74>
    1522:	ca 01       	movw	r24, r20
    1524:	81 70       	andi	r24, 0x01	; 1
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	35 c0       	rjmp	.+106    	; 0x1594 <Dio_Read_PIN+0xee>
		break;

	case PORT_B:
		level = GET_BIT(PINB, pin);
    152a:	e6 e3       	ldi	r30, 0x36	; 54
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	88 2f       	mov	r24, r24
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	a9 01       	movw	r20, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <Dio_Read_PIN+0x9c>
    153e:	55 95       	asr	r21
    1540:	47 95       	ror	r20
    1542:	8a 95       	dec	r24
    1544:	e2 f7       	brpl	.-8      	; 0x153e <Dio_Read_PIN+0x98>
    1546:	ca 01       	movw	r24, r20
    1548:	81 70       	andi	r24, 0x01	; 1
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	23 c0       	rjmp	.+70     	; 0x1594 <Dio_Read_PIN+0xee>
		break;

	case PORT_C:
		level = GET_BIT(PINC, pin);
    154e:	e3 e3       	ldi	r30, 0x33	; 51
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a9 01       	movw	r20, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <Dio_Read_PIN+0xc0>
    1562:	55 95       	asr	r21
    1564:	47 95       	ror	r20
    1566:	8a 95       	dec	r24
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <Dio_Read_PIN+0xbc>
    156a:	ca 01       	movw	r24, r20
    156c:	81 70       	andi	r24, 0x01	; 1
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	11 c0       	rjmp	.+34     	; 0x1594 <Dio_Read_PIN+0xee>
		break;

	case PORT_D:
		level = GET_BIT(PIND, pin);
    1572:	e0 e3       	ldi	r30, 0x30	; 48
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a9 01       	movw	r20, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <Dio_Read_PIN+0xe4>
    1586:	55 95       	asr	r21
    1588:	47 95       	ror	r20
    158a:	8a 95       	dec	r24
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <Dio_Read_PIN+0xe0>
    158e:	ca 01       	movw	r24, r20
    1590:	81 70       	andi	r24, 0x01	; 1
    1592:	89 83       	std	Y+1, r24	; 0x01

	default:
		break;
	}

		return level;
    1594:	89 81       	ldd	r24, Y+1	; 0x01
}
    1596:	26 96       	adiw	r28, 0x06	; 6
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <Dio_Toggle_Channel>:


void Dio_Toggle_Channel(Dio_Channel_Type channel) {
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <Dio_Toggle_Channel+0x6>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <Dio_Toggle_Channel+0x8>
    15b0:	0f 92       	push	r0
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	8b 83       	std	Y+3, r24	; 0x03

	Dio_PORT_Type port = channel / 8;
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	86 95       	lsr	r24
    15bc:	86 95       	lsr	r24
    15be:	86 95       	lsr	r24
    15c0:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Channel_Type pin = channel % 8;
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	87 70       	andi	r24, 0x07	; 7
    15c6:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	3d 83       	std	Y+5, r19	; 0x05
    15d0:	2c 83       	std	Y+4, r18	; 0x04
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	9d 81       	ldd	r25, Y+5	; 0x05
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	91 05       	cpc	r25, r1
    15da:	49 f1       	breq	.+82     	; 0x162e <Dio_Toggle_Channel+0x86>
    15dc:	2c 81       	ldd	r18, Y+4	; 0x04
    15de:	3d 81       	ldd	r19, Y+5	; 0x05
    15e0:	22 30       	cpi	r18, 0x02	; 2
    15e2:	31 05       	cpc	r19, r1
    15e4:	2c f4       	brge	.+10     	; 0x15f0 <Dio_Toggle_Channel+0x48>
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	61 f0       	breq	.+24     	; 0x1606 <Dio_Toggle_Channel+0x5e>
    15ee:	5a c0       	rjmp	.+180    	; 0x16a4 <Dio_Toggle_Channel+0xfc>
    15f0:	2c 81       	ldd	r18, Y+4	; 0x04
    15f2:	3d 81       	ldd	r19, Y+5	; 0x05
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	71 f1       	breq	.+92     	; 0x1656 <Dio_Toggle_Channel+0xae>
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	9d 81       	ldd	r25, Y+5	; 0x05
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	91 05       	cpc	r25, r1
    1602:	e9 f1       	breq	.+122    	; 0x167e <Dio_Toggle_Channel+0xd6>
    1604:	4f c0       	rjmp	.+158    	; 0x16a4 <Dio_Toggle_Channel+0xfc>

	case PORT_A:
		TOG_BIT(PORTA, pin);
    1606:	ab e3       	ldi	r26, 0x3B	; 59
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	eb e3       	ldi	r30, 0x3B	; 59
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	48 2f       	mov	r20, r24
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 2e       	mov	r0, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <Dio_Toggle_Channel+0x7c>
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	0a 94       	dec	r0
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <Dio_Toggle_Channel+0x78>
    1628:	84 27       	eor	r24, r20
    162a:	8c 93       	st	X, r24
    162c:	3b c0       	rjmp	.+118    	; 0x16a4 <Dio_Toggle_Channel+0xfc>
		break;

	case PORT_B:
		TOG_BIT(PORTB, pin);
    162e:	a8 e3       	ldi	r26, 0x38	; 56
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e8 e3       	ldi	r30, 0x38	; 56
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <Dio_Toggle_Channel+0xa4>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <Dio_Toggle_Channel+0xa0>
    1650:	84 27       	eor	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	27 c0       	rjmp	.+78     	; 0x16a4 <Dio_Toggle_Channel+0xfc>
		break;

	case PORT_C:
		TOG_BIT(PORTC, pin);
    1656:	a5 e3       	ldi	r26, 0x35	; 53
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e5 e3       	ldi	r30, 0x35	; 53
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <Dio_Toggle_Channel+0xcc>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <Dio_Toggle_Channel+0xc8>
    1678:	84 27       	eor	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	13 c0       	rjmp	.+38     	; 0x16a4 <Dio_Toggle_Channel+0xfc>
		break;

	case PORT_D:
		TOG_BIT(PORTD, pin);
    167e:	a2 e3       	ldi	r26, 0x32	; 50
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e2 e3       	ldi	r30, 0x32	; 50
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <Dio_Toggle_Channel+0xf4>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <Dio_Toggle_Channel+0xf0>
    16a0:	84 27       	eor	r24, r20
    16a2:	8c 93       	st	X, r24
		break;

	default:
		break;
	}
}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <Dio_init>:
//		{PORT_D,PIN_5,OUTPUT,LOW},
//		{PORT_D,PIN_6,INPUT,LOW},
};


void Dio_init() {
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <Dio_init+0x6>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62

	for (int i = 0; i < (sizeof(PinCfg) / sizeof(PinCfg[0])); i++) {
    16be:	1a 82       	std	Y+2, r1	; 0x02
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	51 c1       	rjmp	.+674    	; 0x1966 <Dio_init+0x2b2>
		if (PinCfg[i].port == PORT_A) {
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	fc 01       	movw	r30, r24
    16d2:	e8 59       	subi	r30, 0x98	; 152
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	88 23       	and	r24, r24
    16da:	09 f0       	breq	.+2      	; 0x16de <Dio_init+0x2a>
    16dc:	46 c0       	rjmp	.+140    	; 0x176a <Dio_init+0xb6>
			if (PinCfg[i].dir == OUTPUT) {
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	fc 01       	movw	r30, r24
    16ec:	e6 59       	subi	r30, 0x96	; 150
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	e9 f4       	brne	.+58     	; 0x1730 <Dio_init+0x7c>
				SET_BIT(DDRA, PinCfg[i].pin);
    16f6:	aa e3       	ldi	r26, 0x3A	; 58
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	ea e3       	ldi	r30, 0x3A	; 58
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	9a 81       	ldd	r25, Y+2	; 0x02
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	fc 01       	movw	r30, r24
    1710:	e7 59       	subi	r30, 0x97	; 151
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <Dio_init+0x72>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <Dio_init+0x6e>
    172a:	84 2b       	or	r24, r20
    172c:	8c 93       	st	X, r24
    172e:	1d c0       	rjmp	.+58     	; 0x176a <Dio_init+0xb6>
			} else {
				CLR_BIT(DDRA, PinCfg[i].pin);
    1730:	aa e3       	ldi	r26, 0x3A	; 58
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ea e3       	ldi	r30, 0x3A	; 58
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	fc 01       	movw	r30, r24
    174a:	e7 59       	subi	r30, 0x97	; 151
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 81       	ld	r24, Z
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <Dio_init+0xac>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <Dio_init+0xa8>
    1764:	80 95       	com	r24
    1766:	84 23       	and	r24, r20
    1768:	8c 93       	st	X, r24
			}
		}

		if (PinCfg[i].port == PORT_B) {
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	fc 01       	movw	r30, r24
    1778:	e8 59       	subi	r30, 0x98	; 152
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	80 81       	ld	r24, Z
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	09 f0       	breq	.+2      	; 0x1784 <Dio_init+0xd0>
    1782:	46 c0       	rjmp	.+140    	; 0x1810 <Dio_init+0x15c>
			if (PinCfg[i].dir == OUTPUT) {
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	fc 01       	movw	r30, r24
    1792:	e6 59       	subi	r30, 0x96	; 150
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 81       	ld	r24, Z
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	e9 f4       	brne	.+58     	; 0x17d6 <Dio_init+0x122>
				SET_BIT(DDRB, PinCfg[i].pin);
    179c:	a7 e3       	ldi	r26, 0x37	; 55
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e7 e3       	ldi	r30, 0x37	; 55
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	fc 01       	movw	r30, r24
    17b6:	e7 59       	subi	r30, 0x97	; 151
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	80 81       	ld	r24, Z
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <Dio_init+0x118>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <Dio_init+0x114>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	1d c0       	rjmp	.+58     	; 0x1810 <Dio_init+0x15c>
			} else {
				CLR_BIT(DDRB, PinCfg[i].pin);
    17d6:	a7 e3       	ldi	r26, 0x37	; 55
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e7 e3       	ldi	r30, 0x37	; 55
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	9a 81       	ldd	r25, Y+2	; 0x02
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	fc 01       	movw	r30, r24
    17f0:	e7 59       	subi	r30, 0x97	; 151
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	80 81       	ld	r24, Z
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <Dio_init+0x152>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <Dio_init+0x14e>
    180a:	80 95       	com	r24
    180c:	84 23       	and	r24, r20
    180e:	8c 93       	st	X, r24
			}
		}

		if (PinCfg[i].port == PORT_C) {
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	9a 81       	ldd	r25, Y+2	; 0x02
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	fc 01       	movw	r30, r24
    181e:	e8 59       	subi	r30, 0x98	; 152
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 81       	ld	r24, Z
    1824:	82 30       	cpi	r24, 0x02	; 2
    1826:	09 f0       	breq	.+2      	; 0x182a <Dio_init+0x176>
    1828:	46 c0       	rjmp	.+140    	; 0x18b6 <Dio_init+0x202>
			if (PinCfg[i].dir == OUTPUT) {
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	fc 01       	movw	r30, r24
    1838:	e6 59       	subi	r30, 0x96	; 150
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	80 81       	ld	r24, Z
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	e9 f4       	brne	.+58     	; 0x187c <Dio_init+0x1c8>
				SET_BIT(DDRC, PinCfg[i].pin);
    1842:	a4 e3       	ldi	r26, 0x34	; 52
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e4 e3       	ldi	r30, 0x34	; 52
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	fc 01       	movw	r30, r24
    185c:	e7 59       	subi	r30, 0x97	; 151
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <Dio_init+0x1be>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <Dio_init+0x1ba>
    1876:	84 2b       	or	r24, r20
    1878:	8c 93       	st	X, r24
    187a:	1d c0       	rjmp	.+58     	; 0x18b6 <Dio_init+0x202>
			} else {
				CLR_BIT(DDRC, PinCfg[i].pin);
    187c:	a4 e3       	ldi	r26, 0x34	; 52
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e4 e3       	ldi	r30, 0x34	; 52
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	48 2f       	mov	r20, r24
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	fc 01       	movw	r30, r24
    1896:	e7 59       	subi	r30, 0x97	; 151
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 81       	ld	r24, Z
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 2e       	mov	r0, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <Dio_init+0x1f8>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <Dio_init+0x1f4>
    18b0:	80 95       	com	r24
    18b2:	84 23       	and	r24, r20
    18b4:	8c 93       	st	X, r24
			}
		}

		if (PinCfg[i].port == PORT_D) {
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	fc 01       	movw	r30, r24
    18c4:	e8 59       	subi	r30, 0x98	; 152
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 81       	ld	r24, Z
    18ca:	83 30       	cpi	r24, 0x03	; 3
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <Dio_init+0x21c>
    18ce:	46 c0       	rjmp	.+140    	; 0x195c <Dio_init+0x2a8>
			if (PinCfg[i].dir == OUTPUT) {
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	9a 81       	ldd	r25, Y+2	; 0x02
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	fc 01       	movw	r30, r24
    18de:	e6 59       	subi	r30, 0x96	; 150
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 81       	ld	r24, Z
    18e4:	81 30       	cpi	r24, 0x01	; 1
    18e6:	e9 f4       	brne	.+58     	; 0x1922 <Dio_init+0x26e>
				SET_BIT(DDRD, PinCfg[i].pin);
    18e8:	a1 e3       	ldi	r26, 0x31	; 49
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e1 e3       	ldi	r30, 0x31	; 49
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	9a 81       	ldd	r25, Y+2	; 0x02
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	fc 01       	movw	r30, r24
    1902:	e7 59       	subi	r30, 0x97	; 151
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <Dio_init+0x264>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <Dio_init+0x260>
    191c:	84 2b       	or	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	1d c0       	rjmp	.+58     	; 0x195c <Dio_init+0x2a8>
			} else {
				CLR_BIT(DDRD, PinCfg[i].pin);
    1922:	a1 e3       	ldi	r26, 0x31	; 49
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e1 e3       	ldi	r30, 0x31	; 49
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	fc 01       	movw	r30, r24
    193c:	e7 59       	subi	r30, 0x97	; 151
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	80 81       	ld	r24, Z
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	02 2e       	mov	r0, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <Dio_init+0x29e>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <Dio_init+0x29a>
    1956:	80 95       	com	r24
    1958:	84 23       	and	r24, r20
    195a:	8c 93       	st	X, r24
};


void Dio_init() {

	for (int i = 0; i < (sizeof(PinCfg) / sizeof(PinCfg[0])); i++) {
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	9a 81       	ldd	r25, Y+2	; 0x02
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	8c 30       	cpi	r24, 0x0C	; 12
    196c:	91 05       	cpc	r25, r1
    196e:	08 f4       	brcc	.+2      	; 0x1972 <Dio_init+0x2be>
    1970:	a9 ce       	rjmp	.-686    	; 0x16c4 <Dio_init+0x10>
			} else {
				CLR_BIT(DDRD, PinCfg[i].pin);
			}
		}
	}
}
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <ADC_init>:
 *      Author: ahmed
 */

#include "ADC.h"

void ADC_init() {
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62

#if ADC_ENABLE == ENABLE
	SET_BIT(ADCSRA, ADEN);
    1984:	a6 e2       	ldi	r26, 0x26	; 38
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e6 e2       	ldi	r30, 0x26	; 38
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	80 68       	ori	r24, 0x80	; 128
    1990:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
#elif ADC_SOURCE == ADC_SOURCE_RESERVED
	CLR_BIT(ADMUX, REFS0);
	SET_BIT(ADMUX, REFS1);
#elif ADC_SOURCE == ADC_SOURCE_VREF
	SET_BIT(ADMUX, REFS0);
    1992:	a7 e2       	ldi	r26, 0x27	; 39
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e7 e2       	ldi	r30, 0x27	; 39
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	80 64       	ori	r24, 0x40	; 64
    199e:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS1);
    19a0:	a7 e2       	ldi	r26, 0x27	; 39
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e7 e2       	ldi	r30, 0x27	; 39
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	80 68       	ori	r24, 0x80	; 128
    19ac:	8c 93       	st	X, r24
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_8
	SET_BIT(ADCSRA, ADPS0);
	SET_BIT(ADCSRA, ADPS1);
	CLR_BIT(ADCSRA, ADPS2);
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_16
	CLR_BIT(ADCSRA, ADPS0);
    19ae:	a6 e2       	ldi	r26, 0x26	; 38
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e6 e2       	ldi	r30, 0x26	; 38
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	8e 7f       	andi	r24, 0xFE	; 254
    19ba:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADPS1);
    19bc:	a6 e2       	ldi	r26, 0x26	; 38
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e6 e2       	ldi	r30, 0x26	; 38
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8d 7f       	andi	r24, 0xFD	; 253
    19c8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS2);
    19ca:	a6 e2       	ldi	r26, 0x26	; 38
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e6 e2       	ldi	r30, 0x26	; 38
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	84 60       	ori	r24, 0x04	; 4
    19d6:	8c 93       	st	X, r24
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_128
	SET_BIT(ADCSRA, ADPS0);
	SET_BIT(ADCSRA, ADPS1);
	SET_BIT(ADCSRA, ADPS2);
#endif
}
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <ADC_READ>:

uint16 ADC_READ(uint8 channel) {
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	6a 97       	sbiw	r28, 0x1a	; 26
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	89 8f       	std	Y+25, r24	; 0x19

	ADMUX = (ADMUX & 0b11100000) | channel;
    19f4:	a7 e2       	ldi	r26, 0x27	; 39
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e7 e2       	ldi	r30, 0x27	; 39
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	98 2f       	mov	r25, r24
    1a00:	90 7e       	andi	r25, 0xE0	; 224
    1a02:	89 8d       	ldd	r24, Y+25	; 0x19
    1a04:	89 2b       	or	r24, r25
    1a06:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC);
    1a08:	a6 e2       	ldi	r26, 0x26	; 38
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e6 e2       	ldi	r30, 0x26	; 38
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	80 64       	ori	r24, 0x40	; 64
    1a14:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA, ADIF) == 0);
    1a16:	e6 e2       	ldi	r30, 0x26	; 38
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a0 e2       	ldi	r26, 0x20	; 32
    1a22:	b1 e4       	ldi	r27, 0x41	; 65
    1a24:	8d 8b       	std	Y+21, r24	; 0x15
    1a26:	9e 8b       	std	Y+22, r25	; 0x16
    1a28:	af 8b       	std	Y+23, r26	; 0x17
    1a2a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a30:	8f 89       	ldd	r24, Y+23	; 0x17
    1a32:	98 8d       	ldd	r25, Y+24	; 0x18
    1a34:	2b ea       	ldi	r18, 0xAB	; 171
    1a36:	3a ea       	ldi	r19, 0xAA	; 170
    1a38:	4a ea       	ldi	r20, 0xAA	; 170
    1a3a:	50 e4       	ldi	r21, 0x40	; 64
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	89 8b       	std	Y+17, r24	; 0x11
    1a46:	9a 8b       	std	Y+18, r25	; 0x12
    1a48:	ab 8b       	std	Y+19, r26	; 0x13
    1a4a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a4c:	69 89       	ldd	r22, Y+17	; 0x11
    1a4e:	7a 89       	ldd	r23, Y+18	; 0x12
    1a50:	8b 89       	ldd	r24, Y+19	; 0x13
    1a52:	9c 89       	ldd	r25, Y+20	; 0x14
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a60:	88 23       	and	r24, r24
    1a62:	1c f4       	brge	.+6      	; 0x1a6a <ADC_READ+0x8c>
		__ticks = 1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	88 8b       	std	Y+16, r24	; 0x10
    1a68:	91 c0       	rjmp	.+290    	; 0x1b8c <ADC_READ+0x1ae>
	else if (__tmp > 255)
    1a6a:	69 89       	ldd	r22, Y+17	; 0x11
    1a6c:	7a 89       	ldd	r23, Y+18	; 0x12
    1a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a70:	9c 89       	ldd	r25, Y+20	; 0x14
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	4f e7       	ldi	r20, 0x7F	; 127
    1a78:	53 e4       	ldi	r21, 0x43	; 67
    1a7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	0c f0       	brlt	.+2      	; 0x1a84 <ADC_READ+0xa6>
    1a82:	7b c0       	rjmp	.+246    	; 0x1b7a <ADC_READ+0x19c>
	{
		_delay_ms(__us / 1000.0);
    1a84:	6d 89       	ldd	r22, Y+21	; 0x15
    1a86:	7e 89       	ldd	r23, Y+22	; 0x16
    1a88:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	4a e7       	ldi	r20, 0x7A	; 122
    1a92:	54 e4       	ldi	r21, 0x44	; 68
    1a94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	8c 87       	std	Y+12, r24	; 0x0c
    1a9e:	9d 87       	std	Y+13, r25	; 0x0d
    1aa0:	ae 87       	std	Y+14, r26	; 0x0e
    1aa2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1aa6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1aa8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aaa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a e7       	ldi	r20, 0x7A	; 122
    1ab2:	55 e4       	ldi	r21, 0x45	; 69
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	88 87       	std	Y+8, r24	; 0x08
    1abe:	99 87       	std	Y+9, r25	; 0x09
    1ac0:	aa 87       	std	Y+10, r26	; 0x0a
    1ac2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ac4:	68 85       	ldd	r22, Y+8	; 0x08
    1ac6:	79 85       	ldd	r23, Y+9	; 0x09
    1ac8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aca:	9b 85       	ldd	r25, Y+11	; 0x0b
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ad8:	88 23       	and	r24, r24
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <ADC_READ+0x108>
		__ticks = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9f 83       	std	Y+7, r25	; 0x07
    1ae2:	8e 83       	std	Y+6, r24	; 0x06
    1ae4:	3f c0       	rjmp	.+126    	; 0x1b64 <ADC_READ+0x186>
	else if (__tmp > 65535)
    1ae6:	68 85       	ldd	r22, Y+8	; 0x08
    1ae8:	79 85       	ldd	r23, Y+9	; 0x09
    1aea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	3f ef       	ldi	r19, 0xFF	; 255
    1af2:	4f e7       	ldi	r20, 0x7F	; 127
    1af4:	57 e4       	ldi	r21, 0x47	; 71
    1af6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1afa:	18 16       	cp	r1, r24
    1afc:	4c f5       	brge	.+82     	; 0x1b50 <ADC_READ+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b00:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b02:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b04:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e2       	ldi	r20, 0x20	; 32
    1b0c:	51 e4       	ldi	r21, 0x41	; 65
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9f 83       	std	Y+7, r25	; 0x07
    1b24:	8e 83       	std	Y+6, r24	; 0x06
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <ADC_READ+0x168>
    1b28:	80 e9       	ldi	r24, 0x90	; 144
    1b2a:	91 e0       	ldi	r25, 0x01	; 1
    1b2c:	9d 83       	std	Y+5, r25	; 0x05
    1b2e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b30:	8c 81       	ldd	r24, Y+4	; 0x04
    1b32:	9d 81       	ldd	r25, Y+5	; 0x05
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <ADC_READ+0x156>
    1b38:	9d 83       	std	Y+5, r25	; 0x05
    1b3a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	9f 83       	std	Y+7, r25	; 0x07
    1b44:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b46:	8e 81       	ldd	r24, Y+6	; 0x06
    1b48:	9f 81       	ldd	r25, Y+7	; 0x07
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	69 f7       	brne	.-38     	; 0x1b28 <ADC_READ+0x14a>
    1b4e:	24 c0       	rjmp	.+72     	; 0x1b98 <ADC_READ+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b50:	68 85       	ldd	r22, Y+8	; 0x08
    1b52:	79 85       	ldd	r23, Y+9	; 0x09
    1b54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9f 83       	std	Y+7, r25	; 0x07
    1b62:	8e 83       	std	Y+6, r24	; 0x06
    1b64:	8e 81       	ldd	r24, Y+6	; 0x06
    1b66:	9f 81       	ldd	r25, Y+7	; 0x07
    1b68:	9b 83       	std	Y+3, r25	; 0x03
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <ADC_READ+0x192>
    1b74:	9b 83       	std	Y+3, r25	; 0x03
    1b76:	8a 83       	std	Y+2, r24	; 0x02
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <ADC_READ+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b7a:	69 89       	ldd	r22, Y+17	; 0x11
    1b7c:	7a 89       	ldd	r23, Y+18	; 0x12
    1b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b80:	9c 89       	ldd	r25, Y+20	; 0x14
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	88 8b       	std	Y+16, r24	; 0x10
    1b8c:	88 89       	ldd	r24, Y+16	; 0x10
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	8a 95       	dec	r24
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <ADC_READ+0x1b4>
    1b96:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(10);

	SET_BIT(ADCSRA, ADIF);
    1b98:	a6 e2       	ldi	r26, 0x26	; 38
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e6 e2       	ldi	r30, 0x26	; 38
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	80 61       	ori	r24, 0x10	; 16
    1ba4:	8c 93       	st	X, r24

	return ADC;
    1ba6:	e4 e2       	ldi	r30, 0x24	; 36
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	91 81       	ldd	r25, Z+1	; 0x01
}
    1bae:	6a 96       	adiw	r28, 0x1a	; 26
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <LCD_init>:
 */


#include "LCD.h"

void LCD_init() {
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	6c 97       	sbiw	r28, 0x1c	; 28
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
	Dio_write_PORT(Rw, LOW);
    1bd4:	8a e0       	ldi	r24, 0x0A	; 10
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 ea       	ldi	r26, 0xA0	; 160
    1be2:	b1 e4       	ldi	r27, 0x41	; 65
    1be4:	89 8f       	std	Y+25, r24	; 0x19
    1be6:	9a 8f       	std	Y+26, r25	; 0x1a
    1be8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bec:	69 8d       	ldd	r22, Y+25	; 0x19
    1bee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	4a e7       	ldi	r20, 0x7A	; 122
    1bfa:	55 e4       	ldi	r21, 0x45	; 69
    1bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	8d 8b       	std	Y+21, r24	; 0x15
    1c06:	9e 8b       	std	Y+22, r25	; 0x16
    1c08:	af 8b       	std	Y+23, r26	; 0x17
    1c0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e8       	ldi	r20, 0x80	; 128
    1c1a:	5f e3       	ldi	r21, 0x3F	; 63
    1c1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c20:	88 23       	and	r24, r24
    1c22:	2c f4       	brge	.+10     	; 0x1c2e <LCD_init+0x6e>
		__ticks = 1;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9c 8b       	std	Y+20, r25	; 0x14
    1c2a:	8b 8b       	std	Y+19, r24	; 0x13
    1c2c:	3f c0       	rjmp	.+126    	; 0x1cac <LCD_init+0xec>
	else if (__tmp > 65535)
    1c2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c30:	7e 89       	ldd	r23, Y+22	; 0x16
    1c32:	8f 89       	ldd	r24, Y+23	; 0x17
    1c34:	98 8d       	ldd	r25, Y+24	; 0x18
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	3f ef       	ldi	r19, 0xFF	; 255
    1c3a:	4f e7       	ldi	r20, 0x7F	; 127
    1c3c:	57 e4       	ldi	r21, 0x47	; 71
    1c3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	4c f5       	brge	.+82     	; 0x1c98 <LCD_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c46:	69 8d       	ldd	r22, Y+25	; 0x19
    1c48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e2       	ldi	r20, 0x20	; 32
    1c54:	51 e4       	ldi	r21, 0x41	; 65
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	bc 01       	movw	r22, r24
    1c60:	cd 01       	movw	r24, r26
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9c 8b       	std	Y+20, r25	; 0x14
    1c6c:	8b 8b       	std	Y+19, r24	; 0x13
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <LCD_init+0xce>
    1c70:	80 e9       	ldi	r24, 0x90	; 144
    1c72:	91 e0       	ldi	r25, 0x01	; 1
    1c74:	9a 8b       	std	Y+18, r25	; 0x12
    1c76:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c78:	89 89       	ldd	r24, Y+17	; 0x11
    1c7a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_init+0xbc>
    1c80:	9a 8b       	std	Y+18, r25	; 0x12
    1c82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c84:	8b 89       	ldd	r24, Y+19	; 0x13
    1c86:	9c 89       	ldd	r25, Y+20	; 0x14
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	9c 8b       	std	Y+20, r25	; 0x14
    1c8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c90:	9c 89       	ldd	r25, Y+20	; 0x14
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	69 f7       	brne	.-38     	; 0x1c70 <LCD_init+0xb0>
    1c96:	14 c0       	rjmp	.+40     	; 0x1cc0 <LCD_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9c 8b       	std	Y+20, r25	; 0x14
    1caa:	8b 8b       	std	Y+19, r24	; 0x13
    1cac:	8b 89       	ldd	r24, Y+19	; 0x13
    1cae:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb0:	98 8b       	std	Y+16, r25	; 0x10
    1cb2:	8f 87       	std	Y+15, r24	; 0x0f
    1cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb6:	98 89       	ldd	r25, Y+16	; 0x10
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_init+0xf8>
    1cbc:	98 8b       	std	Y+16, r25	; 0x10
    1cbe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

	LCD_cmd(0x33);
    1cc0:	83 e3       	ldi	r24, 0x33	; 51
    1cc2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_cmd>
	LCD_cmd(0x32); 	/* Send for 4 bit initialization of LCD  */
    1cc6:	82 e3       	ldi	r24, 0x32	; 50
    1cc8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_cmd>
	LCD_cmd(0x28); 	// Select 4 Bit Mode, 5*7 dots
    1ccc:	88 e2       	ldi	r24, 0x28	; 40
    1cce:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_cmd>
	LCD_cmd(0x0C);	// Display On, Cursor Blinking
    1cd2:	8c e0       	ldi	r24, 0x0C	; 12
    1cd4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_cmd>
	LCD_cmd(0x06);	// Entry Mode Increment cursor to right
    1cd8:	86 e0       	ldi	r24, 0x06	; 6
    1cda:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_cmd>
	LCD_cmd(0x01);	// Clear Display
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_cmd>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a0 e0       	ldi	r26, 0x00	; 0
    1cea:	b0 e4       	ldi	r27, 0x40	; 64
    1cec:	8b 87       	std	Y+11, r24	; 0x0b
    1cee:	9c 87       	std	Y+12, r25	; 0x0c
    1cf0:	ad 87       	std	Y+13, r26	; 0x0d
    1cf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a e7       	ldi	r20, 0x7A	; 122
    1d02:	55 e4       	ldi	r21, 0x45	; 69
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	8f 83       	std	Y+7, r24	; 0x07
    1d0e:	98 87       	std	Y+8, r25	; 0x08
    1d10:	a9 87       	std	Y+9, r26	; 0x09
    1d12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <LCD_init+0x176>
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	3f c0       	rjmp	.+126    	; 0x1db4 <LCD_init+0x1f4>
	else if (__tmp > 65535)
    1d36:	6f 81       	ldd	r22, Y+7	; 0x07
    1d38:	78 85       	ldd	r23, Y+8	; 0x08
    1d3a:	89 85       	ldd	r24, Y+9	; 0x09
    1d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	3f ef       	ldi	r19, 0xFF	; 255
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	57 e4       	ldi	r21, 0x47	; 71
    1d46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	4c f5       	brge	.+82     	; 0x1da0 <LCD_init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e2       	ldi	r20, 0x20	; 32
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	8d 83       	std	Y+5, r24	; 0x05
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <LCD_init+0x1d6>
    1d78:	80 e9       	ldi	r24, 0x90	; 144
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	9c 83       	std	Y+4, r25	; 0x04
    1d7e:	8b 83       	std	Y+3, r24	; 0x03
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_init+0x1c4>
    1d88:	9c 83       	std	Y+4, r25	; 0x04
    1d8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	69 f7       	brne	.-38     	; 0x1d78 <LCD_init+0x1b8>
    1d9e:	14 c0       	rjmp	.+40     	; 0x1dc8 <LCD_init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	9a 83       	std	Y+2, r25	; 0x02
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_init+0x200>
    1dc4:	9a 83       	std	Y+2, r25	; 0x02
    1dc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1dc8:	6c 96       	adiw	r28, 0x1c	; 28
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <LCD_cmd>:

void LCD_cmd(uint8 cmd) {
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	c1 56       	subi	r28, 0x61	; 97
    1de8:	d0 40       	sbci	r29, 0x00	; 0
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	fe 01       	movw	r30, r28
    1df6:	ef 59       	subi	r30, 0x9F	; 159
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 83       	st	Z, r24
	Dio_write_PORT(Rs, LOW);
    1dfc:	89 e0       	ldi	r24, 0x09	; 9
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(Rw, LOW);
    1e04:	8a e0       	ldi	r24, 0x0A	; 10
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>

	Dio_write_PORT(D7, GET_BIT(cmd, 7));
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ef 59       	subi	r30, 0x9F	; 159
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	98 2f       	mov	r25, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	99 27       	eor	r25, r25
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	87 e0       	ldi	r24, 0x07	; 7
    1e1e:	69 2f       	mov	r22, r25
    1e20:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(cmd, 6));
    1e24:	fe 01       	movw	r30, r28
    1e26:	ef 59       	subi	r30, 0x9F	; 159
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	80 81       	ld	r24, Z
    1e2c:	82 95       	swap	r24
    1e2e:	86 95       	lsr	r24
    1e30:	86 95       	lsr	r24
    1e32:	83 70       	andi	r24, 0x03	; 3
    1e34:	98 2f       	mov	r25, r24
    1e36:	91 70       	andi	r25, 0x01	; 1
    1e38:	86 e0       	ldi	r24, 0x06	; 6
    1e3a:	69 2f       	mov	r22, r25
    1e3c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(cmd, 5));
    1e40:	fe 01       	movw	r30, r28
    1e42:	ef 59       	subi	r30, 0x9F	; 159
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	80 81       	ld	r24, Z
    1e48:	82 95       	swap	r24
    1e4a:	86 95       	lsr	r24
    1e4c:	87 70       	andi	r24, 0x07	; 7
    1e4e:	98 2f       	mov	r25, r24
    1e50:	91 70       	andi	r25, 0x01	; 1
    1e52:	85 e0       	ldi	r24, 0x05	; 5
    1e54:	69 2f       	mov	r22, r25
    1e56:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D4, GET_BIT(cmd, 4));
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	ef 59       	subi	r30, 0x9F	; 159
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	82 95       	swap	r24
    1e64:	8f 70       	andi	r24, 0x0F	; 15
    1e66:	98 2f       	mov	r25, r24
    1e68:	91 70       	andi	r25, 0x01	; 1
    1e6a:	84 e0       	ldi	r24, 0x04	; 4
    1e6c:	69 2f       	mov	r22, r25
    1e6e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(E, HIGH);
    1e72:	8b e0       	ldi	r24, 0x0B	; 11
    1e74:	61 e0       	ldi	r22, 0x01	; 1
    1e76:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e3 5a       	subi	r30, 0xA3	; 163
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 e2       	ldi	r26, 0x20	; 32
    1e86:	b1 e4       	ldi	r27, 0x41	; 65
    1e88:	80 83       	st	Z, r24
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	a2 83       	std	Z+2, r26	; 0x02
    1e8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e90:	8e 01       	movw	r16, r28
    1e92:	07 5a       	subi	r16, 0xA7	; 167
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	fe 01       	movw	r30, r28
    1e98:	e3 5a       	subi	r30, 0xA3	; 163
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	2b ea       	ldi	r18, 0xAB	; 171
    1ea6:	3a ea       	ldi	r19, 0xAA	; 170
    1ea8:	4a ea       	ldi	r20, 0xAA	; 170
    1eaa:	50 e4       	ldi	r21, 0x40	; 64
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	80 83       	st	Z, r24
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	a2 83       	std	Z+2, r26	; 0x02
    1ebc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e7 5a       	subi	r30, 0xA7	; 167
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	34 f4       	brge	.+12     	; 0x1ee8 <LCD_cmd+0x10e>
		__ticks = 1;
    1edc:	fe 01       	movw	r30, r28
    1ede:	e8 5a       	subi	r30, 0xA8	; 168
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	80 83       	st	Z, r24
    1ee6:	e0 c0       	rjmp	.+448    	; 0x20a8 <LCD_cmd+0x2ce>
	else if (__tmp > 255)
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e7 5a       	subi	r30, 0xA7	; 167
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	60 81       	ld	r22, Z
    1ef0:	71 81       	ldd	r23, Z+1	; 0x01
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	53 e4       	ldi	r21, 0x43	; 67
    1efe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f02:	18 16       	cp	r1, r24
    1f04:	0c f0       	brlt	.+2      	; 0x1f08 <LCD_cmd+0x12e>
    1f06:	c0 c0       	rjmp	.+384    	; 0x2088 <LCD_cmd+0x2ae>
	{
		_delay_ms(__us / 1000.0);
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e3 5a       	subi	r30, 0xA3	; 163
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a e7       	ldi	r20, 0x7A	; 122
    1f1c:	54 e4       	ldi	r21, 0x44	; 68
    1f1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	fe 01       	movw	r30, r28
    1f28:	ec 5a       	subi	r30, 0xAC	; 172
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 83       	st	Z, r24
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	a2 83       	std	Z+2, r26	; 0x02
    1f32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f34:	8e 01       	movw	r16, r28
    1f36:	00 5b       	subi	r16, 0xB0	; 176
    1f38:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ec 5a       	subi	r30, 0xAC	; 172
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a e7       	ldi	r20, 0x7A	; 122
    1f4e:	55 e4       	ldi	r21, 0x45	; 69
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	f8 01       	movw	r30, r16
    1f5a:	80 83       	st	Z, r24
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	a2 83       	std	Z+2, r26	; 0x02
    1f60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f62:	fe 01       	movw	r30, r28
    1f64:	e0 5b       	subi	r30, 0xB0	; 176
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	60 81       	ld	r22, Z
    1f6a:	71 81       	ldd	r23, Z+1	; 0x01
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	93 81       	ldd	r25, Z+3	; 0x03
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e8       	ldi	r20, 0x80	; 128
    1f76:	5f e3       	ldi	r21, 0x3F	; 63
    1f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	44 f4       	brge	.+16     	; 0x1f90 <LCD_cmd+0x1b6>
		__ticks = 1;
    1f80:	fe 01       	movw	r30, r28
    1f82:	e2 5b       	subi	r30, 0xB2	; 178
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	80 83       	st	Z, r24
    1f8e:	64 c0       	rjmp	.+200    	; 0x2058 <LCD_cmd+0x27e>
	else if (__tmp > 65535)
    1f90:	fe 01       	movw	r30, r28
    1f92:	e0 5b       	subi	r30, 0xB0	; 176
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	60 81       	ld	r22, Z
    1f98:	71 81       	ldd	r23, Z+1	; 0x01
    1f9a:	82 81       	ldd	r24, Z+2	; 0x02
    1f9c:	93 81       	ldd	r25, Z+3	; 0x03
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	57 e4       	ldi	r21, 0x47	; 71
    1fa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	0c f0       	brlt	.+2      	; 0x1fb0 <LCD_cmd+0x1d6>
    1fae:	43 c0       	rjmp	.+134    	; 0x2036 <LCD_cmd+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ec 5a       	subi	r30, 0xAC	; 172
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	8e 01       	movw	r16, r28
    1fd0:	02 5b       	subi	r16, 0xB2	; 178
    1fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	91 83       	std	Z+1, r25	; 0x01
    1fe4:	80 83       	st	Z, r24
    1fe6:	1f c0       	rjmp	.+62     	; 0x2026 <LCD_cmd+0x24c>
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e4 5b       	subi	r30, 0xB4	; 180
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	80 e9       	ldi	r24, 0x90	; 144
    1ff0:	91 e0       	ldi	r25, 0x01	; 1
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e4 5b       	subi	r30, 0xB4	; 180
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_cmd+0x226>
    2004:	fe 01       	movw	r30, r28
    2006:	e4 5b       	subi	r30, 0xB4	; 180
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200e:	de 01       	movw	r26, r28
    2010:	a2 5b       	subi	r26, 0xB2	; 178
    2012:	bf 4f       	sbci	r27, 0xFF	; 255
    2014:	fe 01       	movw	r30, r28
    2016:	e2 5b       	subi	r30, 0xB2	; 178
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	91 81       	ldd	r25, Z+1	; 0x01
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	11 96       	adiw	r26, 0x01	; 1
    2022:	9c 93       	st	X, r25
    2024:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2026:	fe 01       	movw	r30, r28
    2028:	e2 5b       	subi	r30, 0xB2	; 178
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	d1 f6       	brne	.-76     	; 0x1fe8 <LCD_cmd+0x20e>
    2034:	4b c0       	rjmp	.+150    	; 0x20cc <LCD_cmd+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2036:	8e 01       	movw	r16, r28
    2038:	02 5b       	subi	r16, 0xB2	; 178
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	fe 01       	movw	r30, r28
    203e:	e0 5b       	subi	r30, 0xB0	; 176
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	f8 01       	movw	r30, r16
    2054:	91 83       	std	Z+1, r25	; 0x01
    2056:	80 83       	st	Z, r24
    2058:	de 01       	movw	r26, r28
    205a:	a6 5b       	subi	r26, 0xB6	; 182
    205c:	bf 4f       	sbci	r27, 0xFF	; 255
    205e:	fe 01       	movw	r30, r28
    2060:	e2 5b       	subi	r30, 0xB2	; 178
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	91 81       	ldd	r25, Z+1	; 0x01
    2068:	11 96       	adiw	r26, 0x01	; 1
    206a:	9c 93       	st	X, r25
    206c:	8e 93       	st	-X, r24
    206e:	fe 01       	movw	r30, r28
    2070:	e6 5b       	subi	r30, 0xB6	; 182
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	91 81       	ldd	r25, Z+1	; 0x01
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <LCD_cmd+0x29e>
    207c:	fe 01       	movw	r30, r28
    207e:	e6 5b       	subi	r30, 0xB6	; 182
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
    2086:	22 c0       	rjmp	.+68     	; 0x20cc <LCD_cmd+0x2f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2088:	8e 01       	movw	r16, r28
    208a:	08 5a       	subi	r16, 0xA8	; 168
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	fe 01       	movw	r30, r28
    2090:	e7 5a       	subi	r30, 0xA7	; 167
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	60 81       	ld	r22, Z
    2096:	71 81       	ldd	r23, Z+1	; 0x01
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	93 81       	ldd	r25, Z+3	; 0x03
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	f8 01       	movw	r30, r16
    20a6:	80 83       	st	Z, r24
    20a8:	de 01       	movw	r26, r28
    20aa:	a7 5b       	subi	r26, 0xB7	; 183
    20ac:	bf 4f       	sbci	r27, 0xFF	; 255
    20ae:	fe 01       	movw	r30, r28
    20b0:	e8 5a       	subi	r30, 0xA8	; 168
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 81       	ld	r24, Z
    20b6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20b8:	fe 01       	movw	r30, r28
    20ba:	e7 5b       	subi	r30, 0xB7	; 183
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	8a 95       	dec	r24
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <LCD_cmd+0x2e6>
    20c4:	fe 01       	movw	r30, r28
    20c6:	e7 5b       	subi	r30, 0xB7	; 183
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	80 83       	st	Z, r24
	_delay_us(10);
	Dio_write_PORT(E, LOW);
    20cc:	8b e0       	ldi	r24, 0x0B	; 11
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    20d4:	fe 01       	movw	r30, r28
    20d6:	eb 5b       	subi	r30, 0xBB	; 187
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a8 e4       	ldi	r26, 0x48	; 72
    20e0:	b3 e4       	ldi	r27, 0x43	; 67
    20e2:	80 83       	st	Z, r24
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	a2 83       	std	Z+2, r26	; 0x02
    20e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ea:	8e 01       	movw	r16, r28
    20ec:	0f 5b       	subi	r16, 0xBF	; 191
    20ee:	1f 4f       	sbci	r17, 0xFF	; 255
    20f0:	fe 01       	movw	r30, r28
    20f2:	eb 5b       	subi	r30, 0xBB	; 187
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	82 81       	ldd	r24, Z+2	; 0x02
    20fc:	93 81       	ldd	r25, Z+3	; 0x03
    20fe:	2b ea       	ldi	r18, 0xAB	; 171
    2100:	3a ea       	ldi	r19, 0xAA	; 170
    2102:	4a ea       	ldi	r20, 0xAA	; 170
    2104:	50 e4       	ldi	r21, 0x40	; 64
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	f8 01       	movw	r30, r16
    2110:	80 83       	st	Z, r24
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	a2 83       	std	Z+2, r26	; 0x02
    2116:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2118:	fe 01       	movw	r30, r28
    211a:	ef 5b       	subi	r30, 0xBF	; 191
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	34 f4       	brge	.+12     	; 0x2142 <LCD_cmd+0x368>
		__ticks = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	fe 01       	movw	r30, r28
    213a:	e0 5c       	subi	r30, 0xC0	; 192
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 83       	st	Z, r24
    2140:	9d c0       	rjmp	.+314    	; 0x227c <LCD_cmd+0x4a2>
	else if (__tmp > 255)
    2142:	fe 01       	movw	r30, r28
    2144:	ef 5b       	subi	r30, 0xBF	; 191
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	60 81       	ld	r22, Z
    214a:	71 81       	ldd	r23, Z+1	; 0x01
    214c:	82 81       	ldd	r24, Z+2	; 0x02
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4f e7       	ldi	r20, 0x7F	; 127
    2156:	53 e4       	ldi	r21, 0x43	; 67
    2158:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215c:	18 16       	cp	r1, r24
    215e:	0c f0       	brlt	.+2      	; 0x2162 <LCD_cmd+0x388>
    2160:	7e c0       	rjmp	.+252    	; 0x225e <LCD_cmd+0x484>
	{
		_delay_ms(__us / 1000.0);
    2162:	fe 01       	movw	r30, r28
    2164:	eb 5b       	subi	r30, 0xBB	; 187
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	82 81       	ldd	r24, Z+2	; 0x02
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	4a e7       	ldi	r20, 0x7A	; 122
    2176:	54 e4       	ldi	r21, 0x44	; 68
    2178:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	8c af       	std	Y+60, r24	; 0x3c
    2182:	9d af       	std	Y+61, r25	; 0x3d
    2184:	ae af       	std	Y+62, r26	; 0x3e
    2186:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2188:	6c ad       	ldd	r22, Y+60	; 0x3c
    218a:	7d ad       	ldd	r23, Y+61	; 0x3d
    218c:	8e ad       	ldd	r24, Y+62	; 0x3e
    218e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	4a e7       	ldi	r20, 0x7A	; 122
    2196:	55 e4       	ldi	r21, 0x45	; 69
    2198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	88 af       	std	Y+56, r24	; 0x38
    21a2:	99 af       	std	Y+57, r25	; 0x39
    21a4:	aa af       	std	Y+58, r26	; 0x3a
    21a6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    21a8:	68 ad       	ldd	r22, Y+56	; 0x38
    21aa:	79 ad       	ldd	r23, Y+57	; 0x39
    21ac:	8a ad       	ldd	r24, Y+58	; 0x3a
    21ae:	9b ad       	ldd	r25, Y+59	; 0x3b
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e8       	ldi	r20, 0x80	; 128
    21b6:	5f e3       	ldi	r21, 0x3F	; 63
    21b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21bc:	88 23       	and	r24, r24
    21be:	2c f4       	brge	.+10     	; 0x21ca <LCD_cmd+0x3f0>
		__ticks = 1;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	9f ab       	std	Y+55, r25	; 0x37
    21c6:	8e ab       	std	Y+54, r24	; 0x36
    21c8:	3f c0       	rjmp	.+126    	; 0x2248 <LCD_cmd+0x46e>
	else if (__tmp > 65535)
    21ca:	68 ad       	ldd	r22, Y+56	; 0x38
    21cc:	79 ad       	ldd	r23, Y+57	; 0x39
    21ce:	8a ad       	ldd	r24, Y+58	; 0x3a
    21d0:	9b ad       	ldd	r25, Y+59	; 0x3b
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	3f ef       	ldi	r19, 0xFF	; 255
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	57 e4       	ldi	r21, 0x47	; 71
    21da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21de:	18 16       	cp	r1, r24
    21e0:	4c f5       	brge	.+82     	; 0x2234 <LCD_cmd+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    21e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    21e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    21e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e2       	ldi	r20, 0x20	; 32
    21f0:	51 e4       	ldi	r21, 0x41	; 65
    21f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	9f ab       	std	Y+55, r25	; 0x37
    2208:	8e ab       	std	Y+54, r24	; 0x36
    220a:	0f c0       	rjmp	.+30     	; 0x222a <LCD_cmd+0x450>
    220c:	80 e9       	ldi	r24, 0x90	; 144
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	9d ab       	std	Y+53, r25	; 0x35
    2212:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2214:	8c a9       	ldd	r24, Y+52	; 0x34
    2216:	9d a9       	ldd	r25, Y+53	; 0x35
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_cmd+0x43e>
    221c:	9d ab       	std	Y+53, r25	; 0x35
    221e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2220:	8e a9       	ldd	r24, Y+54	; 0x36
    2222:	9f a9       	ldd	r25, Y+55	; 0x37
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	9f ab       	std	Y+55, r25	; 0x37
    2228:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222a:	8e a9       	ldd	r24, Y+54	; 0x36
    222c:	9f a9       	ldd	r25, Y+55	; 0x37
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	69 f7       	brne	.-38     	; 0x220c <LCD_cmd+0x432>
    2232:	2d c0       	rjmp	.+90     	; 0x228e <LCD_cmd+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2234:	68 ad       	ldd	r22, Y+56	; 0x38
    2236:	79 ad       	ldd	r23, Y+57	; 0x39
    2238:	8a ad       	ldd	r24, Y+58	; 0x3a
    223a:	9b ad       	ldd	r25, Y+59	; 0x3b
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	9f ab       	std	Y+55, r25	; 0x37
    2246:	8e ab       	std	Y+54, r24	; 0x36
    2248:	8e a9       	ldd	r24, Y+54	; 0x36
    224a:	9f a9       	ldd	r25, Y+55	; 0x37
    224c:	9b ab       	std	Y+51, r25	; 0x33
    224e:	8a ab       	std	Y+50, r24	; 0x32
    2250:	8a a9       	ldd	r24, Y+50	; 0x32
    2252:	9b a9       	ldd	r25, Y+51	; 0x33
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <LCD_cmd+0x47a>
    2258:	9b ab       	std	Y+51, r25	; 0x33
    225a:	8a ab       	std	Y+50, r24	; 0x32
    225c:	18 c0       	rjmp	.+48     	; 0x228e <LCD_cmd+0x4b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    225e:	fe 01       	movw	r30, r28
    2260:	ef 5b       	subi	r30, 0xBF	; 191
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	60 81       	ld	r22, Z
    2266:	71 81       	ldd	r23, Z+1	; 0x01
    2268:	82 81       	ldd	r24, Z+2	; 0x02
    226a:	93 81       	ldd	r25, Z+3	; 0x03
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	fe 01       	movw	r30, r28
    2276:	e0 5c       	subi	r30, 0xC0	; 192
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 83       	st	Z, r24
    227c:	fe 01       	movw	r30, r28
    227e:	e0 5c       	subi	r30, 0xC0	; 192
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2286:	89 a9       	ldd	r24, Y+49	; 0x31
    2288:	8a 95       	dec	r24
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_cmd+0x4ae>
    228c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	Dio_write_PORT(D7, GET_BIT(cmd, 3));
    228e:	fe 01       	movw	r30, r28
    2290:	ef 59       	subi	r30, 0x9F	; 159
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	80 81       	ld	r24, Z
    2296:	86 95       	lsr	r24
    2298:	86 95       	lsr	r24
    229a:	86 95       	lsr	r24
    229c:	98 2f       	mov	r25, r24
    229e:	91 70       	andi	r25, 0x01	; 1
    22a0:	87 e0       	ldi	r24, 0x07	; 7
    22a2:	69 2f       	mov	r22, r25
    22a4:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(cmd, 2));
    22a8:	fe 01       	movw	r30, r28
    22aa:	ef 59       	subi	r30, 0x9F	; 159
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 81       	ld	r24, Z
    22b0:	86 95       	lsr	r24
    22b2:	86 95       	lsr	r24
    22b4:	98 2f       	mov	r25, r24
    22b6:	91 70       	andi	r25, 0x01	; 1
    22b8:	86 e0       	ldi	r24, 0x06	; 6
    22ba:	69 2f       	mov	r22, r25
    22bc:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(cmd, 1));
    22c0:	fe 01       	movw	r30, r28
    22c2:	ef 59       	subi	r30, 0x9F	; 159
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	80 81       	ld	r24, Z
    22c8:	86 95       	lsr	r24
    22ca:	98 2f       	mov	r25, r24
    22cc:	91 70       	andi	r25, 0x01	; 1
    22ce:	85 e0       	ldi	r24, 0x05	; 5
    22d0:	69 2f       	mov	r22, r25
    22d2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D4, GET_BIT(cmd, 0));
    22d6:	fe 01       	movw	r30, r28
    22d8:	ef 59       	subi	r30, 0x9F	; 159
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	98 2f       	mov	r25, r24
    22e0:	91 70       	andi	r25, 0x01	; 1
    22e2:	84 e0       	ldi	r24, 0x04	; 4
    22e4:	69 2f       	mov	r22, r25
    22e6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(E, HIGH);
    22ea:	8b e0       	ldi	r24, 0x0B	; 11
    22ec:	61 e0       	ldi	r22, 0x01	; 1
    22ee:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e2       	ldi	r26, 0x20	; 32
    22f8:	b1 e4       	ldi	r27, 0x41	; 65
    22fa:	8d a7       	std	Y+45, r24	; 0x2d
    22fc:	9e a7       	std	Y+46, r25	; 0x2e
    22fe:	af a7       	std	Y+47, r26	; 0x2f
    2300:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2302:	6d a5       	ldd	r22, Y+45	; 0x2d
    2304:	7e a5       	ldd	r23, Y+46	; 0x2e
    2306:	8f a5       	ldd	r24, Y+47	; 0x2f
    2308:	98 a9       	ldd	r25, Y+48	; 0x30
    230a:	2b ea       	ldi	r18, 0xAB	; 171
    230c:	3a ea       	ldi	r19, 0xAA	; 170
    230e:	4a ea       	ldi	r20, 0xAA	; 170
    2310:	50 e4       	ldi	r21, 0x40	; 64
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	89 a7       	std	Y+41, r24	; 0x29
    231c:	9a a7       	std	Y+42, r25	; 0x2a
    231e:	ab a7       	std	Y+43, r26	; 0x2b
    2320:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2322:	69 a5       	ldd	r22, Y+41	; 0x29
    2324:	7a a5       	ldd	r23, Y+42	; 0x2a
    2326:	8b a5       	ldd	r24, Y+43	; 0x2b
    2328:	9c a5       	ldd	r25, Y+44	; 0x2c
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e8       	ldi	r20, 0x80	; 128
    2330:	5f e3       	ldi	r21, 0x3F	; 63
    2332:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2336:	88 23       	and	r24, r24
    2338:	1c f4       	brge	.+6      	; 0x2340 <LCD_cmd+0x566>
		__ticks = 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	88 a7       	std	Y+40, r24	; 0x28
    233e:	91 c0       	rjmp	.+290    	; 0x2462 <LCD_cmd+0x688>
	else if (__tmp > 255)
    2340:	69 a5       	ldd	r22, Y+41	; 0x29
    2342:	7a a5       	ldd	r23, Y+42	; 0x2a
    2344:	8b a5       	ldd	r24, Y+43	; 0x2b
    2346:	9c a5       	ldd	r25, Y+44	; 0x2c
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	4f e7       	ldi	r20, 0x7F	; 127
    234e:	53 e4       	ldi	r21, 0x43	; 67
    2350:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2354:	18 16       	cp	r1, r24
    2356:	0c f0       	brlt	.+2      	; 0x235a <LCD_cmd+0x580>
    2358:	7b c0       	rjmp	.+246    	; 0x2450 <LCD_cmd+0x676>
	{
		_delay_ms(__us / 1000.0);
    235a:	6d a5       	ldd	r22, Y+45	; 0x2d
    235c:	7e a5       	ldd	r23, Y+46	; 0x2e
    235e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2360:	98 a9       	ldd	r25, Y+48	; 0x30
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a e7       	ldi	r20, 0x7A	; 122
    2368:	54 e4       	ldi	r21, 0x44	; 68
    236a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	8c a3       	std	Y+36, r24	; 0x24
    2374:	9d a3       	std	Y+37, r25	; 0x25
    2376:	ae a3       	std	Y+38, r26	; 0x26
    2378:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237a:	6c a1       	ldd	r22, Y+36	; 0x24
    237c:	7d a1       	ldd	r23, Y+37	; 0x25
    237e:	8e a1       	ldd	r24, Y+38	; 0x26
    2380:	9f a1       	ldd	r25, Y+39	; 0x27
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	4a e7       	ldi	r20, 0x7A	; 122
    2388:	55 e4       	ldi	r21, 0x45	; 69
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	88 a3       	std	Y+32, r24	; 0x20
    2394:	99 a3       	std	Y+33, r25	; 0x21
    2396:	aa a3       	std	Y+34, r26	; 0x22
    2398:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    239a:	68 a1       	ldd	r22, Y+32	; 0x20
    239c:	79 a1       	ldd	r23, Y+33	; 0x21
    239e:	8a a1       	ldd	r24, Y+34	; 0x22
    23a0:	9b a1       	ldd	r25, Y+35	; 0x23
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e8       	ldi	r20, 0x80	; 128
    23a8:	5f e3       	ldi	r21, 0x3F	; 63
    23aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ae:	88 23       	and	r24, r24
    23b0:	2c f4       	brge	.+10     	; 0x23bc <LCD_cmd+0x5e2>
		__ticks = 1;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9f 8f       	std	Y+31, r25	; 0x1f
    23b8:	8e 8f       	std	Y+30, r24	; 0x1e
    23ba:	3f c0       	rjmp	.+126    	; 0x243a <LCD_cmd+0x660>
	else if (__tmp > 65535)
    23bc:	68 a1       	ldd	r22, Y+32	; 0x20
    23be:	79 a1       	ldd	r23, Y+33	; 0x21
    23c0:	8a a1       	ldd	r24, Y+34	; 0x22
    23c2:	9b a1       	ldd	r25, Y+35	; 0x23
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	3f ef       	ldi	r19, 0xFF	; 255
    23c8:	4f e7       	ldi	r20, 0x7F	; 127
    23ca:	57 e4       	ldi	r21, 0x47	; 71
    23cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23d0:	18 16       	cp	r1, r24
    23d2:	4c f5       	brge	.+82     	; 0x2426 <LCD_cmd+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d4:	6c a1       	ldd	r22, Y+36	; 0x24
    23d6:	7d a1       	ldd	r23, Y+37	; 0x25
    23d8:	8e a1       	ldd	r24, Y+38	; 0x26
    23da:	9f a1       	ldd	r25, Y+39	; 0x27
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e2       	ldi	r20, 0x20	; 32
    23e2:	51 e4       	ldi	r21, 0x41	; 65
    23e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9f 8f       	std	Y+31, r25	; 0x1f
    23fa:	8e 8f       	std	Y+30, r24	; 0x1e
    23fc:	0f c0       	rjmp	.+30     	; 0x241c <LCD_cmd+0x642>
    23fe:	80 e9       	ldi	r24, 0x90	; 144
    2400:	91 e0       	ldi	r25, 0x01	; 1
    2402:	9d 8f       	std	Y+29, r25	; 0x1d
    2404:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2406:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2408:	9d 8d       	ldd	r25, Y+29	; 0x1d
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <LCD_cmd+0x630>
    240e:	9d 8f       	std	Y+29, r25	; 0x1d
    2410:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2412:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2414:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	9f 8f       	std	Y+31, r25	; 0x1f
    241a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    241e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	69 f7       	brne	.-38     	; 0x23fe <LCD_cmd+0x624>
    2424:	24 c0       	rjmp	.+72     	; 0x246e <LCD_cmd+0x694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	68 a1       	ldd	r22, Y+32	; 0x20
    2428:	79 a1       	ldd	r23, Y+33	; 0x21
    242a:	8a a1       	ldd	r24, Y+34	; 0x22
    242c:	9b a1       	ldd	r25, Y+35	; 0x23
    242e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9f 8f       	std	Y+31, r25	; 0x1f
    2438:	8e 8f       	std	Y+30, r24	; 0x1e
    243a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    243c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    243e:	9b 8f       	std	Y+27, r25	; 0x1b
    2440:	8a 8f       	std	Y+26, r24	; 0x1a
    2442:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2444:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_cmd+0x66c>
    244a:	9b 8f       	std	Y+27, r25	; 0x1b
    244c:	8a 8f       	std	Y+26, r24	; 0x1a
    244e:	0f c0       	rjmp	.+30     	; 0x246e <LCD_cmd+0x694>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2450:	69 a5       	ldd	r22, Y+41	; 0x29
    2452:	7a a5       	ldd	r23, Y+42	; 0x2a
    2454:	8b a5       	ldd	r24, Y+43	; 0x2b
    2456:	9c a5       	ldd	r25, Y+44	; 0x2c
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	88 a7       	std	Y+40, r24	; 0x28
    2462:	88 a5       	ldd	r24, Y+40	; 0x28
    2464:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2466:	89 8d       	ldd	r24, Y+25	; 0x19
    2468:	8a 95       	dec	r24
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_cmd+0x68e>
    246c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write_PORT(E, LOW);
    246e:	8b e0       	ldi	r24, 0x0B	; 11
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	a8 e4       	ldi	r26, 0x48	; 72
    247c:	b3 e4       	ldi	r27, 0x43	; 67
    247e:	8d 8b       	std	Y+21, r24	; 0x15
    2480:	9e 8b       	std	Y+22, r25	; 0x16
    2482:	af 8b       	std	Y+23, r26	; 0x17
    2484:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2486:	6d 89       	ldd	r22, Y+21	; 0x15
    2488:	7e 89       	ldd	r23, Y+22	; 0x16
    248a:	8f 89       	ldd	r24, Y+23	; 0x17
    248c:	98 8d       	ldd	r25, Y+24	; 0x18
    248e:	2b ea       	ldi	r18, 0xAB	; 171
    2490:	3a ea       	ldi	r19, 0xAA	; 170
    2492:	4a ea       	ldi	r20, 0xAA	; 170
    2494:	50 e4       	ldi	r21, 0x40	; 64
    2496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	89 8b       	std	Y+17, r24	; 0x11
    24a0:	9a 8b       	std	Y+18, r25	; 0x12
    24a2:	ab 8b       	std	Y+19, r26	; 0x13
    24a4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24a6:	69 89       	ldd	r22, Y+17	; 0x11
    24a8:	7a 89       	ldd	r23, Y+18	; 0x12
    24aa:	8b 89       	ldd	r24, Y+19	; 0x13
    24ac:	9c 89       	ldd	r25, Y+20	; 0x14
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e8       	ldi	r20, 0x80	; 128
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ba:	88 23       	and	r24, r24
    24bc:	1c f4       	brge	.+6      	; 0x24c4 <LCD_cmd+0x6ea>
		__ticks = 1;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	88 8b       	std	Y+16, r24	; 0x10
    24c2:	91 c0       	rjmp	.+290    	; 0x25e6 <LCD_cmd+0x80c>
	else if (__tmp > 255)
    24c4:	69 89       	ldd	r22, Y+17	; 0x11
    24c6:	7a 89       	ldd	r23, Y+18	; 0x12
    24c8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ca:	9c 89       	ldd	r25, Y+20	; 0x14
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	4f e7       	ldi	r20, 0x7F	; 127
    24d2:	53 e4       	ldi	r21, 0x43	; 67
    24d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24d8:	18 16       	cp	r1, r24
    24da:	0c f0       	brlt	.+2      	; 0x24de <LCD_cmd+0x704>
    24dc:	7b c0       	rjmp	.+246    	; 0x25d4 <LCD_cmd+0x7fa>
	{
		_delay_ms(__us / 1000.0);
    24de:	6d 89       	ldd	r22, Y+21	; 0x15
    24e0:	7e 89       	ldd	r23, Y+22	; 0x16
    24e2:	8f 89       	ldd	r24, Y+23	; 0x17
    24e4:	98 8d       	ldd	r25, Y+24	; 0x18
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	4a e7       	ldi	r20, 0x7A	; 122
    24ec:	54 e4       	ldi	r21, 0x44	; 68
    24ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	8c 87       	std	Y+12, r24	; 0x0c
    24f8:	9d 87       	std	Y+13, r25	; 0x0d
    24fa:	ae 87       	std	Y+14, r26	; 0x0e
    24fc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2500:	7d 85       	ldd	r23, Y+13	; 0x0d
    2502:	8e 85       	ldd	r24, Y+14	; 0x0e
    2504:	9f 85       	ldd	r25, Y+15	; 0x0f
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	4a e7       	ldi	r20, 0x7A	; 122
    250c:	55 e4       	ldi	r21, 0x45	; 69
    250e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	88 87       	std	Y+8, r24	; 0x08
    2518:	99 87       	std	Y+9, r25	; 0x09
    251a:	aa 87       	std	Y+10, r26	; 0x0a
    251c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    251e:	68 85       	ldd	r22, Y+8	; 0x08
    2520:	79 85       	ldd	r23, Y+9	; 0x09
    2522:	8a 85       	ldd	r24, Y+10	; 0x0a
    2524:	9b 85       	ldd	r25, Y+11	; 0x0b
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e8       	ldi	r20, 0x80	; 128
    252c:	5f e3       	ldi	r21, 0x3F	; 63
    252e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2532:	88 23       	and	r24, r24
    2534:	2c f4       	brge	.+10     	; 0x2540 <LCD_cmd+0x766>
		__ticks = 1;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	9f 83       	std	Y+7, r25	; 0x07
    253c:	8e 83       	std	Y+6, r24	; 0x06
    253e:	3f c0       	rjmp	.+126    	; 0x25be <LCD_cmd+0x7e4>
	else if (__tmp > 65535)
    2540:	68 85       	ldd	r22, Y+8	; 0x08
    2542:	79 85       	ldd	r23, Y+9	; 0x09
    2544:	8a 85       	ldd	r24, Y+10	; 0x0a
    2546:	9b 85       	ldd	r25, Y+11	; 0x0b
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	3f ef       	ldi	r19, 0xFF	; 255
    254c:	4f e7       	ldi	r20, 0x7F	; 127
    254e:	57 e4       	ldi	r21, 0x47	; 71
    2550:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2554:	18 16       	cp	r1, r24
    2556:	4c f5       	brge	.+82     	; 0x25aa <LCD_cmd+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2558:	6c 85       	ldd	r22, Y+12	; 0x0c
    255a:	7d 85       	ldd	r23, Y+13	; 0x0d
    255c:	8e 85       	ldd	r24, Y+14	; 0x0e
    255e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e2       	ldi	r20, 0x20	; 32
    2566:	51 e4       	ldi	r21, 0x41	; 65
    2568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	bc 01       	movw	r22, r24
    2572:	cd 01       	movw	r24, r26
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9f 83       	std	Y+7, r25	; 0x07
    257e:	8e 83       	std	Y+6, r24	; 0x06
    2580:	0f c0       	rjmp	.+30     	; 0x25a0 <LCD_cmd+0x7c6>
    2582:	80 e9       	ldi	r24, 0x90	; 144
    2584:	91 e0       	ldi	r25, 0x01	; 1
    2586:	9d 83       	std	Y+5, r25	; 0x05
    2588:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    258a:	8c 81       	ldd	r24, Y+4	; 0x04
    258c:	9d 81       	ldd	r25, Y+5	; 0x05
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	f1 f7       	brne	.-4      	; 0x258e <LCD_cmd+0x7b4>
    2592:	9d 83       	std	Y+5, r25	; 0x05
    2594:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2596:	8e 81       	ldd	r24, Y+6	; 0x06
    2598:	9f 81       	ldd	r25, Y+7	; 0x07
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	9f 83       	std	Y+7, r25	; 0x07
    259e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a0:	8e 81       	ldd	r24, Y+6	; 0x06
    25a2:	9f 81       	ldd	r25, Y+7	; 0x07
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	69 f7       	brne	.-38     	; 0x2582 <LCD_cmd+0x7a8>
    25a8:	24 c0       	rjmp	.+72     	; 0x25f2 <LCD_cmd+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25aa:	68 85       	ldd	r22, Y+8	; 0x08
    25ac:	79 85       	ldd	r23, Y+9	; 0x09
    25ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    25b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9f 83       	std	Y+7, r25	; 0x07
    25bc:	8e 83       	std	Y+6, r24	; 0x06
    25be:	8e 81       	ldd	r24, Y+6	; 0x06
    25c0:	9f 81       	ldd	r25, Y+7	; 0x07
    25c2:	9b 83       	std	Y+3, r25	; 0x03
    25c4:	8a 83       	std	Y+2, r24	; 0x02
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <LCD_cmd+0x7f0>
    25ce:	9b 83       	std	Y+3, r25	; 0x03
    25d0:	8a 83       	std	Y+2, r24	; 0x02
    25d2:	0f c0       	rjmp	.+30     	; 0x25f2 <LCD_cmd+0x818>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25d4:	69 89       	ldd	r22, Y+17	; 0x11
    25d6:	7a 89       	ldd	r23, Y+18	; 0x12
    25d8:	8b 89       	ldd	r24, Y+19	; 0x13
    25da:	9c 89       	ldd	r25, Y+20	; 0x14
    25dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	88 8b       	std	Y+16, r24	; 0x10
    25e6:	88 89       	ldd	r24, Y+16	; 0x10
    25e8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	8a 95       	dec	r24
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <LCD_cmd+0x812>
    25f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    25f2:	cf 59       	subi	r28, 0x9F	; 159
    25f4:	df 4f       	sbci	r29, 0xFF	; 255
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	1f 91       	pop	r17
    2606:	0f 91       	pop	r16
    2608:	08 95       	ret

0000260a <LCD_data_write>:



void LCD_data_write(uint8 data) {
    260a:	0f 93       	push	r16
    260c:	1f 93       	push	r17
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	c1 56       	subi	r28, 0x61	; 97
    2618:	d0 40       	sbci	r29, 0x00	; 0
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	fe 01       	movw	r30, r28
    2626:	ef 59       	subi	r30, 0x9F	; 159
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 83       	st	Z, r24
	Dio_write_PORT(Rs, HIGH);
    262c:	89 e0       	ldi	r24, 0x09	; 9
    262e:	61 e0       	ldi	r22, 0x01	; 1
    2630:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(Rw, LOW);
    2634:	8a e0       	ldi	r24, 0x0A	; 10
    2636:	60 e0       	ldi	r22, 0x00	; 0
    2638:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>

	Dio_write_PORT(D4, GET_BIT(data, 4));
    263c:	fe 01       	movw	r30, r28
    263e:	ef 59       	subi	r30, 0x9F	; 159
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 81       	ld	r24, Z
    2644:	82 95       	swap	r24
    2646:	8f 70       	andi	r24, 0x0F	; 15
    2648:	98 2f       	mov	r25, r24
    264a:	91 70       	andi	r25, 0x01	; 1
    264c:	84 e0       	ldi	r24, 0x04	; 4
    264e:	69 2f       	mov	r22, r25
    2650:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(data, 5));
    2654:	fe 01       	movw	r30, r28
    2656:	ef 59       	subi	r30, 0x9F	; 159
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	80 81       	ld	r24, Z
    265c:	82 95       	swap	r24
    265e:	86 95       	lsr	r24
    2660:	87 70       	andi	r24, 0x07	; 7
    2662:	98 2f       	mov	r25, r24
    2664:	91 70       	andi	r25, 0x01	; 1
    2666:	85 e0       	ldi	r24, 0x05	; 5
    2668:	69 2f       	mov	r22, r25
    266a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(data, 6));
    266e:	fe 01       	movw	r30, r28
    2670:	ef 59       	subi	r30, 0x9F	; 159
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	82 95       	swap	r24
    2678:	86 95       	lsr	r24
    267a:	86 95       	lsr	r24
    267c:	83 70       	andi	r24, 0x03	; 3
    267e:	98 2f       	mov	r25, r24
    2680:	91 70       	andi	r25, 0x01	; 1
    2682:	86 e0       	ldi	r24, 0x06	; 6
    2684:	69 2f       	mov	r22, r25
    2686:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D7, GET_BIT(data, 7));
    268a:	fe 01       	movw	r30, r28
    268c:	ef 59       	subi	r30, 0x9F	; 159
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	80 81       	ld	r24, Z
    2692:	98 2f       	mov	r25, r24
    2694:	99 1f       	adc	r25, r25
    2696:	99 27       	eor	r25, r25
    2698:	99 1f       	adc	r25, r25
    269a:	87 e0       	ldi	r24, 0x07	; 7
    269c:	69 2f       	mov	r22, r25
    269e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>

	Dio_write_PORT(E, HIGH);
    26a2:	8b e0       	ldi	r24, 0x0B	; 11
    26a4:	61 e0       	ldi	r22, 0x01	; 1
    26a6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    26aa:	fe 01       	movw	r30, r28
    26ac:	e3 5a       	subi	r30, 0xA3	; 163
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a0 e2       	ldi	r26, 0x20	; 32
    26b6:	b1 e4       	ldi	r27, 0x41	; 65
    26b8:	80 83       	st	Z, r24
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	a2 83       	std	Z+2, r26	; 0x02
    26be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26c0:	8e 01       	movw	r16, r28
    26c2:	07 5a       	subi	r16, 0xA7	; 167
    26c4:	1f 4f       	sbci	r17, 0xFF	; 255
    26c6:	fe 01       	movw	r30, r28
    26c8:	e3 5a       	subi	r30, 0xA3	; 163
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	2b ea       	ldi	r18, 0xAB	; 171
    26d6:	3a ea       	ldi	r19, 0xAA	; 170
    26d8:	4a ea       	ldi	r20, 0xAA	; 170
    26da:	50 e4       	ldi	r21, 0x40	; 64
    26dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	f8 01       	movw	r30, r16
    26e6:	80 83       	st	Z, r24
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	a2 83       	std	Z+2, r26	; 0x02
    26ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ee:	fe 01       	movw	r30, r28
    26f0:	e7 5a       	subi	r30, 0xA7	; 167
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	60 81       	ld	r22, Z
    26f6:	71 81       	ldd	r23, Z+1	; 0x01
    26f8:	82 81       	ldd	r24, Z+2	; 0x02
    26fa:	93 81       	ldd	r25, Z+3	; 0x03
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	34 f4       	brge	.+12     	; 0x2718 <LCD_data_write+0x10e>
		__ticks = 1;
    270c:	fe 01       	movw	r30, r28
    270e:	e8 5a       	subi	r30, 0xA8	; 168
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	80 83       	st	Z, r24
    2716:	e0 c0       	rjmp	.+448    	; 0x28d8 <LCD_data_write+0x2ce>
	else if (__tmp > 255)
    2718:	fe 01       	movw	r30, r28
    271a:	e7 5a       	subi	r30, 0xA7	; 167
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	4f e7       	ldi	r20, 0x7F	; 127
    272c:	53 e4       	ldi	r21, 0x43	; 67
    272e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2732:	18 16       	cp	r1, r24
    2734:	0c f0       	brlt	.+2      	; 0x2738 <LCD_data_write+0x12e>
    2736:	c0 c0       	rjmp	.+384    	; 0x28b8 <LCD_data_write+0x2ae>
	{
		_delay_ms(__us / 1000.0);
    2738:	fe 01       	movw	r30, r28
    273a:	e3 5a       	subi	r30, 0xA3	; 163
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	60 81       	ld	r22, Z
    2740:	71 81       	ldd	r23, Z+1	; 0x01
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	4a e7       	ldi	r20, 0x7A	; 122
    274c:	54 e4       	ldi	r21, 0x44	; 68
    274e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	fe 01       	movw	r30, r28
    2758:	ec 5a       	subi	r30, 0xAC	; 172
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	80 83       	st	Z, r24
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	a2 83       	std	Z+2, r26	; 0x02
    2762:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2764:	8e 01       	movw	r16, r28
    2766:	00 5b       	subi	r16, 0xB0	; 176
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	fe 01       	movw	r30, r28
    276c:	ec 5a       	subi	r30, 0xAC	; 172
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	60 81       	ld	r22, Z
    2772:	71 81       	ldd	r23, Z+1	; 0x01
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	93 81       	ldd	r25, Z+3	; 0x03
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	4a e7       	ldi	r20, 0x7A	; 122
    277e:	55 e4       	ldi	r21, 0x45	; 69
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	f8 01       	movw	r30, r16
    278a:	80 83       	st	Z, r24
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	a2 83       	std	Z+2, r26	; 0x02
    2790:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2792:	fe 01       	movw	r30, r28
    2794:	e0 5b       	subi	r30, 0xB0	; 176
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	60 81       	ld	r22, Z
    279a:	71 81       	ldd	r23, Z+1	; 0x01
    279c:	82 81       	ldd	r24, Z+2	; 0x02
    279e:	93 81       	ldd	r25, Z+3	; 0x03
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	44 f4       	brge	.+16     	; 0x27c0 <LCD_data_write+0x1b6>
		__ticks = 1;
    27b0:	fe 01       	movw	r30, r28
    27b2:	e2 5b       	subi	r30, 0xB2	; 178
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	80 83       	st	Z, r24
    27be:	64 c0       	rjmp	.+200    	; 0x2888 <LCD_data_write+0x27e>
	else if (__tmp > 65535)
    27c0:	fe 01       	movw	r30, r28
    27c2:	e0 5b       	subi	r30, 0xB0	; 176
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	3f ef       	ldi	r19, 0xFF	; 255
    27d2:	4f e7       	ldi	r20, 0x7F	; 127
    27d4:	57 e4       	ldi	r21, 0x47	; 71
    27d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27da:	18 16       	cp	r1, r24
    27dc:	0c f0       	brlt	.+2      	; 0x27e0 <LCD_data_write+0x1d6>
    27de:	43 c0       	rjmp	.+134    	; 0x2866 <LCD_data_write+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e0:	fe 01       	movw	r30, r28
    27e2:	ec 5a       	subi	r30, 0xAC	; 172
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	60 81       	ld	r22, Z
    27e8:	71 81       	ldd	r23, Z+1	; 0x01
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	93 81       	ldd	r25, Z+3	; 0x03
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e2       	ldi	r20, 0x20	; 32
    27f4:	51 e4       	ldi	r21, 0x41	; 65
    27f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	8e 01       	movw	r16, r28
    2800:	02 5b       	subi	r16, 0xB2	; 178
    2802:	1f 4f       	sbci	r17, 0xFF	; 255
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	f8 01       	movw	r30, r16
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	80 83       	st	Z, r24
    2816:	1f c0       	rjmp	.+62     	; 0x2856 <LCD_data_write+0x24c>
    2818:	fe 01       	movw	r30, r28
    281a:	e4 5b       	subi	r30, 0xB4	; 180
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 e9       	ldi	r24, 0x90	; 144
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2826:	fe 01       	movw	r30, r28
    2828:	e4 5b       	subi	r30, 0xB4	; 180
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <LCD_data_write+0x226>
    2834:	fe 01       	movw	r30, r28
    2836:	e4 5b       	subi	r30, 0xB4	; 180
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	91 83       	std	Z+1, r25	; 0x01
    283c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283e:	de 01       	movw	r26, r28
    2840:	a2 5b       	subi	r26, 0xB2	; 178
    2842:	bf 4f       	sbci	r27, 0xFF	; 255
    2844:	fe 01       	movw	r30, r28
    2846:	e2 5b       	subi	r30, 0xB2	; 178
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	80 81       	ld	r24, Z
    284c:	91 81       	ldd	r25, Z+1	; 0x01
    284e:	01 97       	sbiw	r24, 0x01	; 1
    2850:	11 96       	adiw	r26, 0x01	; 1
    2852:	9c 93       	st	X, r25
    2854:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2856:	fe 01       	movw	r30, r28
    2858:	e2 5b       	subi	r30, 0xB2	; 178
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	d1 f6       	brne	.-76     	; 0x2818 <LCD_data_write+0x20e>
    2864:	4b c0       	rjmp	.+150    	; 0x28fc <LCD_data_write+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2866:	8e 01       	movw	r16, r28
    2868:	02 5b       	subi	r16, 0xB2	; 178
    286a:	1f 4f       	sbci	r17, 0xFF	; 255
    286c:	fe 01       	movw	r30, r28
    286e:	e0 5b       	subi	r30, 0xB0	; 176
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	60 81       	ld	r22, Z
    2874:	71 81       	ldd	r23, Z+1	; 0x01
    2876:	82 81       	ldd	r24, Z+2	; 0x02
    2878:	93 81       	ldd	r25, Z+3	; 0x03
    287a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	f8 01       	movw	r30, r16
    2884:	91 83       	std	Z+1, r25	; 0x01
    2886:	80 83       	st	Z, r24
    2888:	de 01       	movw	r26, r28
    288a:	a6 5b       	subi	r26, 0xB6	; 182
    288c:	bf 4f       	sbci	r27, 0xFF	; 255
    288e:	fe 01       	movw	r30, r28
    2890:	e2 5b       	subi	r30, 0xB2	; 178
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	80 81       	ld	r24, Z
    2896:	91 81       	ldd	r25, Z+1	; 0x01
    2898:	11 96       	adiw	r26, 0x01	; 1
    289a:	9c 93       	st	X, r25
    289c:	8e 93       	st	-X, r24
    289e:	fe 01       	movw	r30, r28
    28a0:	e6 5b       	subi	r30, 0xB6	; 182
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	91 81       	ldd	r25, Z+1	; 0x01
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <LCD_data_write+0x29e>
    28ac:	fe 01       	movw	r30, r28
    28ae:	e6 5b       	subi	r30, 0xB6	; 182
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	80 83       	st	Z, r24
    28b6:	22 c0       	rjmp	.+68     	; 0x28fc <LCD_data_write+0x2f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28b8:	8e 01       	movw	r16, r28
    28ba:	08 5a       	subi	r16, 0xA8	; 168
    28bc:	1f 4f       	sbci	r17, 0xFF	; 255
    28be:	fe 01       	movw	r30, r28
    28c0:	e7 5a       	subi	r30, 0xA7	; 167
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	60 81       	ld	r22, Z
    28c6:	71 81       	ldd	r23, Z+1	; 0x01
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	f8 01       	movw	r30, r16
    28d6:	80 83       	st	Z, r24
    28d8:	de 01       	movw	r26, r28
    28da:	a7 5b       	subi	r26, 0xB7	; 183
    28dc:	bf 4f       	sbci	r27, 0xFF	; 255
    28de:	fe 01       	movw	r30, r28
    28e0:	e8 5a       	subi	r30, 0xA8	; 168
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	80 81       	ld	r24, Z
    28e6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28e8:	fe 01       	movw	r30, r28
    28ea:	e7 5b       	subi	r30, 0xB7	; 183
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	8a 95       	dec	r24
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <LCD_data_write+0x2e6>
    28f4:	fe 01       	movw	r30, r28
    28f6:	e7 5b       	subi	r30, 0xB7	; 183
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	80 83       	st	Z, r24
	_delay_us(10);
	Dio_write_PORT(E, LOW);
    28fc:	8b e0       	ldi	r24, 0x0B	; 11
    28fe:	60 e0       	ldi	r22, 0x00	; 0
    2900:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    2904:	fe 01       	movw	r30, r28
    2906:	eb 5b       	subi	r30, 0xBB	; 187
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a8 e4       	ldi	r26, 0x48	; 72
    2910:	b3 e4       	ldi	r27, 0x43	; 67
    2912:	80 83       	st	Z, r24
    2914:	91 83       	std	Z+1, r25	; 0x01
    2916:	a2 83       	std	Z+2, r26	; 0x02
    2918:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    291a:	8e 01       	movw	r16, r28
    291c:	0f 5b       	subi	r16, 0xBF	; 191
    291e:	1f 4f       	sbci	r17, 0xFF	; 255
    2920:	fe 01       	movw	r30, r28
    2922:	eb 5b       	subi	r30, 0xBB	; 187
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	60 81       	ld	r22, Z
    2928:	71 81       	ldd	r23, Z+1	; 0x01
    292a:	82 81       	ldd	r24, Z+2	; 0x02
    292c:	93 81       	ldd	r25, Z+3	; 0x03
    292e:	2b ea       	ldi	r18, 0xAB	; 171
    2930:	3a ea       	ldi	r19, 0xAA	; 170
    2932:	4a ea       	ldi	r20, 0xAA	; 170
    2934:	50 e4       	ldi	r21, 0x40	; 64
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	f8 01       	movw	r30, r16
    2940:	80 83       	st	Z, r24
    2942:	91 83       	std	Z+1, r25	; 0x01
    2944:	a2 83       	std	Z+2, r26	; 0x02
    2946:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2948:	fe 01       	movw	r30, r28
    294a:	ef 5b       	subi	r30, 0xBF	; 191
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	60 81       	ld	r22, Z
    2950:	71 81       	ldd	r23, Z+1	; 0x01
    2952:	82 81       	ldd	r24, Z+2	; 0x02
    2954:	93 81       	ldd	r25, Z+3	; 0x03
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e8       	ldi	r20, 0x80	; 128
    295c:	5f e3       	ldi	r21, 0x3F	; 63
    295e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2962:	88 23       	and	r24, r24
    2964:	34 f4       	brge	.+12     	; 0x2972 <LCD_data_write+0x368>
		__ticks = 1;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	fe 01       	movw	r30, r28
    296a:	e0 5c       	subi	r30, 0xC0	; 192
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 83       	st	Z, r24
    2970:	9d c0       	rjmp	.+314    	; 0x2aac <LCD_data_write+0x4a2>
	else if (__tmp > 255)
    2972:	fe 01       	movw	r30, r28
    2974:	ef 5b       	subi	r30, 0xBF	; 191
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	4f e7       	ldi	r20, 0x7F	; 127
    2986:	53 e4       	ldi	r21, 0x43	; 67
    2988:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    298c:	18 16       	cp	r1, r24
    298e:	0c f0       	brlt	.+2      	; 0x2992 <LCD_data_write+0x388>
    2990:	7e c0       	rjmp	.+252    	; 0x2a8e <LCD_data_write+0x484>
	{
		_delay_ms(__us / 1000.0);
    2992:	fe 01       	movw	r30, r28
    2994:	eb 5b       	subi	r30, 0xBB	; 187
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	4a e7       	ldi	r20, 0x7A	; 122
    29a6:	54 e4       	ldi	r21, 0x44	; 68
    29a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	8c af       	std	Y+60, r24	; 0x3c
    29b2:	9d af       	std	Y+61, r25	; 0x3d
    29b4:	ae af       	std	Y+62, r26	; 0x3e
    29b6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b8:	6c ad       	ldd	r22, Y+60	; 0x3c
    29ba:	7d ad       	ldd	r23, Y+61	; 0x3d
    29bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    29be:	9f ad       	ldd	r25, Y+63	; 0x3f
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	4a e7       	ldi	r20, 0x7A	; 122
    29c6:	55 e4       	ldi	r21, 0x45	; 69
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	88 af       	std	Y+56, r24	; 0x38
    29d2:	99 af       	std	Y+57, r25	; 0x39
    29d4:	aa af       	std	Y+58, r26	; 0x3a
    29d6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    29d8:	68 ad       	ldd	r22, Y+56	; 0x38
    29da:	79 ad       	ldd	r23, Y+57	; 0x39
    29dc:	8a ad       	ldd	r24, Y+58	; 0x3a
    29de:	9b ad       	ldd	r25, Y+59	; 0x3b
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e8       	ldi	r20, 0x80	; 128
    29e6:	5f e3       	ldi	r21, 0x3F	; 63
    29e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ec:	88 23       	and	r24, r24
    29ee:	2c f4       	brge	.+10     	; 0x29fa <LCD_data_write+0x3f0>
		__ticks = 1;
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	9f ab       	std	Y+55, r25	; 0x37
    29f6:	8e ab       	std	Y+54, r24	; 0x36
    29f8:	3f c0       	rjmp	.+126    	; 0x2a78 <LCD_data_write+0x46e>
	else if (__tmp > 65535)
    29fa:	68 ad       	ldd	r22, Y+56	; 0x38
    29fc:	79 ad       	ldd	r23, Y+57	; 0x39
    29fe:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a00:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	3f ef       	ldi	r19, 0xFF	; 255
    2a06:	4f e7       	ldi	r20, 0x7F	; 127
    2a08:	57 e4       	ldi	r21, 0x47	; 71
    2a0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a0e:	18 16       	cp	r1, r24
    2a10:	4c f5       	brge	.+82     	; 0x2a64 <LCD_data_write+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a12:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a14:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a16:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a18:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e2       	ldi	r20, 0x20	; 32
    2a20:	51 e4       	ldi	r21, 0x41	; 65
    2a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	bc 01       	movw	r22, r24
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	9f ab       	std	Y+55, r25	; 0x37
    2a38:	8e ab       	std	Y+54, r24	; 0x36
    2a3a:	0f c0       	rjmp	.+30     	; 0x2a5a <LCD_data_write+0x450>
    2a3c:	80 e9       	ldi	r24, 0x90	; 144
    2a3e:	91 e0       	ldi	r25, 0x01	; 1
    2a40:	9d ab       	std	Y+53, r25	; 0x35
    2a42:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a44:	8c a9       	ldd	r24, Y+52	; 0x34
    2a46:	9d a9       	ldd	r25, Y+53	; 0x35
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <LCD_data_write+0x43e>
    2a4c:	9d ab       	std	Y+53, r25	; 0x35
    2a4e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a50:	8e a9       	ldd	r24, Y+54	; 0x36
    2a52:	9f a9       	ldd	r25, Y+55	; 0x37
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	9f ab       	std	Y+55, r25	; 0x37
    2a58:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5a:	8e a9       	ldd	r24, Y+54	; 0x36
    2a5c:	9f a9       	ldd	r25, Y+55	; 0x37
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	69 f7       	brne	.-38     	; 0x2a3c <LCD_data_write+0x432>
    2a62:	2d c0       	rjmp	.+90     	; 0x2abe <LCD_data_write+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a64:	68 ad       	ldd	r22, Y+56	; 0x38
    2a66:	79 ad       	ldd	r23, Y+57	; 0x39
    2a68:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a6a:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9f ab       	std	Y+55, r25	; 0x37
    2a76:	8e ab       	std	Y+54, r24	; 0x36
    2a78:	8e a9       	ldd	r24, Y+54	; 0x36
    2a7a:	9f a9       	ldd	r25, Y+55	; 0x37
    2a7c:	9b ab       	std	Y+51, r25	; 0x33
    2a7e:	8a ab       	std	Y+50, r24	; 0x32
    2a80:	8a a9       	ldd	r24, Y+50	; 0x32
    2a82:	9b a9       	ldd	r25, Y+51	; 0x33
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	f1 f7       	brne	.-4      	; 0x2a84 <LCD_data_write+0x47a>
    2a88:	9b ab       	std	Y+51, r25	; 0x33
    2a8a:	8a ab       	std	Y+50, r24	; 0x32
    2a8c:	18 c0       	rjmp	.+48     	; 0x2abe <LCD_data_write+0x4b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ef 5b       	subi	r30, 0xBF	; 191
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e0 5c       	subi	r30, 0xC0	; 192
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 83       	st	Z, r24
    2aac:	fe 01       	movw	r30, r28
    2aae:	e0 5c       	subi	r30, 0xC0	; 192
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ab6:	89 a9       	ldd	r24, Y+49	; 0x31
    2ab8:	8a 95       	dec	r24
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <LCD_data_write+0x4ae>
    2abc:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	Dio_write_PORT(D4, GET_BIT(data, 0));
    2abe:	fe 01       	movw	r30, r28
    2ac0:	ef 59       	subi	r30, 0x9F	; 159
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	80 81       	ld	r24, Z
    2ac6:	98 2f       	mov	r25, r24
    2ac8:	91 70       	andi	r25, 0x01	; 1
    2aca:	84 e0       	ldi	r24, 0x04	; 4
    2acc:	69 2f       	mov	r22, r25
    2ace:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(data, 1));
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ef 59       	subi	r30, 0x9F	; 159
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 81       	ld	r24, Z
    2ada:	86 95       	lsr	r24
    2adc:	98 2f       	mov	r25, r24
    2ade:	91 70       	andi	r25, 0x01	; 1
    2ae0:	85 e0       	ldi	r24, 0x05	; 5
    2ae2:	69 2f       	mov	r22, r25
    2ae4:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(data, 2));
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ef 59       	subi	r30, 0x9F	; 159
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	86 95       	lsr	r24
    2af2:	86 95       	lsr	r24
    2af4:	98 2f       	mov	r25, r24
    2af6:	91 70       	andi	r25, 0x01	; 1
    2af8:	86 e0       	ldi	r24, 0x06	; 6
    2afa:	69 2f       	mov	r22, r25
    2afc:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D7, GET_BIT(data, 3));
    2b00:	fe 01       	movw	r30, r28
    2b02:	ef 59       	subi	r30, 0x9F	; 159
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	80 81       	ld	r24, Z
    2b08:	86 95       	lsr	r24
    2b0a:	86 95       	lsr	r24
    2b0c:	86 95       	lsr	r24
    2b0e:	98 2f       	mov	r25, r24
    2b10:	91 70       	andi	r25, 0x01	; 1
    2b12:	87 e0       	ldi	r24, 0x07	; 7
    2b14:	69 2f       	mov	r22, r25
    2b16:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>

	Dio_write_PORT(E, HIGH);
    2b1a:	8b e0       	ldi	r24, 0x0B	; 11
    2b1c:	61 e0       	ldi	r22, 0x01	; 1
    2b1e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	a0 e2       	ldi	r26, 0x20	; 32
    2b28:	b1 e4       	ldi	r27, 0x41	; 65
    2b2a:	8d a7       	std	Y+45, r24	; 0x2d
    2b2c:	9e a7       	std	Y+46, r25	; 0x2e
    2b2e:	af a7       	std	Y+47, r26	; 0x2f
    2b30:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b32:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b34:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b36:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b38:	98 a9       	ldd	r25, Y+48	; 0x30
    2b3a:	2b ea       	ldi	r18, 0xAB	; 171
    2b3c:	3a ea       	ldi	r19, 0xAA	; 170
    2b3e:	4a ea       	ldi	r20, 0xAA	; 170
    2b40:	50 e4       	ldi	r21, 0x40	; 64
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	89 a7       	std	Y+41, r24	; 0x29
    2b4c:	9a a7       	std	Y+42, r25	; 0x2a
    2b4e:	ab a7       	std	Y+43, r26	; 0x2b
    2b50:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2b52:	69 a5       	ldd	r22, Y+41	; 0x29
    2b54:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b56:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b58:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e8       	ldi	r20, 0x80	; 128
    2b60:	5f e3       	ldi	r21, 0x3F	; 63
    2b62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b66:	88 23       	and	r24, r24
    2b68:	1c f4       	brge	.+6      	; 0x2b70 <LCD_data_write+0x566>
		__ticks = 1;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	88 a7       	std	Y+40, r24	; 0x28
    2b6e:	91 c0       	rjmp	.+290    	; 0x2c92 <LCD_data_write+0x688>
	else if (__tmp > 255)
    2b70:	69 a5       	ldd	r22, Y+41	; 0x29
    2b72:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b74:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b76:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	4f e7       	ldi	r20, 0x7F	; 127
    2b7e:	53 e4       	ldi	r21, 0x43	; 67
    2b80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b84:	18 16       	cp	r1, r24
    2b86:	0c f0       	brlt	.+2      	; 0x2b8a <LCD_data_write+0x580>
    2b88:	7b c0       	rjmp	.+246    	; 0x2c80 <LCD_data_write+0x676>
	{
		_delay_ms(__us / 1000.0);
    2b8a:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b8c:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b90:	98 a9       	ldd	r25, Y+48	; 0x30
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a e7       	ldi	r20, 0x7A	; 122
    2b98:	54 e4       	ldi	r21, 0x44	; 68
    2b9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8c a3       	std	Y+36, r24	; 0x24
    2ba4:	9d a3       	std	Y+37, r25	; 0x25
    2ba6:	ae a3       	std	Y+38, r26	; 0x26
    2ba8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2baa:	6c a1       	ldd	r22, Y+36	; 0x24
    2bac:	7d a1       	ldd	r23, Y+37	; 0x25
    2bae:	8e a1       	ldd	r24, Y+38	; 0x26
    2bb0:	9f a1       	ldd	r25, Y+39	; 0x27
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	4a e7       	ldi	r20, 0x7A	; 122
    2bb8:	55 e4       	ldi	r21, 0x45	; 69
    2bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	88 a3       	std	Y+32, r24	; 0x20
    2bc4:	99 a3       	std	Y+33, r25	; 0x21
    2bc6:	aa a3       	std	Y+34, r26	; 0x22
    2bc8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2bca:	68 a1       	ldd	r22, Y+32	; 0x20
    2bcc:	79 a1       	ldd	r23, Y+33	; 0x21
    2bce:	8a a1       	ldd	r24, Y+34	; 0x22
    2bd0:	9b a1       	ldd	r25, Y+35	; 0x23
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e8       	ldi	r20, 0x80	; 128
    2bd8:	5f e3       	ldi	r21, 0x3F	; 63
    2bda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bde:	88 23       	and	r24, r24
    2be0:	2c f4       	brge	.+10     	; 0x2bec <LCD_data_write+0x5e2>
		__ticks = 1;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	9f 8f       	std	Y+31, r25	; 0x1f
    2be8:	8e 8f       	std	Y+30, r24	; 0x1e
    2bea:	3f c0       	rjmp	.+126    	; 0x2c6a <LCD_data_write+0x660>
	else if (__tmp > 65535)
    2bec:	68 a1       	ldd	r22, Y+32	; 0x20
    2bee:	79 a1       	ldd	r23, Y+33	; 0x21
    2bf0:	8a a1       	ldd	r24, Y+34	; 0x22
    2bf2:	9b a1       	ldd	r25, Y+35	; 0x23
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	3f ef       	ldi	r19, 0xFF	; 255
    2bf8:	4f e7       	ldi	r20, 0x7F	; 127
    2bfa:	57 e4       	ldi	r21, 0x47	; 71
    2bfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c00:	18 16       	cp	r1, r24
    2c02:	4c f5       	brge	.+82     	; 0x2c56 <LCD_data_write+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c04:	6c a1       	ldd	r22, Y+36	; 0x24
    2c06:	7d a1       	ldd	r23, Y+37	; 0x25
    2c08:	8e a1       	ldd	r24, Y+38	; 0x26
    2c0a:	9f a1       	ldd	r25, Y+39	; 0x27
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e2       	ldi	r20, 0x20	; 32
    2c12:	51 e4       	ldi	r21, 0x41	; 65
    2c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	bc 01       	movw	r22, r24
    2c1e:	cd 01       	movw	r24, r26
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	9f 8f       	std	Y+31, r25	; 0x1f
    2c2a:	8e 8f       	std	Y+30, r24	; 0x1e
    2c2c:	0f c0       	rjmp	.+30     	; 0x2c4c <LCD_data_write+0x642>
    2c2e:	80 e9       	ldi	r24, 0x90	; 144
    2c30:	91 e0       	ldi	r25, 0x01	; 1
    2c32:	9d 8f       	std	Y+29, r25	; 0x1d
    2c34:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c36:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c38:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <LCD_data_write+0x630>
    2c3e:	9d 8f       	std	Y+29, r25	; 0x1d
    2c40:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c44:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	9f 8f       	std	Y+31, r25	; 0x1f
    2c4a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c4e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	69 f7       	brne	.-38     	; 0x2c2e <LCD_data_write+0x624>
    2c54:	24 c0       	rjmp	.+72     	; 0x2c9e <LCD_data_write+0x694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c56:	68 a1       	ldd	r22, Y+32	; 0x20
    2c58:	79 a1       	ldd	r23, Y+33	; 0x21
    2c5a:	8a a1       	ldd	r24, Y+34	; 0x22
    2c5c:	9b a1       	ldd	r25, Y+35	; 0x23
    2c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	9f 8f       	std	Y+31, r25	; 0x1f
    2c68:	8e 8f       	std	Y+30, r24	; 0x1e
    2c6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c6c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c6e:	9b 8f       	std	Y+27, r25	; 0x1b
    2c70:	8a 8f       	std	Y+26, r24	; 0x1a
    2c72:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c74:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <LCD_data_write+0x66c>
    2c7a:	9b 8f       	std	Y+27, r25	; 0x1b
    2c7c:	8a 8f       	std	Y+26, r24	; 0x1a
    2c7e:	0f c0       	rjmp	.+30     	; 0x2c9e <LCD_data_write+0x694>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c80:	69 a5       	ldd	r22, Y+41	; 0x29
    2c82:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c84:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c86:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	88 a7       	std	Y+40, r24	; 0x28
    2c92:	88 a5       	ldd	r24, Y+40	; 0x28
    2c94:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c96:	89 8d       	ldd	r24, Y+25	; 0x19
    2c98:	8a 95       	dec	r24
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <LCD_data_write+0x68e>
    2c9c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write_PORT(E, LOW);
    2c9e:	8b e0       	ldi	r24, 0x0B	; 11
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	a8 e4       	ldi	r26, 0x48	; 72
    2cac:	b3 e4       	ldi	r27, 0x43	; 67
    2cae:	8d 8b       	std	Y+21, r24	; 0x15
    2cb0:	9e 8b       	std	Y+22, r25	; 0x16
    2cb2:	af 8b       	std	Y+23, r26	; 0x17
    2cb4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cba:	8f 89       	ldd	r24, Y+23	; 0x17
    2cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cbe:	2b ea       	ldi	r18, 0xAB	; 171
    2cc0:	3a ea       	ldi	r19, 0xAA	; 170
    2cc2:	4a ea       	ldi	r20, 0xAA	; 170
    2cc4:	50 e4       	ldi	r21, 0x40	; 64
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	89 8b       	std	Y+17, r24	; 0x11
    2cd0:	9a 8b       	std	Y+18, r25	; 0x12
    2cd2:	ab 8b       	std	Y+19, r26	; 0x13
    2cd4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2cd6:	69 89       	ldd	r22, Y+17	; 0x11
    2cd8:	7a 89       	ldd	r23, Y+18	; 0x12
    2cda:	8b 89       	ldd	r24, Y+19	; 0x13
    2cdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e8       	ldi	r20, 0x80	; 128
    2ce4:	5f e3       	ldi	r21, 0x3F	; 63
    2ce6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cea:	88 23       	and	r24, r24
    2cec:	1c f4       	brge	.+6      	; 0x2cf4 <LCD_data_write+0x6ea>
		__ticks = 1;
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	88 8b       	std	Y+16, r24	; 0x10
    2cf2:	91 c0       	rjmp	.+290    	; 0x2e16 <LCD_data_write+0x80c>
	else if (__tmp > 255)
    2cf4:	69 89       	ldd	r22, Y+17	; 0x11
    2cf6:	7a 89       	ldd	r23, Y+18	; 0x12
    2cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	4f e7       	ldi	r20, 0x7F	; 127
    2d02:	53 e4       	ldi	r21, 0x43	; 67
    2d04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d08:	18 16       	cp	r1, r24
    2d0a:	0c f0       	brlt	.+2      	; 0x2d0e <LCD_data_write+0x704>
    2d0c:	7b c0       	rjmp	.+246    	; 0x2e04 <LCD_data_write+0x7fa>
	{
		_delay_ms(__us / 1000.0);
    2d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d10:	7e 89       	ldd	r23, Y+22	; 0x16
    2d12:	8f 89       	ldd	r24, Y+23	; 0x17
    2d14:	98 8d       	ldd	r25, Y+24	; 0x18
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	4a e7       	ldi	r20, 0x7A	; 122
    2d1c:	54 e4       	ldi	r21, 0x44	; 68
    2d1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	8c 87       	std	Y+12, r24	; 0x0c
    2d28:	9d 87       	std	Y+13, r25	; 0x0d
    2d2a:	ae 87       	std	Y+14, r26	; 0x0e
    2d2c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d30:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d32:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d34:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	4a e7       	ldi	r20, 0x7A	; 122
    2d3c:	55 e4       	ldi	r21, 0x45	; 69
    2d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	88 87       	std	Y+8, r24	; 0x08
    2d48:	99 87       	std	Y+9, r25	; 0x09
    2d4a:	aa 87       	std	Y+10, r26	; 0x0a
    2d4c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d4e:	68 85       	ldd	r22, Y+8	; 0x08
    2d50:	79 85       	ldd	r23, Y+9	; 0x09
    2d52:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d54:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e8       	ldi	r20, 0x80	; 128
    2d5c:	5f e3       	ldi	r21, 0x3F	; 63
    2d5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d62:	88 23       	and	r24, r24
    2d64:	2c f4       	brge	.+10     	; 0x2d70 <LCD_data_write+0x766>
		__ticks = 1;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	9f 83       	std	Y+7, r25	; 0x07
    2d6c:	8e 83       	std	Y+6, r24	; 0x06
    2d6e:	3f c0       	rjmp	.+126    	; 0x2dee <LCD_data_write+0x7e4>
	else if (__tmp > 65535)
    2d70:	68 85       	ldd	r22, Y+8	; 0x08
    2d72:	79 85       	ldd	r23, Y+9	; 0x09
    2d74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d76:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	3f ef       	ldi	r19, 0xFF	; 255
    2d7c:	4f e7       	ldi	r20, 0x7F	; 127
    2d7e:	57 e4       	ldi	r21, 0x47	; 71
    2d80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d84:	18 16       	cp	r1, r24
    2d86:	4c f5       	brge	.+82     	; 0x2dda <LCD_data_write+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d88:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d8a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e2       	ldi	r20, 0x20	; 32
    2d96:	51 e4       	ldi	r21, 0x41	; 65
    2d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	bc 01       	movw	r22, r24
    2da2:	cd 01       	movw	r24, r26
    2da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	9f 83       	std	Y+7, r25	; 0x07
    2dae:	8e 83       	std	Y+6, r24	; 0x06
    2db0:	0f c0       	rjmp	.+30     	; 0x2dd0 <LCD_data_write+0x7c6>
    2db2:	80 e9       	ldi	r24, 0x90	; 144
    2db4:	91 e0       	ldi	r25, 0x01	; 1
    2db6:	9d 83       	std	Y+5, r25	; 0x05
    2db8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dba:	8c 81       	ldd	r24, Y+4	; 0x04
    2dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	f1 f7       	brne	.-4      	; 0x2dbe <LCD_data_write+0x7b4>
    2dc2:	9d 83       	std	Y+5, r25	; 0x05
    2dc4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    2dc8:	9f 81       	ldd	r25, Y+7	; 0x07
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	9f 83       	std	Y+7, r25	; 0x07
    2dce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd0:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd2:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd4:	00 97       	sbiw	r24, 0x00	; 0
    2dd6:	69 f7       	brne	.-38     	; 0x2db2 <LCD_data_write+0x7a8>
    2dd8:	24 c0       	rjmp	.+72     	; 0x2e22 <LCD_data_write+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dda:	68 85       	ldd	r22, Y+8	; 0x08
    2ddc:	79 85       	ldd	r23, Y+9	; 0x09
    2dde:	8a 85       	ldd	r24, Y+10	; 0x0a
    2de0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	9f 83       	std	Y+7, r25	; 0x07
    2dec:	8e 83       	std	Y+6, r24	; 0x06
    2dee:	8e 81       	ldd	r24, Y+6	; 0x06
    2df0:	9f 81       	ldd	r25, Y+7	; 0x07
    2df2:	9b 83       	std	Y+3, r25	; 0x03
    2df4:	8a 83       	std	Y+2, r24	; 0x02
    2df6:	8a 81       	ldd	r24, Y+2	; 0x02
    2df8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <LCD_data_write+0x7f0>
    2dfe:	9b 83       	std	Y+3, r25	; 0x03
    2e00:	8a 83       	std	Y+2, r24	; 0x02
    2e02:	0f c0       	rjmp	.+30     	; 0x2e22 <LCD_data_write+0x818>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e04:	69 89       	ldd	r22, Y+17	; 0x11
    2e06:	7a 89       	ldd	r23, Y+18	; 0x12
    2e08:	8b 89       	ldd	r24, Y+19	; 0x13
    2e0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	88 8b       	std	Y+16, r24	; 0x10
    2e16:	88 89       	ldd	r24, Y+16	; 0x10
    2e18:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	8a 95       	dec	r24
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <LCD_data_write+0x812>
    2e20:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    2e22:	cf 59       	subi	r28, 0x9F	; 159
    2e24:	df 4f       	sbci	r29, 0xFF	; 255
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	1f 91       	pop	r17
    2e36:	0f 91       	pop	r16
    2e38:	08 95       	ret

00002e3a <LCD_data_read>:


void LCD_data_read(uint16 data) {
    2e3a:	0f 93       	push	r16
    2e3c:	1f 93       	push	r17
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	c2 56       	subi	r28, 0x62	; 98
    2e48:	d0 40       	sbci	r29, 0x00	; 0
    2e4a:	0f b6       	in	r0, 0x3f	; 63
    2e4c:	f8 94       	cli
    2e4e:	de bf       	out	0x3e, r29	; 62
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	cd bf       	out	0x3d, r28	; 61
    2e54:	fe 01       	movw	r30, r28
    2e56:	ef 59       	subi	r30, 0x9F	; 159
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	91 83       	std	Z+1, r25	; 0x01
    2e5c:	80 83       	st	Z, r24
	Dio_write_PORT(Rs, HIGH);
    2e5e:	89 e0       	ldi	r24, 0x09	; 9
    2e60:	61 e0       	ldi	r22, 0x01	; 1
    2e62:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(Rw, HIGH);
    2e66:	8a e0       	ldi	r24, 0x0A	; 10
    2e68:	61 e0       	ldi	r22, 0x01	; 1
    2e6a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>

	Dio_write_PORT(D4, GET_BIT(data, 4));
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ef 59       	subi	r30, 0x9F	; 159
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	80 81       	ld	r24, Z
    2e76:	91 81       	ldd	r25, Z+1	; 0x01
    2e78:	92 95       	swap	r25
    2e7a:	82 95       	swap	r24
    2e7c:	8f 70       	andi	r24, 0x0F	; 15
    2e7e:	89 27       	eor	r24, r25
    2e80:	9f 70       	andi	r25, 0x0F	; 15
    2e82:	89 27       	eor	r24, r25
    2e84:	98 2f       	mov	r25, r24
    2e86:	91 70       	andi	r25, 0x01	; 1
    2e88:	84 e0       	ldi	r24, 0x04	; 4
    2e8a:	69 2f       	mov	r22, r25
    2e8c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(data, 5));
    2e90:	fe 01       	movw	r30, r28
    2e92:	ef 59       	subi	r30, 0x9F	; 159
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 81       	ld	r24, Z
    2e98:	91 81       	ldd	r25, Z+1	; 0x01
    2e9a:	96 95       	lsr	r25
    2e9c:	87 95       	ror	r24
    2e9e:	92 95       	swap	r25
    2ea0:	82 95       	swap	r24
    2ea2:	8f 70       	andi	r24, 0x0F	; 15
    2ea4:	89 27       	eor	r24, r25
    2ea6:	9f 70       	andi	r25, 0x0F	; 15
    2ea8:	89 27       	eor	r24, r25
    2eaa:	98 2f       	mov	r25, r24
    2eac:	91 70       	andi	r25, 0x01	; 1
    2eae:	85 e0       	ldi	r24, 0x05	; 5
    2eb0:	69 2f       	mov	r22, r25
    2eb2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(data, 6));
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	ef 59       	subi	r30, 0x9F	; 159
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	80 81       	ld	r24, Z
    2ebe:	91 81       	ldd	r25, Z+1	; 0x01
    2ec0:	00 24       	eor	r0, r0
    2ec2:	88 0f       	add	r24, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	00 1c       	adc	r0, r0
    2ec8:	88 0f       	add	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	00 1c       	adc	r0, r0
    2ece:	89 2f       	mov	r24, r25
    2ed0:	90 2d       	mov	r25, r0
    2ed2:	98 2f       	mov	r25, r24
    2ed4:	91 70       	andi	r25, 0x01	; 1
    2ed6:	86 e0       	ldi	r24, 0x06	; 6
    2ed8:	69 2f       	mov	r22, r25
    2eda:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D7, GET_BIT(data, 7));
    2ede:	fe 01       	movw	r30, r28
    2ee0:	ef 59       	subi	r30, 0x9F	; 159
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 81       	ld	r24, Z
    2ee6:	91 81       	ldd	r25, Z+1	; 0x01
    2ee8:	88 0f       	add	r24, r24
    2eea:	89 2f       	mov	r24, r25
    2eec:	88 1f       	adc	r24, r24
    2eee:	99 0b       	sbc	r25, r25
    2ef0:	91 95       	neg	r25
    2ef2:	98 2f       	mov	r25, r24
    2ef4:	91 70       	andi	r25, 0x01	; 1
    2ef6:	87 e0       	ldi	r24, 0x07	; 7
    2ef8:	69 2f       	mov	r22, r25
    2efa:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>

	Dio_write_PORT(E, HIGH);
    2efe:	8b e0       	ldi	r24, 0x0B	; 11
    2f00:	61 e0       	ldi	r22, 0x01	; 1
    2f02:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    2f06:	fe 01       	movw	r30, r28
    2f08:	e3 5a       	subi	r30, 0xA3	; 163
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	a0 e2       	ldi	r26, 0x20	; 32
    2f12:	b1 e4       	ldi	r27, 0x41	; 65
    2f14:	80 83       	st	Z, r24
    2f16:	91 83       	std	Z+1, r25	; 0x01
    2f18:	a2 83       	std	Z+2, r26	; 0x02
    2f1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f1c:	8e 01       	movw	r16, r28
    2f1e:	07 5a       	subi	r16, 0xA7	; 167
    2f20:	1f 4f       	sbci	r17, 0xFF	; 255
    2f22:	fe 01       	movw	r30, r28
    2f24:	e3 5a       	subi	r30, 0xA3	; 163
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	60 81       	ld	r22, Z
    2f2a:	71 81       	ldd	r23, Z+1	; 0x01
    2f2c:	82 81       	ldd	r24, Z+2	; 0x02
    2f2e:	93 81       	ldd	r25, Z+3	; 0x03
    2f30:	2b ea       	ldi	r18, 0xAB	; 171
    2f32:	3a ea       	ldi	r19, 0xAA	; 170
    2f34:	4a ea       	ldi	r20, 0xAA	; 170
    2f36:	50 e4       	ldi	r21, 0x40	; 64
    2f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	f8 01       	movw	r30, r16
    2f42:	80 83       	st	Z, r24
    2f44:	91 83       	std	Z+1, r25	; 0x01
    2f46:	a2 83       	std	Z+2, r26	; 0x02
    2f48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	e7 5a       	subi	r30, 0xA7	; 167
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	60 81       	ld	r22, Z
    2f52:	71 81       	ldd	r23, Z+1	; 0x01
    2f54:	82 81       	ldd	r24, Z+2	; 0x02
    2f56:	93 81       	ldd	r25, Z+3	; 0x03
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e8       	ldi	r20, 0x80	; 128
    2f5e:	5f e3       	ldi	r21, 0x3F	; 63
    2f60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f64:	88 23       	and	r24, r24
    2f66:	34 f4       	brge	.+12     	; 0x2f74 <LCD_data_read+0x13a>
		__ticks = 1;
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e8 5a       	subi	r30, 0xA8	; 168
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	80 83       	st	Z, r24
    2f72:	e0 c0       	rjmp	.+448    	; 0x3134 <LCD_data_read+0x2fa>
	else if (__tmp > 255)
    2f74:	fe 01       	movw	r30, r28
    2f76:	e7 5a       	subi	r30, 0xA7	; 167
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	60 81       	ld	r22, Z
    2f7c:	71 81       	ldd	r23, Z+1	; 0x01
    2f7e:	82 81       	ldd	r24, Z+2	; 0x02
    2f80:	93 81       	ldd	r25, Z+3	; 0x03
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	4f e7       	ldi	r20, 0x7F	; 127
    2f88:	53 e4       	ldi	r21, 0x43	; 67
    2f8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f8e:	18 16       	cp	r1, r24
    2f90:	0c f0       	brlt	.+2      	; 0x2f94 <LCD_data_read+0x15a>
    2f92:	c0 c0       	rjmp	.+384    	; 0x3114 <LCD_data_read+0x2da>
	{
		_delay_ms(__us / 1000.0);
    2f94:	fe 01       	movw	r30, r28
    2f96:	e3 5a       	subi	r30, 0xA3	; 163
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	60 81       	ld	r22, Z
    2f9c:	71 81       	ldd	r23, Z+1	; 0x01
    2f9e:	82 81       	ldd	r24, Z+2	; 0x02
    2fa0:	93 81       	ldd	r25, Z+3	; 0x03
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	4a e7       	ldi	r20, 0x7A	; 122
    2fa8:	54 e4       	ldi	r21, 0x44	; 68
    2faa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	ec 5a       	subi	r30, 0xAC	; 172
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	80 83       	st	Z, r24
    2fba:	91 83       	std	Z+1, r25	; 0x01
    2fbc:	a2 83       	std	Z+2, r26	; 0x02
    2fbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc0:	8e 01       	movw	r16, r28
    2fc2:	00 5b       	subi	r16, 0xB0	; 176
    2fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	ec 5a       	subi	r30, 0xAC	; 172
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	60 81       	ld	r22, Z
    2fce:	71 81       	ldd	r23, Z+1	; 0x01
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	93 81       	ldd	r25, Z+3	; 0x03
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	4a e7       	ldi	r20, 0x7A	; 122
    2fda:	55 e4       	ldi	r21, 0x45	; 69
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	f8 01       	movw	r30, r16
    2fe6:	80 83       	st	Z, r24
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	a2 83       	std	Z+2, r26	; 0x02
    2fec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e0 5b       	subi	r30, 0xB0	; 176
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	60 81       	ld	r22, Z
    2ff6:	71 81       	ldd	r23, Z+1	; 0x01
    2ff8:	82 81       	ldd	r24, Z+2	; 0x02
    2ffa:	93 81       	ldd	r25, Z+3	; 0x03
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e8       	ldi	r20, 0x80	; 128
    3002:	5f e3       	ldi	r21, 0x3F	; 63
    3004:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3008:	88 23       	and	r24, r24
    300a:	44 f4       	brge	.+16     	; 0x301c <LCD_data_read+0x1e2>
		__ticks = 1;
    300c:	fe 01       	movw	r30, r28
    300e:	e2 5b       	subi	r30, 0xB2	; 178
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	80 83       	st	Z, r24
    301a:	64 c0       	rjmp	.+200    	; 0x30e4 <LCD_data_read+0x2aa>
	else if (__tmp > 65535)
    301c:	fe 01       	movw	r30, r28
    301e:	e0 5b       	subi	r30, 0xB0	; 176
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	60 81       	ld	r22, Z
    3024:	71 81       	ldd	r23, Z+1	; 0x01
    3026:	82 81       	ldd	r24, Z+2	; 0x02
    3028:	93 81       	ldd	r25, Z+3	; 0x03
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	3f ef       	ldi	r19, 0xFF	; 255
    302e:	4f e7       	ldi	r20, 0x7F	; 127
    3030:	57 e4       	ldi	r21, 0x47	; 71
    3032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3036:	18 16       	cp	r1, r24
    3038:	0c f0       	brlt	.+2      	; 0x303c <LCD_data_read+0x202>
    303a:	43 c0       	rjmp	.+134    	; 0x30c2 <LCD_data_read+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303c:	fe 01       	movw	r30, r28
    303e:	ec 5a       	subi	r30, 0xAC	; 172
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	60 81       	ld	r22, Z
    3044:	71 81       	ldd	r23, Z+1	; 0x01
    3046:	82 81       	ldd	r24, Z+2	; 0x02
    3048:	93 81       	ldd	r25, Z+3	; 0x03
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	40 e2       	ldi	r20, 0x20	; 32
    3050:	51 e4       	ldi	r21, 0x41	; 65
    3052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	8e 01       	movw	r16, r28
    305c:	02 5b       	subi	r16, 0xB2	; 178
    305e:	1f 4f       	sbci	r17, 0xFF	; 255
    3060:	bc 01       	movw	r22, r24
    3062:	cd 01       	movw	r24, r26
    3064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	f8 01       	movw	r30, r16
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	80 83       	st	Z, r24
    3072:	1f c0       	rjmp	.+62     	; 0x30b2 <LCD_data_read+0x278>
    3074:	fe 01       	movw	r30, r28
    3076:	e4 5b       	subi	r30, 0xB4	; 180
    3078:	ff 4f       	sbci	r31, 0xFF	; 255
    307a:	80 e9       	ldi	r24, 0x90	; 144
    307c:	91 e0       	ldi	r25, 0x01	; 1
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3082:	fe 01       	movw	r30, r28
    3084:	e4 5b       	subi	r30, 0xB4	; 180
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	80 81       	ld	r24, Z
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <LCD_data_read+0x252>
    3090:	fe 01       	movw	r30, r28
    3092:	e4 5b       	subi	r30, 0xB4	; 180
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309a:	de 01       	movw	r26, r28
    309c:	a2 5b       	subi	r26, 0xB2	; 178
    309e:	bf 4f       	sbci	r27, 0xFF	; 255
    30a0:	fe 01       	movw	r30, r28
    30a2:	e2 5b       	subi	r30, 0xB2	; 178
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	80 81       	ld	r24, Z
    30a8:	91 81       	ldd	r25, Z+1	; 0x01
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	11 96       	adiw	r26, 0x01	; 1
    30ae:	9c 93       	st	X, r25
    30b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b2:	fe 01       	movw	r30, r28
    30b4:	e2 5b       	subi	r30, 0xB2	; 178
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	80 81       	ld	r24, Z
    30ba:	91 81       	ldd	r25, Z+1	; 0x01
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	d1 f6       	brne	.-76     	; 0x3074 <LCD_data_read+0x23a>
    30c0:	4b c0       	rjmp	.+150    	; 0x3158 <LCD_data_read+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c2:	8e 01       	movw	r16, r28
    30c4:	02 5b       	subi	r16, 0xB2	; 178
    30c6:	1f 4f       	sbci	r17, 0xFF	; 255
    30c8:	fe 01       	movw	r30, r28
    30ca:	e0 5b       	subi	r30, 0xB0	; 176
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	60 81       	ld	r22, Z
    30d0:	71 81       	ldd	r23, Z+1	; 0x01
    30d2:	82 81       	ldd	r24, Z+2	; 0x02
    30d4:	93 81       	ldd	r25, Z+3	; 0x03
    30d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	f8 01       	movw	r30, r16
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	80 83       	st	Z, r24
    30e4:	de 01       	movw	r26, r28
    30e6:	a6 5b       	subi	r26, 0xB6	; 182
    30e8:	bf 4f       	sbci	r27, 0xFF	; 255
    30ea:	fe 01       	movw	r30, r28
    30ec:	e2 5b       	subi	r30, 0xB2	; 178
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	80 81       	ld	r24, Z
    30f2:	91 81       	ldd	r25, Z+1	; 0x01
    30f4:	11 96       	adiw	r26, 0x01	; 1
    30f6:	9c 93       	st	X, r25
    30f8:	8e 93       	st	-X, r24
    30fa:	fe 01       	movw	r30, r28
    30fc:	e6 5b       	subi	r30, 0xB6	; 182
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	80 81       	ld	r24, Z
    3102:	91 81       	ldd	r25, Z+1	; 0x01
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <LCD_data_read+0x2ca>
    3108:	fe 01       	movw	r30, r28
    310a:	e6 5b       	subi	r30, 0xB6	; 182
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	91 83       	std	Z+1, r25	; 0x01
    3110:	80 83       	st	Z, r24
    3112:	22 c0       	rjmp	.+68     	; 0x3158 <LCD_data_read+0x31e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3114:	8e 01       	movw	r16, r28
    3116:	08 5a       	subi	r16, 0xA8	; 168
    3118:	1f 4f       	sbci	r17, 0xFF	; 255
    311a:	fe 01       	movw	r30, r28
    311c:	e7 5a       	subi	r30, 0xA7	; 167
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	60 81       	ld	r22, Z
    3122:	71 81       	ldd	r23, Z+1	; 0x01
    3124:	82 81       	ldd	r24, Z+2	; 0x02
    3126:	93 81       	ldd	r25, Z+3	; 0x03
    3128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	f8 01       	movw	r30, r16
    3132:	80 83       	st	Z, r24
    3134:	de 01       	movw	r26, r28
    3136:	a7 5b       	subi	r26, 0xB7	; 183
    3138:	bf 4f       	sbci	r27, 0xFF	; 255
    313a:	fe 01       	movw	r30, r28
    313c:	e8 5a       	subi	r30, 0xA8	; 168
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	80 81       	ld	r24, Z
    3142:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3144:	fe 01       	movw	r30, r28
    3146:	e7 5b       	subi	r30, 0xB7	; 183
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	80 81       	ld	r24, Z
    314c:	8a 95       	dec	r24
    314e:	f1 f7       	brne	.-4      	; 0x314c <LCD_data_read+0x312>
    3150:	fe 01       	movw	r30, r28
    3152:	e7 5b       	subi	r30, 0xB7	; 183
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	80 83       	st	Z, r24
	_delay_us(10);
	Dio_write_PORT(E, LOW);
    3158:	8b e0       	ldi	r24, 0x0B	; 11
    315a:	60 e0       	ldi	r22, 0x00	; 0
    315c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    3160:	fe 01       	movw	r30, r28
    3162:	eb 5b       	subi	r30, 0xBB	; 187
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	a8 e4       	ldi	r26, 0x48	; 72
    316c:	b3 e4       	ldi	r27, 0x43	; 67
    316e:	80 83       	st	Z, r24
    3170:	91 83       	std	Z+1, r25	; 0x01
    3172:	a2 83       	std	Z+2, r26	; 0x02
    3174:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3176:	8e 01       	movw	r16, r28
    3178:	0f 5b       	subi	r16, 0xBF	; 191
    317a:	1f 4f       	sbci	r17, 0xFF	; 255
    317c:	fe 01       	movw	r30, r28
    317e:	eb 5b       	subi	r30, 0xBB	; 187
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	60 81       	ld	r22, Z
    3184:	71 81       	ldd	r23, Z+1	; 0x01
    3186:	82 81       	ldd	r24, Z+2	; 0x02
    3188:	93 81       	ldd	r25, Z+3	; 0x03
    318a:	2b ea       	ldi	r18, 0xAB	; 171
    318c:	3a ea       	ldi	r19, 0xAA	; 170
    318e:	4a ea       	ldi	r20, 0xAA	; 170
    3190:	50 e4       	ldi	r21, 0x40	; 64
    3192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	f8 01       	movw	r30, r16
    319c:	80 83       	st	Z, r24
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	a2 83       	std	Z+2, r26	; 0x02
    31a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31a4:	fe 01       	movw	r30, r28
    31a6:	ef 5b       	subi	r30, 0xBF	; 191
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	60 81       	ld	r22, Z
    31ac:	71 81       	ldd	r23, Z+1	; 0x01
    31ae:	82 81       	ldd	r24, Z+2	; 0x02
    31b0:	93 81       	ldd	r25, Z+3	; 0x03
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e8       	ldi	r20, 0x80	; 128
    31b8:	5f e3       	ldi	r21, 0x3F	; 63
    31ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31be:	88 23       	and	r24, r24
    31c0:	34 f4       	brge	.+12     	; 0x31ce <LCD_data_read+0x394>
		__ticks = 1;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	fe 01       	movw	r30, r28
    31c6:	e0 5c       	subi	r30, 0xC0	; 192
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	80 83       	st	Z, r24
    31cc:	9d c0       	rjmp	.+314    	; 0x3308 <LCD_data_read+0x4ce>
	else if (__tmp > 255)
    31ce:	fe 01       	movw	r30, r28
    31d0:	ef 5b       	subi	r30, 0xBF	; 191
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	60 81       	ld	r22, Z
    31d6:	71 81       	ldd	r23, Z+1	; 0x01
    31d8:	82 81       	ldd	r24, Z+2	; 0x02
    31da:	93 81       	ldd	r25, Z+3	; 0x03
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	4f e7       	ldi	r20, 0x7F	; 127
    31e2:	53 e4       	ldi	r21, 0x43	; 67
    31e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31e8:	18 16       	cp	r1, r24
    31ea:	0c f0       	brlt	.+2      	; 0x31ee <LCD_data_read+0x3b4>
    31ec:	7e c0       	rjmp	.+252    	; 0x32ea <LCD_data_read+0x4b0>
	{
		_delay_ms(__us / 1000.0);
    31ee:	fe 01       	movw	r30, r28
    31f0:	eb 5b       	subi	r30, 0xBB	; 187
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	60 81       	ld	r22, Z
    31f6:	71 81       	ldd	r23, Z+1	; 0x01
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	93 81       	ldd	r25, Z+3	; 0x03
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	4a e7       	ldi	r20, 0x7A	; 122
    3202:	54 e4       	ldi	r21, 0x44	; 68
    3204:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	8c af       	std	Y+60, r24	; 0x3c
    320e:	9d af       	std	Y+61, r25	; 0x3d
    3210:	ae af       	std	Y+62, r26	; 0x3e
    3212:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3214:	6c ad       	ldd	r22, Y+60	; 0x3c
    3216:	7d ad       	ldd	r23, Y+61	; 0x3d
    3218:	8e ad       	ldd	r24, Y+62	; 0x3e
    321a:	9f ad       	ldd	r25, Y+63	; 0x3f
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	4a e7       	ldi	r20, 0x7A	; 122
    3222:	55 e4       	ldi	r21, 0x45	; 69
    3224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	88 af       	std	Y+56, r24	; 0x38
    322e:	99 af       	std	Y+57, r25	; 0x39
    3230:	aa af       	std	Y+58, r26	; 0x3a
    3232:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3234:	68 ad       	ldd	r22, Y+56	; 0x38
    3236:	79 ad       	ldd	r23, Y+57	; 0x39
    3238:	8a ad       	ldd	r24, Y+58	; 0x3a
    323a:	9b ad       	ldd	r25, Y+59	; 0x3b
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e8       	ldi	r20, 0x80	; 128
    3242:	5f e3       	ldi	r21, 0x3F	; 63
    3244:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3248:	88 23       	and	r24, r24
    324a:	2c f4       	brge	.+10     	; 0x3256 <LCD_data_read+0x41c>
		__ticks = 1;
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	9f ab       	std	Y+55, r25	; 0x37
    3252:	8e ab       	std	Y+54, r24	; 0x36
    3254:	3f c0       	rjmp	.+126    	; 0x32d4 <LCD_data_read+0x49a>
	else if (__tmp > 65535)
    3256:	68 ad       	ldd	r22, Y+56	; 0x38
    3258:	79 ad       	ldd	r23, Y+57	; 0x39
    325a:	8a ad       	ldd	r24, Y+58	; 0x3a
    325c:	9b ad       	ldd	r25, Y+59	; 0x3b
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	3f ef       	ldi	r19, 0xFF	; 255
    3262:	4f e7       	ldi	r20, 0x7F	; 127
    3264:	57 e4       	ldi	r21, 0x47	; 71
    3266:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    326a:	18 16       	cp	r1, r24
    326c:	4c f5       	brge	.+82     	; 0x32c0 <LCD_data_read+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3270:	7d ad       	ldd	r23, Y+61	; 0x3d
    3272:	8e ad       	ldd	r24, Y+62	; 0x3e
    3274:	9f ad       	ldd	r25, Y+63	; 0x3f
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	40 e2       	ldi	r20, 0x20	; 32
    327c:	51 e4       	ldi	r21, 0x41	; 65
    327e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	bc 01       	movw	r22, r24
    3288:	cd 01       	movw	r24, r26
    328a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	9f ab       	std	Y+55, r25	; 0x37
    3294:	8e ab       	std	Y+54, r24	; 0x36
    3296:	0f c0       	rjmp	.+30     	; 0x32b6 <LCD_data_read+0x47c>
    3298:	80 e9       	ldi	r24, 0x90	; 144
    329a:	91 e0       	ldi	r25, 0x01	; 1
    329c:	9d ab       	std	Y+53, r25	; 0x35
    329e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32a0:	8c a9       	ldd	r24, Y+52	; 0x34
    32a2:	9d a9       	ldd	r25, Y+53	; 0x35
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <LCD_data_read+0x46a>
    32a8:	9d ab       	std	Y+53, r25	; 0x35
    32aa:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ac:	8e a9       	ldd	r24, Y+54	; 0x36
    32ae:	9f a9       	ldd	r25, Y+55	; 0x37
    32b0:	01 97       	sbiw	r24, 0x01	; 1
    32b2:	9f ab       	std	Y+55, r25	; 0x37
    32b4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b6:	8e a9       	ldd	r24, Y+54	; 0x36
    32b8:	9f a9       	ldd	r25, Y+55	; 0x37
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	69 f7       	brne	.-38     	; 0x3298 <LCD_data_read+0x45e>
    32be:	2d c0       	rjmp	.+90     	; 0x331a <LCD_data_read+0x4e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c0:	68 ad       	ldd	r22, Y+56	; 0x38
    32c2:	79 ad       	ldd	r23, Y+57	; 0x39
    32c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    32c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9f ab       	std	Y+55, r25	; 0x37
    32d2:	8e ab       	std	Y+54, r24	; 0x36
    32d4:	8e a9       	ldd	r24, Y+54	; 0x36
    32d6:	9f a9       	ldd	r25, Y+55	; 0x37
    32d8:	9b ab       	std	Y+51, r25	; 0x33
    32da:	8a ab       	std	Y+50, r24	; 0x32
    32dc:	8a a9       	ldd	r24, Y+50	; 0x32
    32de:	9b a9       	ldd	r25, Y+51	; 0x33
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	f1 f7       	brne	.-4      	; 0x32e0 <LCD_data_read+0x4a6>
    32e4:	9b ab       	std	Y+51, r25	; 0x33
    32e6:	8a ab       	std	Y+50, r24	; 0x32
    32e8:	18 c0       	rjmp	.+48     	; 0x331a <LCD_data_read+0x4e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32ea:	fe 01       	movw	r30, r28
    32ec:	ef 5b       	subi	r30, 0xBF	; 191
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	fe 01       	movw	r30, r28
    3302:	e0 5c       	subi	r30, 0xC0	; 192
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	80 83       	st	Z, r24
    3308:	fe 01       	movw	r30, r28
    330a:	e0 5c       	subi	r30, 0xC0	; 192
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 81       	ld	r24, Z
    3310:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3312:	89 a9       	ldd	r24, Y+49	; 0x31
    3314:	8a 95       	dec	r24
    3316:	f1 f7       	brne	.-4      	; 0x3314 <LCD_data_read+0x4da>
    3318:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	Dio_write_PORT(D4, GET_BIT(data, 0));
    331a:	fe 01       	movw	r30, r28
    331c:	ef 59       	subi	r30, 0x9F	; 159
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	80 81       	ld	r24, Z
    3322:	98 2f       	mov	r25, r24
    3324:	91 70       	andi	r25, 0x01	; 1
    3326:	84 e0       	ldi	r24, 0x04	; 4
    3328:	69 2f       	mov	r22, r25
    332a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(data, 1));
    332e:	fe 01       	movw	r30, r28
    3330:	ef 59       	subi	r30, 0x9F	; 159
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	80 81       	ld	r24, Z
    3336:	91 81       	ldd	r25, Z+1	; 0x01
    3338:	96 95       	lsr	r25
    333a:	87 95       	ror	r24
    333c:	98 2f       	mov	r25, r24
    333e:	91 70       	andi	r25, 0x01	; 1
    3340:	85 e0       	ldi	r24, 0x05	; 5
    3342:	69 2f       	mov	r22, r25
    3344:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(data, 2));
    3348:	fe 01       	movw	r30, r28
    334a:	ef 59       	subi	r30, 0x9F	; 159
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 81       	ld	r24, Z
    3350:	91 81       	ldd	r25, Z+1	; 0x01
    3352:	96 95       	lsr	r25
    3354:	87 95       	ror	r24
    3356:	96 95       	lsr	r25
    3358:	87 95       	ror	r24
    335a:	98 2f       	mov	r25, r24
    335c:	91 70       	andi	r25, 0x01	; 1
    335e:	86 e0       	ldi	r24, 0x06	; 6
    3360:	69 2f       	mov	r22, r25
    3362:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D7, GET_BIT(data, 3));
    3366:	fe 01       	movw	r30, r28
    3368:	ef 59       	subi	r30, 0x9F	; 159
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	80 81       	ld	r24, Z
    336e:	91 81       	ldd	r25, Z+1	; 0x01
    3370:	96 95       	lsr	r25
    3372:	87 95       	ror	r24
    3374:	96 95       	lsr	r25
    3376:	87 95       	ror	r24
    3378:	96 95       	lsr	r25
    337a:	87 95       	ror	r24
    337c:	98 2f       	mov	r25, r24
    337e:	91 70       	andi	r25, 0x01	; 1
    3380:	87 e0       	ldi	r24, 0x07	; 7
    3382:	69 2f       	mov	r22, r25
    3384:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>

	Dio_write_PORT(E, HIGH);
    3388:	8b e0       	ldi	r24, 0x0B	; 11
    338a:	61 e0       	ldi	r22, 0x01	; 1
    338c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	a0 e2       	ldi	r26, 0x20	; 32
    3396:	b1 e4       	ldi	r27, 0x41	; 65
    3398:	8d a7       	std	Y+45, r24	; 0x2d
    339a:	9e a7       	std	Y+46, r25	; 0x2e
    339c:	af a7       	std	Y+47, r26	; 0x2f
    339e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33a0:	6d a5       	ldd	r22, Y+45	; 0x2d
    33a2:	7e a5       	ldd	r23, Y+46	; 0x2e
    33a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    33a6:	98 a9       	ldd	r25, Y+48	; 0x30
    33a8:	2b ea       	ldi	r18, 0xAB	; 171
    33aa:	3a ea       	ldi	r19, 0xAA	; 170
    33ac:	4a ea       	ldi	r20, 0xAA	; 170
    33ae:	50 e4       	ldi	r21, 0x40	; 64
    33b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	89 a7       	std	Y+41, r24	; 0x29
    33ba:	9a a7       	std	Y+42, r25	; 0x2a
    33bc:	ab a7       	std	Y+43, r26	; 0x2b
    33be:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    33c0:	69 a5       	ldd	r22, Y+41	; 0x29
    33c2:	7a a5       	ldd	r23, Y+42	; 0x2a
    33c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    33c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	40 e8       	ldi	r20, 0x80	; 128
    33ce:	5f e3       	ldi	r21, 0x3F	; 63
    33d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33d4:	88 23       	and	r24, r24
    33d6:	1c f4       	brge	.+6      	; 0x33de <LCD_data_read+0x5a4>
		__ticks = 1;
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	88 a7       	std	Y+40, r24	; 0x28
    33dc:	91 c0       	rjmp	.+290    	; 0x3500 <LCD_data_read+0x6c6>
	else if (__tmp > 255)
    33de:	69 a5       	ldd	r22, Y+41	; 0x29
    33e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    33e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    33e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	4f e7       	ldi	r20, 0x7F	; 127
    33ec:	53 e4       	ldi	r21, 0x43	; 67
    33ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f2:	18 16       	cp	r1, r24
    33f4:	0c f0       	brlt	.+2      	; 0x33f8 <LCD_data_read+0x5be>
    33f6:	7b c0       	rjmp	.+246    	; 0x34ee <LCD_data_read+0x6b4>
	{
		_delay_ms(__us / 1000.0);
    33f8:	6d a5       	ldd	r22, Y+45	; 0x2d
    33fa:	7e a5       	ldd	r23, Y+46	; 0x2e
    33fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    33fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	4a e7       	ldi	r20, 0x7A	; 122
    3406:	54 e4       	ldi	r21, 0x44	; 68
    3408:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	8c a3       	std	Y+36, r24	; 0x24
    3412:	9d a3       	std	Y+37, r25	; 0x25
    3414:	ae a3       	std	Y+38, r26	; 0x26
    3416:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3418:	6c a1       	ldd	r22, Y+36	; 0x24
    341a:	7d a1       	ldd	r23, Y+37	; 0x25
    341c:	8e a1       	ldd	r24, Y+38	; 0x26
    341e:	9f a1       	ldd	r25, Y+39	; 0x27
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	4a e7       	ldi	r20, 0x7A	; 122
    3426:	55 e4       	ldi	r21, 0x45	; 69
    3428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	88 a3       	std	Y+32, r24	; 0x20
    3432:	99 a3       	std	Y+33, r25	; 0x21
    3434:	aa a3       	std	Y+34, r26	; 0x22
    3436:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3438:	68 a1       	ldd	r22, Y+32	; 0x20
    343a:	79 a1       	ldd	r23, Y+33	; 0x21
    343c:	8a a1       	ldd	r24, Y+34	; 0x22
    343e:	9b a1       	ldd	r25, Y+35	; 0x23
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e8       	ldi	r20, 0x80	; 128
    3446:	5f e3       	ldi	r21, 0x3F	; 63
    3448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    344c:	88 23       	and	r24, r24
    344e:	2c f4       	brge	.+10     	; 0x345a <LCD_data_read+0x620>
		__ticks = 1;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	9f 8f       	std	Y+31, r25	; 0x1f
    3456:	8e 8f       	std	Y+30, r24	; 0x1e
    3458:	3f c0       	rjmp	.+126    	; 0x34d8 <LCD_data_read+0x69e>
	else if (__tmp > 65535)
    345a:	68 a1       	ldd	r22, Y+32	; 0x20
    345c:	79 a1       	ldd	r23, Y+33	; 0x21
    345e:	8a a1       	ldd	r24, Y+34	; 0x22
    3460:	9b a1       	ldd	r25, Y+35	; 0x23
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	3f ef       	ldi	r19, 0xFF	; 255
    3466:	4f e7       	ldi	r20, 0x7F	; 127
    3468:	57 e4       	ldi	r21, 0x47	; 71
    346a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    346e:	18 16       	cp	r1, r24
    3470:	4c f5       	brge	.+82     	; 0x34c4 <LCD_data_read+0x68a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3472:	6c a1       	ldd	r22, Y+36	; 0x24
    3474:	7d a1       	ldd	r23, Y+37	; 0x25
    3476:	8e a1       	ldd	r24, Y+38	; 0x26
    3478:	9f a1       	ldd	r25, Y+39	; 0x27
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	40 e2       	ldi	r20, 0x20	; 32
    3480:	51 e4       	ldi	r21, 0x41	; 65
    3482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	bc 01       	movw	r22, r24
    348c:	cd 01       	movw	r24, r26
    348e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	9f 8f       	std	Y+31, r25	; 0x1f
    3498:	8e 8f       	std	Y+30, r24	; 0x1e
    349a:	0f c0       	rjmp	.+30     	; 0x34ba <LCD_data_read+0x680>
    349c:	80 e9       	ldi	r24, 0x90	; 144
    349e:	91 e0       	ldi	r25, 0x01	; 1
    34a0:	9d 8f       	std	Y+29, r25	; 0x1d
    34a2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	f1 f7       	brne	.-4      	; 0x34a8 <LCD_data_read+0x66e>
    34ac:	9d 8f       	std	Y+29, r25	; 0x1d
    34ae:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	9f 8f       	std	Y+31, r25	; 0x1f
    34b8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34bc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	69 f7       	brne	.-38     	; 0x349c <LCD_data_read+0x662>
    34c2:	24 c0       	rjmp	.+72     	; 0x350c <LCD_data_read+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c4:	68 a1       	ldd	r22, Y+32	; 0x20
    34c6:	79 a1       	ldd	r23, Y+33	; 0x21
    34c8:	8a a1       	ldd	r24, Y+34	; 0x22
    34ca:	9b a1       	ldd	r25, Y+35	; 0x23
    34cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	9f 8f       	std	Y+31, r25	; 0x1f
    34d6:	8e 8f       	std	Y+30, r24	; 0x1e
    34d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34dc:	9b 8f       	std	Y+27, r25	; 0x1b
    34de:	8a 8f       	std	Y+26, r24	; 0x1a
    34e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <LCD_data_read+0x6aa>
    34e8:	9b 8f       	std	Y+27, r25	; 0x1b
    34ea:	8a 8f       	std	Y+26, r24	; 0x1a
    34ec:	0f c0       	rjmp	.+30     	; 0x350c <LCD_data_read+0x6d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34ee:	69 a5       	ldd	r22, Y+41	; 0x29
    34f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    34f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    34f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    34f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	88 a7       	std	Y+40, r24	; 0x28
    3500:	88 a5       	ldd	r24, Y+40	; 0x28
    3502:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3504:	89 8d       	ldd	r24, Y+25	; 0x19
    3506:	8a 95       	dec	r24
    3508:	f1 f7       	brne	.-4      	; 0x3506 <LCD_data_read+0x6cc>
    350a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write_PORT(E, LOW);
    350c:	8b e0       	ldi	r24, 0x0B	; 11
    350e:	60 e0       	ldi	r22, 0x00	; 0
    3510:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	a8 e4       	ldi	r26, 0x48	; 72
    351a:	b3 e4       	ldi	r27, 0x43	; 67
    351c:	8d 8b       	std	Y+21, r24	; 0x15
    351e:	9e 8b       	std	Y+22, r25	; 0x16
    3520:	af 8b       	std	Y+23, r26	; 0x17
    3522:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3524:	6d 89       	ldd	r22, Y+21	; 0x15
    3526:	7e 89       	ldd	r23, Y+22	; 0x16
    3528:	8f 89       	ldd	r24, Y+23	; 0x17
    352a:	98 8d       	ldd	r25, Y+24	; 0x18
    352c:	2b ea       	ldi	r18, 0xAB	; 171
    352e:	3a ea       	ldi	r19, 0xAA	; 170
    3530:	4a ea       	ldi	r20, 0xAA	; 170
    3532:	50 e4       	ldi	r21, 0x40	; 64
    3534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	89 8b       	std	Y+17, r24	; 0x11
    353e:	9a 8b       	std	Y+18, r25	; 0x12
    3540:	ab 8b       	std	Y+19, r26	; 0x13
    3542:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3544:	69 89       	ldd	r22, Y+17	; 0x11
    3546:	7a 89       	ldd	r23, Y+18	; 0x12
    3548:	8b 89       	ldd	r24, Y+19	; 0x13
    354a:	9c 89       	ldd	r25, Y+20	; 0x14
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e8       	ldi	r20, 0x80	; 128
    3552:	5f e3       	ldi	r21, 0x3F	; 63
    3554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3558:	88 23       	and	r24, r24
    355a:	1c f4       	brge	.+6      	; 0x3562 <LCD_data_read+0x728>
		__ticks = 1;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	88 8b       	std	Y+16, r24	; 0x10
    3560:	91 c0       	rjmp	.+290    	; 0x3684 <LCD_data_read+0x84a>
	else if (__tmp > 255)
    3562:	69 89       	ldd	r22, Y+17	; 0x11
    3564:	7a 89       	ldd	r23, Y+18	; 0x12
    3566:	8b 89       	ldd	r24, Y+19	; 0x13
    3568:	9c 89       	ldd	r25, Y+20	; 0x14
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	4f e7       	ldi	r20, 0x7F	; 127
    3570:	53 e4       	ldi	r21, 0x43	; 67
    3572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3576:	18 16       	cp	r1, r24
    3578:	0c f0       	brlt	.+2      	; 0x357c <LCD_data_read+0x742>
    357a:	7b c0       	rjmp	.+246    	; 0x3672 <LCD_data_read+0x838>
	{
		_delay_ms(__us / 1000.0);
    357c:	6d 89       	ldd	r22, Y+21	; 0x15
    357e:	7e 89       	ldd	r23, Y+22	; 0x16
    3580:	8f 89       	ldd	r24, Y+23	; 0x17
    3582:	98 8d       	ldd	r25, Y+24	; 0x18
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	4a e7       	ldi	r20, 0x7A	; 122
    358a:	54 e4       	ldi	r21, 0x44	; 68
    358c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	8c 87       	std	Y+12, r24	; 0x0c
    3596:	9d 87       	std	Y+13, r25	; 0x0d
    3598:	ae 87       	std	Y+14, r26	; 0x0e
    359a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    359c:	6c 85       	ldd	r22, Y+12	; 0x0c
    359e:	7d 85       	ldd	r23, Y+13	; 0x0d
    35a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    35a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	4a e7       	ldi	r20, 0x7A	; 122
    35aa:	55 e4       	ldi	r21, 0x45	; 69
    35ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	88 87       	std	Y+8, r24	; 0x08
    35b6:	99 87       	std	Y+9, r25	; 0x09
    35b8:	aa 87       	std	Y+10, r26	; 0x0a
    35ba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    35bc:	68 85       	ldd	r22, Y+8	; 0x08
    35be:	79 85       	ldd	r23, Y+9	; 0x09
    35c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    35c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e8       	ldi	r20, 0x80	; 128
    35ca:	5f e3       	ldi	r21, 0x3F	; 63
    35cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35d0:	88 23       	and	r24, r24
    35d2:	2c f4       	brge	.+10     	; 0x35de <LCD_data_read+0x7a4>
		__ticks = 1;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	9f 83       	std	Y+7, r25	; 0x07
    35da:	8e 83       	std	Y+6, r24	; 0x06
    35dc:	3f c0       	rjmp	.+126    	; 0x365c <LCD_data_read+0x822>
	else if (__tmp > 65535)
    35de:	68 85       	ldd	r22, Y+8	; 0x08
    35e0:	79 85       	ldd	r23, Y+9	; 0x09
    35e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    35e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	3f ef       	ldi	r19, 0xFF	; 255
    35ea:	4f e7       	ldi	r20, 0x7F	; 127
    35ec:	57 e4       	ldi	r21, 0x47	; 71
    35ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35f2:	18 16       	cp	r1, r24
    35f4:	4c f5       	brge	.+82     	; 0x3648 <LCD_data_read+0x80e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    35f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    35fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    35fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e2       	ldi	r20, 0x20	; 32
    3604:	51 e4       	ldi	r21, 0x41	; 65
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	bc 01       	movw	r22, r24
    3610:	cd 01       	movw	r24, r26
    3612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	9f 83       	std	Y+7, r25	; 0x07
    361c:	8e 83       	std	Y+6, r24	; 0x06
    361e:	0f c0       	rjmp	.+30     	; 0x363e <LCD_data_read+0x804>
    3620:	80 e9       	ldi	r24, 0x90	; 144
    3622:	91 e0       	ldi	r25, 0x01	; 1
    3624:	9d 83       	std	Y+5, r25	; 0x05
    3626:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3628:	8c 81       	ldd	r24, Y+4	; 0x04
    362a:	9d 81       	ldd	r25, Y+5	; 0x05
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	f1 f7       	brne	.-4      	; 0x362c <LCD_data_read+0x7f2>
    3630:	9d 83       	std	Y+5, r25	; 0x05
    3632:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3634:	8e 81       	ldd	r24, Y+6	; 0x06
    3636:	9f 81       	ldd	r25, Y+7	; 0x07
    3638:	01 97       	sbiw	r24, 0x01	; 1
    363a:	9f 83       	std	Y+7, r25	; 0x07
    363c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363e:	8e 81       	ldd	r24, Y+6	; 0x06
    3640:	9f 81       	ldd	r25, Y+7	; 0x07
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	69 f7       	brne	.-38     	; 0x3620 <LCD_data_read+0x7e6>
    3646:	24 c0       	rjmp	.+72     	; 0x3690 <LCD_data_read+0x856>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3648:	68 85       	ldd	r22, Y+8	; 0x08
    364a:	79 85       	ldd	r23, Y+9	; 0x09
    364c:	8a 85       	ldd	r24, Y+10	; 0x0a
    364e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	9f 83       	std	Y+7, r25	; 0x07
    365a:	8e 83       	std	Y+6, r24	; 0x06
    365c:	8e 81       	ldd	r24, Y+6	; 0x06
    365e:	9f 81       	ldd	r25, Y+7	; 0x07
    3660:	9b 83       	std	Y+3, r25	; 0x03
    3662:	8a 83       	std	Y+2, r24	; 0x02
    3664:	8a 81       	ldd	r24, Y+2	; 0x02
    3666:	9b 81       	ldd	r25, Y+3	; 0x03
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <LCD_data_read+0x82e>
    366c:	9b 83       	std	Y+3, r25	; 0x03
    366e:	8a 83       	std	Y+2, r24	; 0x02
    3670:	0f c0       	rjmp	.+30     	; 0x3690 <LCD_data_read+0x856>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3672:	69 89       	ldd	r22, Y+17	; 0x11
    3674:	7a 89       	ldd	r23, Y+18	; 0x12
    3676:	8b 89       	ldd	r24, Y+19	; 0x13
    3678:	9c 89       	ldd	r25, Y+20	; 0x14
    367a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	88 8b       	std	Y+16, r24	; 0x10
    3684:	88 89       	ldd	r24, Y+16	; 0x10
    3686:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	8a 95       	dec	r24
    368c:	f1 f7       	brne	.-4      	; 0x368a <LCD_data_read+0x850>
    368e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    3690:	ce 59       	subi	r28, 0x9E	; 158
    3692:	df 4f       	sbci	r29, 0xFF	; 255
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	1f 91       	pop	r17
    36a4:	0f 91       	pop	r16
    36a6:	08 95       	ret

000036a8 <LCD_Custom_Char>:

void LCD_Custom_Char(void) {
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62

	LCD_cmd(0x40);
    36b0:	80 e4       	ldi	r24, 0x40	; 64
    36b2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_cmd>

	// heart shape:
	LCD_data_write(0b00000);
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00000);
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b01010);
    36c2:	8a e0       	ldi	r24, 0x0A	; 10
    36c4:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b11111);
    36c8:	8f e1       	ldi	r24, 0x1F	; 31
    36ca:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b11111);
    36ce:	8f e1       	ldi	r24, 0x1F	; 31
    36d0:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b01110);
    36d4:	8e e0       	ldi	r24, 0x0E	; 14
    36d6:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00100);
    36da:	84 e0       	ldi	r24, 0x04	; 4
    36dc:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00000);
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    36e2:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>

	//Smile shape:
	LCD_data_write(0b00000);
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b01010);
    36ec:	8a e0       	ldi	r24, 0x0A	; 10
    36ee:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b01010);
    36f2:	8a e0       	ldi	r24, 0x0A	; 10
    36f4:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00000);
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b10001);
    36fe:	81 e1       	ldi	r24, 0x11	; 17
    3700:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b01110);
    3704:	8e e0       	ldi	r24, 0x0E	; 14
    3706:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00000);
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00000);
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>

	//Wink:
	LCD_data_write(0b00000);
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00000);
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00011);
    3722:	83 e0       	ldi	r24, 0x03	; 3
    3724:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b11011);
    3728:	8b e1       	ldi	r24, 0x1B	; 27
    372a:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00000);
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b10001);
    3734:	81 e1       	ldi	r24, 0x11	; 17
    3736:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b01110);
    373a:	8e e0       	ldi	r24, 0x0E	; 14
    373c:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00000);
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>

	//Thumb up:
	LCD_data_write(0b00000);
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00000);
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00011);
    3752:	83 e0       	ldi	r24, 0x03	; 3
    3754:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00011);
    3758:	83 e0       	ldi	r24, 0x03	; 3
    375a:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b00011);
    375e:	83 e0       	ldi	r24, 0x03	; 3
    3760:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b11111);
    3764:	8f e1       	ldi	r24, 0x1F	; 31
    3766:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b11111);
    376a:	8f e1       	ldi	r24, 0x1F	; 31
    376c:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
	LCD_data_write(0b11111);
    3770:	8f e1       	ldi	r24, 0x1F	; 31
    3772:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
}
    3776:	cf 91       	pop	r28
    3778:	df 91       	pop	r29
    377a:	08 95       	ret

0000377c <LCD_GoTo>:

void LCD_GoTo(uint8 column, uint8 row) {
    377c:	df 93       	push	r29
    377e:	cf 93       	push	r28
    3780:	00 d0       	rcall	.+0      	; 0x3782 <LCD_GoTo+0x6>
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
    3786:	89 83       	std	Y+1, r24	; 0x01
    3788:	6a 83       	std	Y+2, r22	; 0x02

	if(column == 0) {
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	88 23       	and	r24, r24
    378e:	29 f4       	brne	.+10     	; 0x379a <LCD_GoTo+0x1e>
		LCD_cmd(0x80 | row);
    3790:	8a 81       	ldd	r24, Y+2	; 0x02
    3792:	80 68       	ori	r24, 0x80	; 128
    3794:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_cmd>
    3798:	07 c0       	rjmp	.+14     	; 0x37a8 <LCD_GoTo+0x2c>
	}else if(column == 1) {
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	81 30       	cpi	r24, 0x01	; 1
    379e:	21 f4       	brne	.+8      	; 0x37a8 <LCD_GoTo+0x2c>
		LCD_cmd(0xC0 | row);
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	80 6c       	ori	r24, 0xC0	; 192
    37a4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_cmd>
	}

}
    37a8:	0f 90       	pop	r0
    37aa:	0f 90       	pop	r0
    37ac:	cf 91       	pop	r28
    37ae:	df 91       	pop	r29
    37b0:	08 95       	ret

000037b2 <LCD_String>:


void LCD_String(uint8 *string) {
    37b2:	df 93       	push	r29
    37b4:	cf 93       	push	r28
    37b6:	cd b7       	in	r28, 0x3d	; 61
    37b8:	de b7       	in	r29, 0x3e	; 62
    37ba:	6c 97       	sbiw	r28, 0x1c	; 28
    37bc:	0f b6       	in	r0, 0x3f	; 63
    37be:	f8 94       	cli
    37c0:	de bf       	out	0x3e, r29	; 62
    37c2:	0f be       	out	0x3f, r0	; 63
    37c4:	cd bf       	out	0x3d, r28	; 61
    37c6:	9c 8f       	std	Y+28, r25	; 0x1c
    37c8:	8b 8f       	std	Y+27, r24	; 0x1b

	for(int i = 0; string[i] != '\0'; i++) {
    37ca:	1a 8e       	std	Y+26, r1	; 0x1a
    37cc:	19 8e       	std	Y+25, r1	; 0x19
    37ce:	cd c0       	rjmp	.+410    	; 0x396a <LCD_String+0x1b8>


		LCD_data_write(string[i]);
    37d0:	29 8d       	ldd	r18, Y+25	; 0x19
    37d2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    37d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37d8:	fc 01       	movw	r30, r24
    37da:	e2 0f       	add	r30, r18
    37dc:	f3 1f       	adc	r31, r19
    37de:	80 81       	ld	r24, Z
    37e0:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_data_write>
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	a8 ec       	ldi	r26, 0xC8	; 200
    37ea:	b2 e4       	ldi	r27, 0x42	; 66
    37ec:	8d 8b       	std	Y+21, r24	; 0x15
    37ee:	9e 8b       	std	Y+22, r25	; 0x16
    37f0:	af 8b       	std	Y+23, r26	; 0x17
    37f2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37f4:	6d 89       	ldd	r22, Y+21	; 0x15
    37f6:	7e 89       	ldd	r23, Y+22	; 0x16
    37f8:	8f 89       	ldd	r24, Y+23	; 0x17
    37fa:	98 8d       	ldd	r25, Y+24	; 0x18
    37fc:	2b ea       	ldi	r18, 0xAB	; 171
    37fe:	3a ea       	ldi	r19, 0xAA	; 170
    3800:	4a ea       	ldi	r20, 0xAA	; 170
    3802:	50 e4       	ldi	r21, 0x40	; 64
    3804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	89 8b       	std	Y+17, r24	; 0x11
    380e:	9a 8b       	std	Y+18, r25	; 0x12
    3810:	ab 8b       	std	Y+19, r26	; 0x13
    3812:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3814:	69 89       	ldd	r22, Y+17	; 0x11
    3816:	7a 89       	ldd	r23, Y+18	; 0x12
    3818:	8b 89       	ldd	r24, Y+19	; 0x13
    381a:	9c 89       	ldd	r25, Y+20	; 0x14
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e8       	ldi	r20, 0x80	; 128
    3822:	5f e3       	ldi	r21, 0x3F	; 63
    3824:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3828:	88 23       	and	r24, r24
    382a:	1c f4       	brge	.+6      	; 0x3832 <LCD_String+0x80>
		__ticks = 1;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	88 8b       	std	Y+16, r24	; 0x10
    3830:	91 c0       	rjmp	.+290    	; 0x3954 <LCD_String+0x1a2>
	else if (__tmp > 255)
    3832:	69 89       	ldd	r22, Y+17	; 0x11
    3834:	7a 89       	ldd	r23, Y+18	; 0x12
    3836:	8b 89       	ldd	r24, Y+19	; 0x13
    3838:	9c 89       	ldd	r25, Y+20	; 0x14
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	4f e7       	ldi	r20, 0x7F	; 127
    3840:	53 e4       	ldi	r21, 0x43	; 67
    3842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3846:	18 16       	cp	r1, r24
    3848:	0c f0       	brlt	.+2      	; 0x384c <LCD_String+0x9a>
    384a:	7b c0       	rjmp	.+246    	; 0x3942 <LCD_String+0x190>
	{
		_delay_ms(__us / 1000.0);
    384c:	6d 89       	ldd	r22, Y+21	; 0x15
    384e:	7e 89       	ldd	r23, Y+22	; 0x16
    3850:	8f 89       	ldd	r24, Y+23	; 0x17
    3852:	98 8d       	ldd	r25, Y+24	; 0x18
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	4a e7       	ldi	r20, 0x7A	; 122
    385a:	54 e4       	ldi	r21, 0x44	; 68
    385c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	8c 87       	std	Y+12, r24	; 0x0c
    3866:	9d 87       	std	Y+13, r25	; 0x0d
    3868:	ae 87       	std	Y+14, r26	; 0x0e
    386a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386c:	6c 85       	ldd	r22, Y+12	; 0x0c
    386e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3870:	8e 85       	ldd	r24, Y+14	; 0x0e
    3872:	9f 85       	ldd	r25, Y+15	; 0x0f
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	4a e7       	ldi	r20, 0x7A	; 122
    387a:	55 e4       	ldi	r21, 0x45	; 69
    387c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	88 87       	std	Y+8, r24	; 0x08
    3886:	99 87       	std	Y+9, r25	; 0x09
    3888:	aa 87       	std	Y+10, r26	; 0x0a
    388a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    388c:	68 85       	ldd	r22, Y+8	; 0x08
    388e:	79 85       	ldd	r23, Y+9	; 0x09
    3890:	8a 85       	ldd	r24, Y+10	; 0x0a
    3892:	9b 85       	ldd	r25, Y+11	; 0x0b
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e8       	ldi	r20, 0x80	; 128
    389a:	5f e3       	ldi	r21, 0x3F	; 63
    389c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38a0:	88 23       	and	r24, r24
    38a2:	2c f4       	brge	.+10     	; 0x38ae <LCD_String+0xfc>
		__ticks = 1;
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	9f 83       	std	Y+7, r25	; 0x07
    38aa:	8e 83       	std	Y+6, r24	; 0x06
    38ac:	3f c0       	rjmp	.+126    	; 0x392c <LCD_String+0x17a>
	else if (__tmp > 65535)
    38ae:	68 85       	ldd	r22, Y+8	; 0x08
    38b0:	79 85       	ldd	r23, Y+9	; 0x09
    38b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    38b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	3f ef       	ldi	r19, 0xFF	; 255
    38ba:	4f e7       	ldi	r20, 0x7F	; 127
    38bc:	57 e4       	ldi	r21, 0x47	; 71
    38be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38c2:	18 16       	cp	r1, r24
    38c4:	4c f5       	brge	.+82     	; 0x3918 <LCD_String+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    38c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    38ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    38cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 e2       	ldi	r20, 0x20	; 32
    38d4:	51 e4       	ldi	r21, 0x41	; 65
    38d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	bc 01       	movw	r22, r24
    38e0:	cd 01       	movw	r24, r26
    38e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	9f 83       	std	Y+7, r25	; 0x07
    38ec:	8e 83       	std	Y+6, r24	; 0x06
    38ee:	0f c0       	rjmp	.+30     	; 0x390e <LCD_String+0x15c>
    38f0:	80 e9       	ldi	r24, 0x90	; 144
    38f2:	91 e0       	ldi	r25, 0x01	; 1
    38f4:	9d 83       	std	Y+5, r25	; 0x05
    38f6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38f8:	8c 81       	ldd	r24, Y+4	; 0x04
    38fa:	9d 81       	ldd	r25, Y+5	; 0x05
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <LCD_String+0x14a>
    3900:	9d 83       	std	Y+5, r25	; 0x05
    3902:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3904:	8e 81       	ldd	r24, Y+6	; 0x06
    3906:	9f 81       	ldd	r25, Y+7	; 0x07
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	9f 83       	std	Y+7, r25	; 0x07
    390c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390e:	8e 81       	ldd	r24, Y+6	; 0x06
    3910:	9f 81       	ldd	r25, Y+7	; 0x07
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	69 f7       	brne	.-38     	; 0x38f0 <LCD_String+0x13e>
    3916:	24 c0       	rjmp	.+72     	; 0x3960 <LCD_String+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3918:	68 85       	ldd	r22, Y+8	; 0x08
    391a:	79 85       	ldd	r23, Y+9	; 0x09
    391c:	8a 85       	ldd	r24, Y+10	; 0x0a
    391e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	9f 83       	std	Y+7, r25	; 0x07
    392a:	8e 83       	std	Y+6, r24	; 0x06
    392c:	8e 81       	ldd	r24, Y+6	; 0x06
    392e:	9f 81       	ldd	r25, Y+7	; 0x07
    3930:	9b 83       	std	Y+3, r25	; 0x03
    3932:	8a 83       	std	Y+2, r24	; 0x02
    3934:	8a 81       	ldd	r24, Y+2	; 0x02
    3936:	9b 81       	ldd	r25, Y+3	; 0x03
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	f1 f7       	brne	.-4      	; 0x3938 <LCD_String+0x186>
    393c:	9b 83       	std	Y+3, r25	; 0x03
    393e:	8a 83       	std	Y+2, r24	; 0x02
    3940:	0f c0       	rjmp	.+30     	; 0x3960 <LCD_String+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3942:	69 89       	ldd	r22, Y+17	; 0x11
    3944:	7a 89       	ldd	r23, Y+18	; 0x12
    3946:	8b 89       	ldd	r24, Y+19	; 0x13
    3948:	9c 89       	ldd	r25, Y+20	; 0x14
    394a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	88 8b       	std	Y+16, r24	; 0x10
    3954:	88 89       	ldd	r24, Y+16	; 0x10
    3956:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3958:	89 81       	ldd	r24, Y+1	; 0x01
    395a:	8a 95       	dec	r24
    395c:	f1 f7       	brne	.-4      	; 0x395a <LCD_String+0x1a8>
    395e:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_String(uint8 *string) {

	for(int i = 0; string[i] != '\0'; i++) {
    3960:	89 8d       	ldd	r24, Y+25	; 0x19
    3962:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3964:	01 96       	adiw	r24, 0x01	; 1
    3966:	9a 8f       	std	Y+26, r25	; 0x1a
    3968:	89 8f       	std	Y+25, r24	; 0x19
    396a:	29 8d       	ldd	r18, Y+25	; 0x19
    396c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    396e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3972:	fc 01       	movw	r30, r24
    3974:	e2 0f       	add	r30, r18
    3976:	f3 1f       	adc	r31, r19
    3978:	80 81       	ld	r24, Z
    397a:	88 23       	and	r24, r24
    397c:	09 f0       	breq	.+2      	; 0x3980 <LCD_String+0x1ce>
    397e:	28 cf       	rjmp	.-432    	; 0x37d0 <LCD_String+0x1e>


		LCD_data_write(string[i]);
		_delay_us(100);
	}
}
    3980:	6c 96       	adiw	r28, 0x1c	; 28
    3982:	0f b6       	in	r0, 0x3f	; 63
    3984:	f8 94       	cli
    3986:	de bf       	out	0x3e, r29	; 62
    3988:	0f be       	out	0x3f, r0	; 63
    398a:	cd bf       	out	0x3d, r28	; 61
    398c:	cf 91       	pop	r28
    398e:	df 91       	pop	r29
    3990:	08 95       	ret

00003992 <CLR_LCD>:

void CLR_LCD() {
    3992:	df 93       	push	r29
    3994:	cf 93       	push	r28
    3996:	cd b7       	in	r28, 0x3d	; 61
    3998:	de b7       	in	r29, 0x3e	; 62
    399a:	2e 97       	sbiw	r28, 0x0e	; 14
    399c:	0f b6       	in	r0, 0x3f	; 63
    399e:	f8 94       	cli
    39a0:	de bf       	out	0x3e, r29	; 62
    39a2:	0f be       	out	0x3f, r0	; 63
    39a4:	cd bf       	out	0x3d, r28	; 61
	LCD_cmd(0x01);
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_cmd>
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	a0 e0       	ldi	r26, 0x00	; 0
    39b2:	b0 e4       	ldi	r27, 0x40	; 64
    39b4:	8b 87       	std	Y+11, r24	; 0x0b
    39b6:	9c 87       	std	Y+12, r25	; 0x0c
    39b8:	ad 87       	std	Y+13, r26	; 0x0d
    39ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    39be:	7c 85       	ldd	r23, Y+12	; 0x0c
    39c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    39c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	4a e7       	ldi	r20, 0x7A	; 122
    39ca:	55 e4       	ldi	r21, 0x45	; 69
    39cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	8f 83       	std	Y+7, r24	; 0x07
    39d6:	98 87       	std	Y+8, r25	; 0x08
    39d8:	a9 87       	std	Y+9, r26	; 0x09
    39da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39dc:	6f 81       	ldd	r22, Y+7	; 0x07
    39de:	78 85       	ldd	r23, Y+8	; 0x08
    39e0:	89 85       	ldd	r24, Y+9	; 0x09
    39e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	40 e8       	ldi	r20, 0x80	; 128
    39ea:	5f e3       	ldi	r21, 0x3F	; 63
    39ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39f0:	88 23       	and	r24, r24
    39f2:	2c f4       	brge	.+10     	; 0x39fe <CLR_LCD+0x6c>
		__ticks = 1;
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	9e 83       	std	Y+6, r25	; 0x06
    39fa:	8d 83       	std	Y+5, r24	; 0x05
    39fc:	3f c0       	rjmp	.+126    	; 0x3a7c <CLR_LCD+0xea>
	else if (__tmp > 65535)
    39fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3a00:	78 85       	ldd	r23, Y+8	; 0x08
    3a02:	89 85       	ldd	r24, Y+9	; 0x09
    3a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	3f ef       	ldi	r19, 0xFF	; 255
    3a0a:	4f e7       	ldi	r20, 0x7F	; 127
    3a0c:	57 e4       	ldi	r21, 0x47	; 71
    3a0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a12:	18 16       	cp	r1, r24
    3a14:	4c f5       	brge	.+82     	; 0x3a68 <CLR_LCD+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	40 e2       	ldi	r20, 0x20	; 32
    3a24:	51 e4       	ldi	r21, 0x41	; 65
    3a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	bc 01       	movw	r22, r24
    3a30:	cd 01       	movw	r24, r26
    3a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	9e 83       	std	Y+6, r25	; 0x06
    3a3c:	8d 83       	std	Y+5, r24	; 0x05
    3a3e:	0f c0       	rjmp	.+30     	; 0x3a5e <CLR_LCD+0xcc>
    3a40:	80 e9       	ldi	r24, 0x90	; 144
    3a42:	91 e0       	ldi	r25, 0x01	; 1
    3a44:	9c 83       	std	Y+4, r25	; 0x04
    3a46:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a48:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	f1 f7       	brne	.-4      	; 0x3a4c <CLR_LCD+0xba>
    3a50:	9c 83       	std	Y+4, r25	; 0x04
    3a52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a54:	8d 81       	ldd	r24, Y+5	; 0x05
    3a56:	9e 81       	ldd	r25, Y+6	; 0x06
    3a58:	01 97       	sbiw	r24, 0x01	; 1
    3a5a:	9e 83       	std	Y+6, r25	; 0x06
    3a5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a60:	9e 81       	ldd	r25, Y+6	; 0x06
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	69 f7       	brne	.-38     	; 0x3a40 <CLR_LCD+0xae>
    3a66:	14 c0       	rjmp	.+40     	; 0x3a90 <CLR_LCD+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a68:	6f 81       	ldd	r22, Y+7	; 0x07
    3a6a:	78 85       	ldd	r23, Y+8	; 0x08
    3a6c:	89 85       	ldd	r24, Y+9	; 0x09
    3a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	9e 83       	std	Y+6, r25	; 0x06
    3a7a:	8d 83       	std	Y+5, r24	; 0x05
    3a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a80:	9a 83       	std	Y+2, r25	; 0x02
    3a82:	89 83       	std	Y+1, r24	; 0x01
    3a84:	89 81       	ldd	r24, Y+1	; 0x01
    3a86:	9a 81       	ldd	r25, Y+2	; 0x02
    3a88:	01 97       	sbiw	r24, 0x01	; 1
    3a8a:	f1 f7       	brne	.-4      	; 0x3a88 <CLR_LCD+0xf6>
    3a8c:	9a 83       	std	Y+2, r25	; 0x02
    3a8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_cmd(0x80);
    3a90:	80 e8       	ldi	r24, 0x80	; 128
    3a92:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_cmd>
}
    3a96:	2e 96       	adiw	r28, 0x0e	; 14
    3a98:	0f b6       	in	r0, 0x3f	; 63
    3a9a:	f8 94       	cli
    3a9c:	de bf       	out	0x3e, r29	; 62
    3a9e:	0f be       	out	0x3f, r0	; 63
    3aa0:	cd bf       	out	0x3d, r28	; 61
    3aa2:	cf 91       	pop	r28
    3aa4:	df 91       	pop	r29
    3aa6:	08 95       	ret

00003aa8 <Rtrn_Home_LCD>:

void Rtrn_Home_LCD() {
    3aa8:	df 93       	push	r29
    3aaa:	cf 93       	push	r28
    3aac:	cd b7       	in	r28, 0x3d	; 61
    3aae:	de b7       	in	r29, 0x3e	; 62
    3ab0:	68 97       	sbiw	r28, 0x18	; 24
    3ab2:	0f b6       	in	r0, 0x3f	; 63
    3ab4:	f8 94       	cli
    3ab6:	de bf       	out	0x3e, r29	; 62
    3ab8:	0f be       	out	0x3f, r0	; 63
    3aba:	cd bf       	out	0x3d, r28	; 61
	LCD_cmd(0x02);
    3abc:	82 e0       	ldi	r24, 0x02	; 2
    3abe:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_cmd>
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	a0 e0       	ldi	r26, 0x00	; 0
    3ac8:	b0 e4       	ldi	r27, 0x40	; 64
    3aca:	8d 8b       	std	Y+21, r24	; 0x15
    3acc:	9e 8b       	std	Y+22, r25	; 0x16
    3ace:	af 8b       	std	Y+23, r26	; 0x17
    3ad0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ad2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ad4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ad6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ad8:	98 8d       	ldd	r25, Y+24	; 0x18
    3ada:	2b ea       	ldi	r18, 0xAB	; 171
    3adc:	3a ea       	ldi	r19, 0xAA	; 170
    3ade:	4a ea       	ldi	r20, 0xAA	; 170
    3ae0:	50 e4       	ldi	r21, 0x40	; 64
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	89 8b       	std	Y+17, r24	; 0x11
    3aec:	9a 8b       	std	Y+18, r25	; 0x12
    3aee:	ab 8b       	std	Y+19, r26	; 0x13
    3af0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3af2:	69 89       	ldd	r22, Y+17	; 0x11
    3af4:	7a 89       	ldd	r23, Y+18	; 0x12
    3af6:	8b 89       	ldd	r24, Y+19	; 0x13
    3af8:	9c 89       	ldd	r25, Y+20	; 0x14
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	40 e8       	ldi	r20, 0x80	; 128
    3b00:	5f e3       	ldi	r21, 0x3F	; 63
    3b02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b06:	88 23       	and	r24, r24
    3b08:	1c f4       	brge	.+6      	; 0x3b10 <Rtrn_Home_LCD+0x68>
		__ticks = 1;
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	88 8b       	std	Y+16, r24	; 0x10
    3b0e:	91 c0       	rjmp	.+290    	; 0x3c32 <Rtrn_Home_LCD+0x18a>
	else if (__tmp > 255)
    3b10:	69 89       	ldd	r22, Y+17	; 0x11
    3b12:	7a 89       	ldd	r23, Y+18	; 0x12
    3b14:	8b 89       	ldd	r24, Y+19	; 0x13
    3b16:	9c 89       	ldd	r25, Y+20	; 0x14
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	4f e7       	ldi	r20, 0x7F	; 127
    3b1e:	53 e4       	ldi	r21, 0x43	; 67
    3b20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b24:	18 16       	cp	r1, r24
    3b26:	0c f0       	brlt	.+2      	; 0x3b2a <Rtrn_Home_LCD+0x82>
    3b28:	7b c0       	rjmp	.+246    	; 0x3c20 <Rtrn_Home_LCD+0x178>
	{
		_delay_ms(__us / 1000.0);
    3b2a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b2c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b30:	98 8d       	ldd	r25, Y+24	; 0x18
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	4a e7       	ldi	r20, 0x7A	; 122
    3b38:	54 e4       	ldi	r21, 0x44	; 68
    3b3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	8c 87       	std	Y+12, r24	; 0x0c
    3b44:	9d 87       	std	Y+13, r25	; 0x0d
    3b46:	ae 87       	std	Y+14, r26	; 0x0e
    3b48:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b4a:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b4c:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b50:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	4a e7       	ldi	r20, 0x7A	; 122
    3b58:	55 e4       	ldi	r21, 0x45	; 69
    3b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5e:	dc 01       	movw	r26, r24
    3b60:	cb 01       	movw	r24, r22
    3b62:	88 87       	std	Y+8, r24	; 0x08
    3b64:	99 87       	std	Y+9, r25	; 0x09
    3b66:	aa 87       	std	Y+10, r26	; 0x0a
    3b68:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3b6a:	68 85       	ldd	r22, Y+8	; 0x08
    3b6c:	79 85       	ldd	r23, Y+9	; 0x09
    3b6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b70:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	40 e8       	ldi	r20, 0x80	; 128
    3b78:	5f e3       	ldi	r21, 0x3F	; 63
    3b7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b7e:	88 23       	and	r24, r24
    3b80:	2c f4       	brge	.+10     	; 0x3b8c <Rtrn_Home_LCD+0xe4>
		__ticks = 1;
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	9f 83       	std	Y+7, r25	; 0x07
    3b88:	8e 83       	std	Y+6, r24	; 0x06
    3b8a:	3f c0       	rjmp	.+126    	; 0x3c0a <Rtrn_Home_LCD+0x162>
	else if (__tmp > 65535)
    3b8c:	68 85       	ldd	r22, Y+8	; 0x08
    3b8e:	79 85       	ldd	r23, Y+9	; 0x09
    3b90:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b92:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	3f ef       	ldi	r19, 0xFF	; 255
    3b98:	4f e7       	ldi	r20, 0x7F	; 127
    3b9a:	57 e4       	ldi	r21, 0x47	; 71
    3b9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ba0:	18 16       	cp	r1, r24
    3ba2:	4c f5       	brge	.+82     	; 0x3bf6 <Rtrn_Home_LCD+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba4:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ba6:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ba8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3baa:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bac:	20 e0       	ldi	r18, 0x00	; 0
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	40 e2       	ldi	r20, 0x20	; 32
    3bb2:	51 e4       	ldi	r21, 0x41	; 65
    3bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	bc 01       	movw	r22, r24
    3bbe:	cd 01       	movw	r24, r26
    3bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	9f 83       	std	Y+7, r25	; 0x07
    3bca:	8e 83       	std	Y+6, r24	; 0x06
    3bcc:	0f c0       	rjmp	.+30     	; 0x3bec <Rtrn_Home_LCD+0x144>
    3bce:	80 e9       	ldi	r24, 0x90	; 144
    3bd0:	91 e0       	ldi	r25, 0x01	; 1
    3bd2:	9d 83       	std	Y+5, r25	; 0x05
    3bd4:	8c 83       	std	Y+4, r24	; 0x04
    3bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3bd8:	9d 81       	ldd	r25, Y+5	; 0x05
    3bda:	01 97       	sbiw	r24, 0x01	; 1
    3bdc:	f1 f7       	brne	.-4      	; 0x3bda <Rtrn_Home_LCD+0x132>
    3bde:	9d 83       	std	Y+5, r25	; 0x05
    3be0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3be2:	8e 81       	ldd	r24, Y+6	; 0x06
    3be4:	9f 81       	ldd	r25, Y+7	; 0x07
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	9f 83       	std	Y+7, r25	; 0x07
    3bea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bec:	8e 81       	ldd	r24, Y+6	; 0x06
    3bee:	9f 81       	ldd	r25, Y+7	; 0x07
    3bf0:	00 97       	sbiw	r24, 0x00	; 0
    3bf2:	69 f7       	brne	.-38     	; 0x3bce <Rtrn_Home_LCD+0x126>
    3bf4:	24 c0       	rjmp	.+72     	; 0x3c3e <Rtrn_Home_LCD+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf6:	68 85       	ldd	r22, Y+8	; 0x08
    3bf8:	79 85       	ldd	r23, Y+9	; 0x09
    3bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bfc:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	9f 83       	std	Y+7, r25	; 0x07
    3c08:	8e 83       	std	Y+6, r24	; 0x06
    3c0a:	8e 81       	ldd	r24, Y+6	; 0x06
    3c0c:	9f 81       	ldd	r25, Y+7	; 0x07
    3c0e:	9b 83       	std	Y+3, r25	; 0x03
    3c10:	8a 83       	std	Y+2, r24	; 0x02
    3c12:	8a 81       	ldd	r24, Y+2	; 0x02
    3c14:	9b 81       	ldd	r25, Y+3	; 0x03
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	f1 f7       	brne	.-4      	; 0x3c16 <Rtrn_Home_LCD+0x16e>
    3c1a:	9b 83       	std	Y+3, r25	; 0x03
    3c1c:	8a 83       	std	Y+2, r24	; 0x02
    3c1e:	0f c0       	rjmp	.+30     	; 0x3c3e <Rtrn_Home_LCD+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c20:	69 89       	ldd	r22, Y+17	; 0x11
    3c22:	7a 89       	ldd	r23, Y+18	; 0x12
    3c24:	8b 89       	ldd	r24, Y+19	; 0x13
    3c26:	9c 89       	ldd	r25, Y+20	; 0x14
    3c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22
    3c30:	88 8b       	std	Y+16, r24	; 0x10
    3c32:	88 89       	ldd	r24, Y+16	; 0x10
    3c34:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	8a 95       	dec	r24
    3c3a:	f1 f7       	brne	.-4      	; 0x3c38 <Rtrn_Home_LCD+0x190>
    3c3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
}
    3c3e:	68 96       	adiw	r28, 0x18	; 24
    3c40:	0f b6       	in	r0, 0x3f	; 63
    3c42:	f8 94       	cli
    3c44:	de bf       	out	0x3e, r29	; 62
    3c46:	0f be       	out	0x3f, r0	; 63
    3c48:	cd bf       	out	0x3d, r28	; 61
    3c4a:	cf 91       	pop	r28
    3c4c:	df 91       	pop	r29
    3c4e:	08 95       	ret

00003c50 <Sev_Seg_write>:

#include "7_Segma.h"

const uint8 Sev_Segment[10] = {0,1,2,3,4,5,6,7,8,9};

void Sev_Seg_write(uint8 num) {
    3c50:	df 93       	push	r29
    3c52:	cf 93       	push	r28
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	6f 97       	sbiw	r28, 0x1f	; 31
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	f8 94       	cli
    3c5e:	de bf       	out	0x3e, r29	; 62
    3c60:	0f be       	out	0x3f, r0	; 63
    3c62:	cd bf       	out	0x3d, r28	; 61
    3c64:	8f 8f       	std	Y+31, r24	; 0x1f

	uint8 Firstno = num%10;
    3c66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c68:	9a e0       	ldi	r25, 0x0A	; 10
    3c6a:	69 2f       	mov	r22, r25
    3c6c:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <__udivmodqi4>
    3c70:	89 2f       	mov	r24, r25
    3c72:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 Secondno = num/10;
    3c74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c76:	9a e0       	ldi	r25, 0x0A	; 10
    3c78:	69 2f       	mov	r22, r25
    3c7a:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <__udivmodqi4>
    3c7e:	8d 8f       	std	Y+29, r24	; 0x1d

	for(num = 0; num < 100; num++) {
    3c80:	1f 8e       	std	Y+31, r1	; 0x1f
    3c82:	3b c1       	rjmp	.+630    	; 0x3efa <Sev_Seg_write+0x2aa>
	Dio_write_PORT(Rw, LOW);
    3c84:	8a e0       	ldi	r24, 0x0A	; 10
    3c86:	60 e0       	ldi	r22, 0x00	; 0
    3c88:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(Rs, HIGH);
    3c8c:	89 e0       	ldi	r24, 0x09	; 9
    3c8e:	61 e0       	ldi	r22, 0x01	; 1
    3c90:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>

	Dio_write_PORT(D4, GET_BIT(Firstno, 0));
    3c94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c96:	98 2f       	mov	r25, r24
    3c98:	91 70       	andi	r25, 0x01	; 1
    3c9a:	84 e0       	ldi	r24, 0x04	; 4
    3c9c:	69 2f       	mov	r22, r25
    3c9e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(Firstno, 1));
    3ca2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ca4:	86 95       	lsr	r24
    3ca6:	98 2f       	mov	r25, r24
    3ca8:	91 70       	andi	r25, 0x01	; 1
    3caa:	85 e0       	ldi	r24, 0x05	; 5
    3cac:	69 2f       	mov	r22, r25
    3cae:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(Firstno, 2));
    3cb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3cb4:	86 95       	lsr	r24
    3cb6:	86 95       	lsr	r24
    3cb8:	98 2f       	mov	r25, r24
    3cba:	91 70       	andi	r25, 0x01	; 1
    3cbc:	86 e0       	ldi	r24, 0x06	; 6
    3cbe:	69 2f       	mov	r22, r25
    3cc0:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D7, GET_BIT(Firstno, 3));
    3cc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3cc6:	86 95       	lsr	r24
    3cc8:	86 95       	lsr	r24
    3cca:	86 95       	lsr	r24
    3ccc:	98 2f       	mov	r25, r24
    3cce:	91 70       	andi	r25, 0x01	; 1
    3cd0:	87 e0       	ldi	r24, 0x07	; 7
    3cd2:	69 2f       	mov	r22, r25
    3cd4:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	a0 e2       	ldi	r26, 0x20	; 32
    3cde:	b1 e4       	ldi	r27, 0x41	; 65
    3ce0:	89 8f       	std	Y+25, r24	; 0x19
    3ce2:	9a 8f       	std	Y+26, r25	; 0x1a
    3ce4:	ab 8f       	std	Y+27, r26	; 0x1b
    3ce6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce8:	69 8d       	ldd	r22, Y+25	; 0x19
    3cea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	4a e7       	ldi	r20, 0x7A	; 122
    3cf6:	55 e4       	ldi	r21, 0x45	; 69
    3cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	8d 8b       	std	Y+21, r24	; 0x15
    3d02:	9e 8b       	std	Y+22, r25	; 0x16
    3d04:	af 8b       	std	Y+23, r26	; 0x17
    3d06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d08:	6d 89       	ldd	r22, Y+21	; 0x15
    3d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	40 e8       	ldi	r20, 0x80	; 128
    3d16:	5f e3       	ldi	r21, 0x3F	; 63
    3d18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d1c:	88 23       	and	r24, r24
    3d1e:	2c f4       	brge	.+10     	; 0x3d2a <Sev_Seg_write+0xda>
		__ticks = 1;
    3d20:	81 e0       	ldi	r24, 0x01	; 1
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	9c 8b       	std	Y+20, r25	; 0x14
    3d26:	8b 8b       	std	Y+19, r24	; 0x13
    3d28:	3f c0       	rjmp	.+126    	; 0x3da8 <Sev_Seg_write+0x158>
	else if (__tmp > 65535)
    3d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    3d30:	98 8d       	ldd	r25, Y+24	; 0x18
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	3f ef       	ldi	r19, 0xFF	; 255
    3d36:	4f e7       	ldi	r20, 0x7F	; 127
    3d38:	57 e4       	ldi	r21, 0x47	; 71
    3d3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d3e:	18 16       	cp	r1, r24
    3d40:	4c f5       	brge	.+82     	; 0x3d94 <Sev_Seg_write+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d42:	69 8d       	ldd	r22, Y+25	; 0x19
    3d44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	40 e2       	ldi	r20, 0x20	; 32
    3d50:	51 e4       	ldi	r21, 0x41	; 65
    3d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	bc 01       	movw	r22, r24
    3d5c:	cd 01       	movw	r24, r26
    3d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d62:	dc 01       	movw	r26, r24
    3d64:	cb 01       	movw	r24, r22
    3d66:	9c 8b       	std	Y+20, r25	; 0x14
    3d68:	8b 8b       	std	Y+19, r24	; 0x13
    3d6a:	0f c0       	rjmp	.+30     	; 0x3d8a <Sev_Seg_write+0x13a>
    3d6c:	80 e9       	ldi	r24, 0x90	; 144
    3d6e:	91 e0       	ldi	r25, 0x01	; 1
    3d70:	9a 8b       	std	Y+18, r25	; 0x12
    3d72:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d74:	89 89       	ldd	r24, Y+17	; 0x11
    3d76:	9a 89       	ldd	r25, Y+18	; 0x12
    3d78:	01 97       	sbiw	r24, 0x01	; 1
    3d7a:	f1 f7       	brne	.-4      	; 0x3d78 <Sev_Seg_write+0x128>
    3d7c:	9a 8b       	std	Y+18, r25	; 0x12
    3d7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d80:	8b 89       	ldd	r24, Y+19	; 0x13
    3d82:	9c 89       	ldd	r25, Y+20	; 0x14
    3d84:	01 97       	sbiw	r24, 0x01	; 1
    3d86:	9c 8b       	std	Y+20, r25	; 0x14
    3d88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d8e:	00 97       	sbiw	r24, 0x00	; 0
    3d90:	69 f7       	brne	.-38     	; 0x3d6c <Sev_Seg_write+0x11c>
    3d92:	14 c0       	rjmp	.+40     	; 0x3dbc <Sev_Seg_write+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d94:	6d 89       	ldd	r22, Y+21	; 0x15
    3d96:	7e 89       	ldd	r23, Y+22	; 0x16
    3d98:	8f 89       	ldd	r24, Y+23	; 0x17
    3d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	9c 8b       	std	Y+20, r25	; 0x14
    3da6:	8b 8b       	std	Y+19, r24	; 0x13
    3da8:	8b 89       	ldd	r24, Y+19	; 0x13
    3daa:	9c 89       	ldd	r25, Y+20	; 0x14
    3dac:	98 8b       	std	Y+16, r25	; 0x10
    3dae:	8f 87       	std	Y+15, r24	; 0x0f
    3db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3db2:	98 89       	ldd	r25, Y+16	; 0x10
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	f1 f7       	brne	.-4      	; 0x3db4 <Sev_Seg_write+0x164>
    3db8:	98 8b       	std	Y+16, r25	; 0x10
    3dba:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(10);

	Dio_write_PORT(Rs, LOW);
    3dbc:	89 e0       	ldi	r24, 0x09	; 9
    3dbe:	60 e0       	ldi	r22, 0x00	; 0
    3dc0:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(Rw, HIGH);
    3dc4:	8a e0       	ldi	r24, 0x0A	; 10
    3dc6:	61 e0       	ldi	r22, 0x01	; 1
    3dc8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>

	Dio_write_PORT(D4, GET_BIT(Secondno, 0));
    3dcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dce:	98 2f       	mov	r25, r24
    3dd0:	91 70       	andi	r25, 0x01	; 1
    3dd2:	84 e0       	ldi	r24, 0x04	; 4
    3dd4:	69 2f       	mov	r22, r25
    3dd6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(Secondno, 1));
    3dda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ddc:	86 95       	lsr	r24
    3dde:	98 2f       	mov	r25, r24
    3de0:	91 70       	andi	r25, 0x01	; 1
    3de2:	85 e0       	ldi	r24, 0x05	; 5
    3de4:	69 2f       	mov	r22, r25
    3de6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(Secondno, 2));
    3dea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dec:	86 95       	lsr	r24
    3dee:	86 95       	lsr	r24
    3df0:	98 2f       	mov	r25, r24
    3df2:	91 70       	andi	r25, 0x01	; 1
    3df4:	86 e0       	ldi	r24, 0x06	; 6
    3df6:	69 2f       	mov	r22, r25
    3df8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(D7, GET_BIT(Secondno, 3));
    3dfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dfe:	86 95       	lsr	r24
    3e00:	86 95       	lsr	r24
    3e02:	86 95       	lsr	r24
    3e04:	98 2f       	mov	r25, r24
    3e06:	91 70       	andi	r25, 0x01	; 1
    3e08:	87 e0       	ldi	r24, 0x07	; 7
    3e0a:	69 2f       	mov	r22, r25
    3e0c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	a0 e2       	ldi	r26, 0x20	; 32
    3e16:	b1 e4       	ldi	r27, 0x41	; 65
    3e18:	8b 87       	std	Y+11, r24	; 0x0b
    3e1a:	9c 87       	std	Y+12, r25	; 0x0c
    3e1c:	ad 87       	std	Y+13, r26	; 0x0d
    3e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	4a e7       	ldi	r20, 0x7A	; 122
    3e2e:	55 e4       	ldi	r21, 0x45	; 69
    3e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	8f 83       	std	Y+7, r24	; 0x07
    3e3a:	98 87       	std	Y+8, r25	; 0x08
    3e3c:	a9 87       	std	Y+9, r26	; 0x09
    3e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e40:	6f 81       	ldd	r22, Y+7	; 0x07
    3e42:	78 85       	ldd	r23, Y+8	; 0x08
    3e44:	89 85       	ldd	r24, Y+9	; 0x09
    3e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	40 e8       	ldi	r20, 0x80	; 128
    3e4e:	5f e3       	ldi	r21, 0x3F	; 63
    3e50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e54:	88 23       	and	r24, r24
    3e56:	2c f4       	brge	.+10     	; 0x3e62 <Sev_Seg_write+0x212>
		__ticks = 1;
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	9e 83       	std	Y+6, r25	; 0x06
    3e5e:	8d 83       	std	Y+5, r24	; 0x05
    3e60:	3f c0       	rjmp	.+126    	; 0x3ee0 <Sev_Seg_write+0x290>
	else if (__tmp > 65535)
    3e62:	6f 81       	ldd	r22, Y+7	; 0x07
    3e64:	78 85       	ldd	r23, Y+8	; 0x08
    3e66:	89 85       	ldd	r24, Y+9	; 0x09
    3e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	3f ef       	ldi	r19, 0xFF	; 255
    3e6e:	4f e7       	ldi	r20, 0x7F	; 127
    3e70:	57 e4       	ldi	r21, 0x47	; 71
    3e72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e76:	18 16       	cp	r1, r24
    3e78:	4c f5       	brge	.+82     	; 0x3ecc <Sev_Seg_write+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	40 e2       	ldi	r20, 0x20	; 32
    3e88:	51 e4       	ldi	r21, 0x41	; 65
    3e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	bc 01       	movw	r22, r24
    3e94:	cd 01       	movw	r24, r26
    3e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	9e 83       	std	Y+6, r25	; 0x06
    3ea0:	8d 83       	std	Y+5, r24	; 0x05
    3ea2:	0f c0       	rjmp	.+30     	; 0x3ec2 <Sev_Seg_write+0x272>
    3ea4:	80 e9       	ldi	r24, 0x90	; 144
    3ea6:	91 e0       	ldi	r25, 0x01	; 1
    3ea8:	9c 83       	std	Y+4, r25	; 0x04
    3eaa:	8b 83       	std	Y+3, r24	; 0x03
    3eac:	8b 81       	ldd	r24, Y+3	; 0x03
    3eae:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	f1 f7       	brne	.-4      	; 0x3eb0 <Sev_Seg_write+0x260>
    3eb4:	9c 83       	std	Y+4, r25	; 0x04
    3eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eba:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebc:	01 97       	sbiw	r24, 0x01	; 1
    3ebe:	9e 83       	std	Y+6, r25	; 0x06
    3ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec6:	00 97       	sbiw	r24, 0x00	; 0
    3ec8:	69 f7       	brne	.-38     	; 0x3ea4 <Sev_Seg_write+0x254>
    3eca:	14 c0       	rjmp	.+40     	; 0x3ef4 <Sev_Seg_write+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    3ece:	78 85       	ldd	r23, Y+8	; 0x08
    3ed0:	89 85       	ldd	r24, Y+9	; 0x09
    3ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	9e 83       	std	Y+6, r25	; 0x06
    3ede:	8d 83       	std	Y+5, r24	; 0x05
    3ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee4:	9a 83       	std	Y+2, r25	; 0x02
    3ee6:	89 83       	std	Y+1, r24	; 0x01
    3ee8:	89 81       	ldd	r24, Y+1	; 0x01
    3eea:	9a 81       	ldd	r25, Y+2	; 0x02
    3eec:	01 97       	sbiw	r24, 0x01	; 1
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <Sev_Seg_write+0x29c>
    3ef0:	9a 83       	std	Y+2, r25	; 0x02
    3ef2:	89 83       	std	Y+1, r24	; 0x01
void Sev_Seg_write(uint8 num) {

	uint8 Firstno = num%10;
	uint8 Secondno = num/10;

	for(num = 0; num < 100; num++) {
    3ef4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ef6:	8f 5f       	subi	r24, 0xFF	; 255
    3ef8:	8f 8f       	std	Y+31, r24	; 0x1f
    3efa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3efc:	84 36       	cpi	r24, 0x64	; 100
    3efe:	08 f4       	brcc	.+2      	; 0x3f02 <Sev_Seg_write+0x2b2>
    3f00:	c1 ce       	rjmp	.-638    	; 0x3c84 <Sev_Seg_write+0x34>
	Dio_write_PORT(D6, GET_BIT(Secondno, 2));
	Dio_write_PORT(D7, GET_BIT(Secondno, 3));

	_delay_ms(10);
	}
}
    3f02:	6f 96       	adiw	r28, 0x1f	; 31
    3f04:	0f b6       	in	r0, 0x3f	; 63
    3f06:	f8 94       	cli
    3f08:	de bf       	out	0x3e, r29	; 62
    3f0a:	0f be       	out	0x3f, r0	; 63
    3f0c:	cd bf       	out	0x3d, r28	; 61
    3f0e:	cf 91       	pop	r28
    3f10:	df 91       	pop	r29
    3f12:	08 95       	ret

00003f14 <Test_7_Segment>:

void Test_7_Segment() {
    3f14:	df 93       	push	r29
    3f16:	cf 93       	push	r28
    3f18:	cd b7       	in	r28, 0x3d	; 61
    3f1a:	de b7       	in	r29, 0x3e	; 62
    3f1c:	60 97       	sbiw	r28, 0x10	; 16
    3f1e:	0f b6       	in	r0, 0x3f	; 63
    3f20:	f8 94       	cli
    3f22:	de bf       	out	0x3e, r29	; 62
    3f24:	0f be       	out	0x3f, r0	; 63
    3f26:	cd bf       	out	0x3d, r28	; 61

	for(int i = 0; i <10; i++) {
    3f28:	18 8a       	std	Y+16, r1	; 0x10
    3f2a:	1f 86       	std	Y+15, r1	; 0x0f
    3f2c:	7f c0       	rjmp	.+254    	; 0x402c <Test_7_Segment+0x118>
		Sev_Seg_write(Sev_Segment[i]);
    3f2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f30:	98 89       	ldd	r25, Y+16	; 0x10
    3f32:	fc 01       	movw	r30, r24
    3f34:	e8 56       	subi	r30, 0x68	; 104
    3f36:	ff 4f       	sbci	r31, 0xFF	; 255
    3f38:	80 81       	ld	r24, Z
    3f3a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <Sev_Seg_write>
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	aa e7       	ldi	r26, 0x7A	; 122
    3f44:	b4 e4       	ldi	r27, 0x44	; 68
    3f46:	8b 87       	std	Y+11, r24	; 0x0b
    3f48:	9c 87       	std	Y+12, r25	; 0x0c
    3f4a:	ad 87       	std	Y+13, r26	; 0x0d
    3f4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	4a e7       	ldi	r20, 0x7A	; 122
    3f5c:	55 e4       	ldi	r21, 0x45	; 69
    3f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	8f 83       	std	Y+7, r24	; 0x07
    3f68:	98 87       	std	Y+8, r25	; 0x08
    3f6a:	a9 87       	std	Y+9, r26	; 0x09
    3f6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f70:	78 85       	ldd	r23, Y+8	; 0x08
    3f72:	89 85       	ldd	r24, Y+9	; 0x09
    3f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e8       	ldi	r20, 0x80	; 128
    3f7c:	5f e3       	ldi	r21, 0x3F	; 63
    3f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f82:	88 23       	and	r24, r24
    3f84:	2c f4       	brge	.+10     	; 0x3f90 <Test_7_Segment+0x7c>
		__ticks = 1;
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	9e 83       	std	Y+6, r25	; 0x06
    3f8c:	8d 83       	std	Y+5, r24	; 0x05
    3f8e:	3f c0       	rjmp	.+126    	; 0x400e <Test_7_Segment+0xfa>
	else if (__tmp > 65535)
    3f90:	6f 81       	ldd	r22, Y+7	; 0x07
    3f92:	78 85       	ldd	r23, Y+8	; 0x08
    3f94:	89 85       	ldd	r24, Y+9	; 0x09
    3f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	3f ef       	ldi	r19, 0xFF	; 255
    3f9c:	4f e7       	ldi	r20, 0x7F	; 127
    3f9e:	57 e4       	ldi	r21, 0x47	; 71
    3fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fa4:	18 16       	cp	r1, r24
    3fa6:	4c f5       	brge	.+82     	; 0x3ffa <Test_7_Segment+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 e2       	ldi	r20, 0x20	; 32
    3fb6:	51 e4       	ldi	r21, 0x41	; 65
    3fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	bc 01       	movw	r22, r24
    3fc2:	cd 01       	movw	r24, r26
    3fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	9e 83       	std	Y+6, r25	; 0x06
    3fce:	8d 83       	std	Y+5, r24	; 0x05
    3fd0:	0f c0       	rjmp	.+30     	; 0x3ff0 <Test_7_Segment+0xdc>
    3fd2:	80 e9       	ldi	r24, 0x90	; 144
    3fd4:	91 e0       	ldi	r25, 0x01	; 1
    3fd6:	9c 83       	std	Y+4, r25	; 0x04
    3fd8:	8b 83       	std	Y+3, r24	; 0x03
    3fda:	8b 81       	ldd	r24, Y+3	; 0x03
    3fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	f1 f7       	brne	.-4      	; 0x3fde <Test_7_Segment+0xca>
    3fe2:	9c 83       	std	Y+4, r25	; 0x04
    3fe4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fea:	01 97       	sbiw	r24, 0x01	; 1
    3fec:	9e 83       	std	Y+6, r25	; 0x06
    3fee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff4:	00 97       	sbiw	r24, 0x00	; 0
    3ff6:	69 f7       	brne	.-38     	; 0x3fd2 <Test_7_Segment+0xbe>
    3ff8:	14 c0       	rjmp	.+40     	; 0x4022 <Test_7_Segment+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    3ffc:	78 85       	ldd	r23, Y+8	; 0x08
    3ffe:	89 85       	ldd	r24, Y+9	; 0x09
    4000:	9a 85       	ldd	r25, Y+10	; 0x0a
    4002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	9e 83       	std	Y+6, r25	; 0x06
    400c:	8d 83       	std	Y+5, r24	; 0x05
    400e:	8d 81       	ldd	r24, Y+5	; 0x05
    4010:	9e 81       	ldd	r25, Y+6	; 0x06
    4012:	9a 83       	std	Y+2, r25	; 0x02
    4014:	89 83       	std	Y+1, r24	; 0x01
    4016:	89 81       	ldd	r24, Y+1	; 0x01
    4018:	9a 81       	ldd	r25, Y+2	; 0x02
    401a:	01 97       	sbiw	r24, 0x01	; 1
    401c:	f1 f7       	brne	.-4      	; 0x401a <Test_7_Segment+0x106>
    401e:	9a 83       	std	Y+2, r25	; 0x02
    4020:	89 83       	std	Y+1, r24	; 0x01
	}
}

void Test_7_Segment() {

	for(int i = 0; i <10; i++) {
    4022:	8f 85       	ldd	r24, Y+15	; 0x0f
    4024:	98 89       	ldd	r25, Y+16	; 0x10
    4026:	01 96       	adiw	r24, 0x01	; 1
    4028:	98 8b       	std	Y+16, r25	; 0x10
    402a:	8f 87       	std	Y+15, r24	; 0x0f
    402c:	8f 85       	ldd	r24, Y+15	; 0x0f
    402e:	98 89       	ldd	r25, Y+16	; 0x10
    4030:	8a 30       	cpi	r24, 0x0A	; 10
    4032:	91 05       	cpc	r25, r1
    4034:	0c f4       	brge	.+2      	; 0x4038 <Test_7_Segment+0x124>
    4036:	7b cf       	rjmp	.-266    	; 0x3f2e <Test_7_Segment+0x1a>
		Sev_Seg_write(Sev_Segment[i]);
		_delay_ms(1000);
	}
}
    4038:	60 96       	adiw	r28, 0x10	; 16
    403a:	0f b6       	in	r0, 0x3f	; 63
    403c:	f8 94       	cli
    403e:	de bf       	out	0x3e, r29	; 62
    4040:	0f be       	out	0x3f, r0	; 63
    4042:	cd bf       	out	0x3d, r28	; 61
    4044:	cf 91       	pop	r28
    4046:	df 91       	pop	r29
    4048:	08 95       	ret

0000404a <Turn_All_OFF>:
#include "MCAL/USART/USART.h"
#include "BIT_MATH.h"
#include "STD_Types.h"

// Func. To Turn all Devices OFF
void Turn_All_OFF() {
    404a:	df 93       	push	r29
    404c:	cf 93       	push	r28
    404e:	cd b7       	in	r28, 0x3d	; 61
    4050:	de b7       	in	r29, 0x3e	; 62

	Dio_write_PORT(LED_0, LOW);
    4052:	82 e1       	ldi	r24, 0x12	; 18
    4054:	60 e0       	ldi	r22, 0x00	; 0
    4056:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(LED_1, LOW);
    405a:	87 e1       	ldi	r24, 0x17	; 23
    405c:	60 e0       	ldi	r22, 0x00	; 0
    405e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
	Dio_write_PORT(LED_2, LOW);
    4062:	8b e1       	ldi	r24, 0x1B	; 27
    4064:	60 e0       	ldi	r22, 0x00	; 0
    4066:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Dio_write_PORT>
}
    406a:	cf 91       	pop	r28
    406c:	df 91       	pop	r29
    406e:	08 95       	ret

00004070 <main>:

int main() {
    4070:	df 93       	push	r29
    4072:	cf 93       	push	r28
    4074:	cd b7       	in	r28, 0x3d	; 61
    4076:	de b7       	in	r29, 0x3e	; 62
    4078:	2f 97       	sbiw	r28, 0x0f	; 15
    407a:	0f b6       	in	r0, 0x3f	; 63
    407c:	f8 94       	cli
    407e:	de bf       	out	0x3e, r29	; 62
    4080:	0f be       	out	0x3f, r0	; 63
    4082:	cd bf       	out	0x3d, r28	; 61

	// I/O DDRs/PORTS/PINS Initialization.
	Dio_init();
    4084:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <Dio_init>
	// SPI_SLAVE_Communication_Protocol_Intializtaion.
	SPI_SLAVE_INIT();
    4088:	0e 94 b2 06 	call	0xd64	; 0xd64 <SPI_SLAVE_INIT>
	// External Interrupt Initialization.
	XTRN_INT_init();
    408c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <XTRN_INT_init>
    4090:	80 e0       	ldi	r24, 0x00	; 0
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	a0 e2       	ldi	r26, 0x20	; 32
    4096:	b1 e4       	ldi	r27, 0x41	; 65
    4098:	8b 87       	std	Y+11, r24	; 0x0b
    409a:	9c 87       	std	Y+12, r25	; 0x0c
    409c:	ad 87       	std	Y+13, r26	; 0x0d
    409e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    40a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    40a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    40a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	4a e7       	ldi	r20, 0x7A	; 122
    40ae:	55 e4       	ldi	r21, 0x45	; 69
    40b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	8f 83       	std	Y+7, r24	; 0x07
    40ba:	98 87       	std	Y+8, r25	; 0x08
    40bc:	a9 87       	std	Y+9, r26	; 0x09
    40be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40c0:	6f 81       	ldd	r22, Y+7	; 0x07
    40c2:	78 85       	ldd	r23, Y+8	; 0x08
    40c4:	89 85       	ldd	r24, Y+9	; 0x09
    40c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c8:	20 e0       	ldi	r18, 0x00	; 0
    40ca:	30 e0       	ldi	r19, 0x00	; 0
    40cc:	40 e8       	ldi	r20, 0x80	; 128
    40ce:	5f e3       	ldi	r21, 0x3F	; 63
    40d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40d4:	88 23       	and	r24, r24
    40d6:	2c f4       	brge	.+10     	; 0x40e2 <main+0x72>
		__ticks = 1;
    40d8:	81 e0       	ldi	r24, 0x01	; 1
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	9e 83       	std	Y+6, r25	; 0x06
    40de:	8d 83       	std	Y+5, r24	; 0x05
    40e0:	3f c0       	rjmp	.+126    	; 0x4160 <main+0xf0>
	else if (__tmp > 65535)
    40e2:	6f 81       	ldd	r22, Y+7	; 0x07
    40e4:	78 85       	ldd	r23, Y+8	; 0x08
    40e6:	89 85       	ldd	r24, Y+9	; 0x09
    40e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ea:	20 e0       	ldi	r18, 0x00	; 0
    40ec:	3f ef       	ldi	r19, 0xFF	; 255
    40ee:	4f e7       	ldi	r20, 0x7F	; 127
    40f0:	57 e4       	ldi	r21, 0x47	; 71
    40f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40f6:	18 16       	cp	r1, r24
    40f8:	4c f5       	brge	.+82     	; 0x414c <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    40fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    40fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4100:	9e 85       	ldd	r25, Y+14	; 0x0e
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	40 e2       	ldi	r20, 0x20	; 32
    4108:	51 e4       	ldi	r21, 0x41	; 65
    410a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	bc 01       	movw	r22, r24
    4114:	cd 01       	movw	r24, r26
    4116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    411a:	dc 01       	movw	r26, r24
    411c:	cb 01       	movw	r24, r22
    411e:	9e 83       	std	Y+6, r25	; 0x06
    4120:	8d 83       	std	Y+5, r24	; 0x05
    4122:	0f c0       	rjmp	.+30     	; 0x4142 <main+0xd2>
    4124:	80 e9       	ldi	r24, 0x90	; 144
    4126:	91 e0       	ldi	r25, 0x01	; 1
    4128:	9c 83       	std	Y+4, r25	; 0x04
    412a:	8b 83       	std	Y+3, r24	; 0x03
    412c:	8b 81       	ldd	r24, Y+3	; 0x03
    412e:	9c 81       	ldd	r25, Y+4	; 0x04
    4130:	01 97       	sbiw	r24, 0x01	; 1
    4132:	f1 f7       	brne	.-4      	; 0x4130 <main+0xc0>
    4134:	9c 83       	std	Y+4, r25	; 0x04
    4136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4138:	8d 81       	ldd	r24, Y+5	; 0x05
    413a:	9e 81       	ldd	r25, Y+6	; 0x06
    413c:	01 97       	sbiw	r24, 0x01	; 1
    413e:	9e 83       	std	Y+6, r25	; 0x06
    4140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4142:	8d 81       	ldd	r24, Y+5	; 0x05
    4144:	9e 81       	ldd	r25, Y+6	; 0x06
    4146:	00 97       	sbiw	r24, 0x00	; 0
    4148:	69 f7       	brne	.-38     	; 0x4124 <main+0xb4>
    414a:	14 c0       	rjmp	.+40     	; 0x4174 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    414c:	6f 81       	ldd	r22, Y+7	; 0x07
    414e:	78 85       	ldd	r23, Y+8	; 0x08
    4150:	89 85       	ldd	r24, Y+9	; 0x09
    4152:	9a 85       	ldd	r25, Y+10	; 0x0a
    4154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4158:	dc 01       	movw	r26, r24
    415a:	cb 01       	movw	r24, r22
    415c:	9e 83       	std	Y+6, r25	; 0x06
    415e:	8d 83       	std	Y+5, r24	; 0x05
    4160:	8d 81       	ldd	r24, Y+5	; 0x05
    4162:	9e 81       	ldd	r25, Y+6	; 0x06
    4164:	9a 83       	std	Y+2, r25	; 0x02
    4166:	89 83       	std	Y+1, r24	; 0x01
    4168:	89 81       	ldd	r24, Y+1	; 0x01
    416a:	9a 81       	ldd	r25, Y+2	; 0x02
    416c:	01 97       	sbiw	r24, 0x01	; 1
    416e:	f1 f7       	brne	.-4      	; 0x416c <main+0xfc>
    4170:	9a 83       	std	Y+2, r25	; 0x02
    4172:	89 83       	std	Y+1, r24	; 0x01

	while (1) {

		_delay_ms(10);
		uint8 x = SPI_SLV_RECEV();
    4174:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <SPI_SLV_RECEV>
    4178:	8f 87       	std	Y+15, r24	; 0x0f

		if (x == '1') {					// Toggling 1st Device.
    417a:	8f 85       	ldd	r24, Y+15	; 0x0f
    417c:	81 33       	cpi	r24, 0x31	; 49
    417e:	21 f4       	brne	.+8      	; 0x4188 <main+0x118>
			Dio_Toggle_Channel(LED_0);
    4180:	82 e1       	ldi	r24, 0x12	; 18
    4182:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <Dio_Toggle_Channel>
    4186:	84 cf       	rjmp	.-248    	; 0x4090 <main+0x20>
		} else if (x == '2') {			// Toggling 2nd Device.
    4188:	8f 85       	ldd	r24, Y+15	; 0x0f
    418a:	82 33       	cpi	r24, 0x32	; 50
    418c:	21 f4       	brne	.+8      	; 0x4196 <main+0x126>
			Dio_Toggle_Channel(LED_1);
    418e:	87 e1       	ldi	r24, 0x17	; 23
    4190:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <Dio_Toggle_Channel>
    4194:	7d cf       	rjmp	.-262    	; 0x4090 <main+0x20>
		} else if (x == '3') {			// Toggling 3rd Device.
    4196:	8f 85       	ldd	r24, Y+15	; 0x0f
    4198:	83 33       	cpi	r24, 0x33	; 51
    419a:	21 f4       	brne	.+8      	; 0x41a4 <main+0x134>
			Dio_Toggle_Channel(LED_2);
    419c:	8b e1       	ldi	r24, 0x1B	; 27
    419e:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <Dio_Toggle_Channel>
    41a2:	76 cf       	rjmp	.-276    	; 0x4090 <main+0x20>
		} else if (x == '0') {			// Switch All Devices OFF.
    41a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41a6:	80 33       	cpi	r24, 0x30	; 48
    41a8:	09 f0       	breq	.+2      	; 0x41ac <main+0x13c>
    41aa:	72 cf       	rjmp	.-284    	; 0x4090 <main+0x20>
			Turn_All_OFF();
    41ac:	0e 94 25 20 	call	0x404a	; 0x404a <Turn_All_OFF>
    41b0:	6f cf       	rjmp	.-290    	; 0x4090 <main+0x20>

000041b2 <__udivmodqi4>:
    41b2:	99 1b       	sub	r25, r25
    41b4:	79 e0       	ldi	r23, 0x09	; 9
    41b6:	04 c0       	rjmp	.+8      	; 0x41c0 <__udivmodqi4_ep>

000041b8 <__udivmodqi4_loop>:
    41b8:	99 1f       	adc	r25, r25
    41ba:	96 17       	cp	r25, r22
    41bc:	08 f0       	brcs	.+2      	; 0x41c0 <__udivmodqi4_ep>
    41be:	96 1b       	sub	r25, r22

000041c0 <__udivmodqi4_ep>:
    41c0:	88 1f       	adc	r24, r24
    41c2:	7a 95       	dec	r23
    41c4:	c9 f7       	brne	.-14     	; 0x41b8 <__udivmodqi4_loop>
    41c6:	80 95       	com	r24
    41c8:	08 95       	ret

000041ca <__prologue_saves__>:
    41ca:	2f 92       	push	r2
    41cc:	3f 92       	push	r3
    41ce:	4f 92       	push	r4
    41d0:	5f 92       	push	r5
    41d2:	6f 92       	push	r6
    41d4:	7f 92       	push	r7
    41d6:	8f 92       	push	r8
    41d8:	9f 92       	push	r9
    41da:	af 92       	push	r10
    41dc:	bf 92       	push	r11
    41de:	cf 92       	push	r12
    41e0:	df 92       	push	r13
    41e2:	ef 92       	push	r14
    41e4:	ff 92       	push	r15
    41e6:	0f 93       	push	r16
    41e8:	1f 93       	push	r17
    41ea:	cf 93       	push	r28
    41ec:	df 93       	push	r29
    41ee:	cd b7       	in	r28, 0x3d	; 61
    41f0:	de b7       	in	r29, 0x3e	; 62
    41f2:	ca 1b       	sub	r28, r26
    41f4:	db 0b       	sbc	r29, r27
    41f6:	0f b6       	in	r0, 0x3f	; 63
    41f8:	f8 94       	cli
    41fa:	de bf       	out	0x3e, r29	; 62
    41fc:	0f be       	out	0x3f, r0	; 63
    41fe:	cd bf       	out	0x3d, r28	; 61
    4200:	09 94       	ijmp

00004202 <__epilogue_restores__>:
    4202:	2a 88       	ldd	r2, Y+18	; 0x12
    4204:	39 88       	ldd	r3, Y+17	; 0x11
    4206:	48 88       	ldd	r4, Y+16	; 0x10
    4208:	5f 84       	ldd	r5, Y+15	; 0x0f
    420a:	6e 84       	ldd	r6, Y+14	; 0x0e
    420c:	7d 84       	ldd	r7, Y+13	; 0x0d
    420e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4210:	9b 84       	ldd	r9, Y+11	; 0x0b
    4212:	aa 84       	ldd	r10, Y+10	; 0x0a
    4214:	b9 84       	ldd	r11, Y+9	; 0x09
    4216:	c8 84       	ldd	r12, Y+8	; 0x08
    4218:	df 80       	ldd	r13, Y+7	; 0x07
    421a:	ee 80       	ldd	r14, Y+6	; 0x06
    421c:	fd 80       	ldd	r15, Y+5	; 0x05
    421e:	0c 81       	ldd	r16, Y+4	; 0x04
    4220:	1b 81       	ldd	r17, Y+3	; 0x03
    4222:	aa 81       	ldd	r26, Y+2	; 0x02
    4224:	b9 81       	ldd	r27, Y+1	; 0x01
    4226:	ce 0f       	add	r28, r30
    4228:	d1 1d       	adc	r29, r1
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	f8 94       	cli
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	cd bf       	out	0x3d, r28	; 61
    4234:	ed 01       	movw	r28, r26
    4236:	08 95       	ret

00004238 <_exit>:
    4238:	f8 94       	cli

0000423a <__stop_program>:
    423a:	ff cf       	rjmp	.-2      	; 0x423a <__stop_program>
