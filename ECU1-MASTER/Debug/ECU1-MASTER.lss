
ECU1-MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  000042b2  00004346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080009a  0080009a  00004380  2**0
                  ALLOC
  3 .stab         00003be8  00000000  00000000  00004380  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001853  00000000  00000000  00007f68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__vector_1>
       8:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__vector_2>
       c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 20 	call	0x4028	; 0x4028 <main>
      8a:	0c 94 57 21 	jmp	0x42ae	; 0x42ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 20 21 	jmp	0x4240	; 0x4240 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2c 21 	jmp	0x4258	; 0x4258 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 48 21 	jmp	0x4290	; 0x4290 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2c 21 	jmp	0x4258	; 0x4258 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 48 21 	jmp	0x4290	; 0x4290 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 20 21 	jmp	0x4240	; 0x4240 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 28 21 	jmp	0x4250	; 0x4250 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 44 21 	jmp	0x4288	; 0x4288 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2c 21 	jmp	0x4258	; 0x4258 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 48 21 	jmp	0x4290	; 0x4290 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2c 21 	jmp	0x4258	; 0x4258 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 48 21 	jmp	0x4290	; 0x4290 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2c 21 	jmp	0x4258	; 0x4258 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 48 21 	jmp	0x4290	; 0x4290 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 30 21 	jmp	0x4260	; 0x4260 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4c 21 	jmp	0x4298	; 0x4298 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <USART_Init>:
 */


#include "USART.h"

void USART_Init(uint32 baud) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <USART_Init+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <USART_Init+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	69 83       	std	Y+1, r22	; 0x01
     cac:	7a 83       	std	Y+2, r23	; 0x02
     cae:	8b 83       	std	Y+3, r24	; 0x03
     cb0:	9c 83       	std	Y+4, r25	; 0x04
/* Set baud rate */
UBRRH = (uint8)(baud>>8);
     cb2:	e0 e4       	ldi	r30, 0x40	; 64
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	ab 81       	ldd	r26, Y+3	; 0x03
     cbc:	bc 81       	ldd	r27, Y+4	; 0x04
     cbe:	89 2f       	mov	r24, r25
     cc0:	9a 2f       	mov	r25, r26
     cc2:	ab 2f       	mov	r26, r27
     cc4:	bb 27       	eor	r27, r27
     cc6:	80 83       	st	Z, r24
UBRRL = (uint8)baud;
     cc8:	e9 e2       	ldi	r30, 0x29	; 41
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	80 83       	st	Z, r24
/* Enable receiver and transmitter */
UCSRB = (1<<RXEN)|(1<<TXEN);
     cd0:	ea e2       	ldi	r30, 0x2A	; 42
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	88 e1       	ldi	r24, 0x18	; 24
     cd6:	80 83       	st	Z, r24
/* Set frame format: 8data, 2stop bit */
UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     cd8:	e0 e4       	ldi	r30, 0x40	; 64
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	8e e8       	ldi	r24, 0x8E	; 142
     cde:	80 83       	st	Z, r24
}
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <USART_Transmit_5_8>:


void USART_Transmit_5_8(uint8 data) {
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	0f 92       	push	r0
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	89 83       	std	Y+1, r24	; 0x01
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) );
     cfa:	eb e2       	ldi	r30, 0x2B	; 43
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	80 72       	andi	r24, 0x20	; 32
     d06:	90 70       	andi	r25, 0x00	; 0
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	b9 f3       	breq	.-18     	; 0xcfa <USART_Transmit_5_8+0xc>
/* Put data into buffer, sends the data */
UDR = data;
     d0c:	ec e2       	ldi	r30, 0x2C	; 44
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	80 83       	st	Z, r24
}
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <USART_Receive>:


uint8 USART_Receive(void) {
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) );
     d24:	eb e2       	ldi	r30, 0x2B	; 43
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	88 23       	and	r24, r24
     d2c:	dc f7       	brge	.-10     	; 0xd24 <USART_Receive+0x8>
/* Get and return received data from buffer */
return UDR;
     d2e:	ec e2       	ldi	r30, 0x2C	; 44
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
}
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <SPI_MASTER_INIT>:
 *      Author: ahmed
 */

#include "SPI.h"

void SPI_MASTER_INIT() {
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62

	// Enable SPI.
#if SPI_STATUS == ENABLE
	SET_BIT(SPCR, SPE);
     d42:	ad e2       	ldi	r26, 0x2D	; 45
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	ed e2       	ldi	r30, 0x2D	; 45
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	80 64       	ori	r24, 0x40	; 64
     d4e:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPE);
#endif

	// Enabling Slave/Master.
#if SPI_MSTR_SLVE_SET == MASTER
	SET_BIT(SPCR, MSTR);
     d50:	ad e2       	ldi	r26, 0x2D	; 45
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ed e2       	ldi	r30, 0x2D	; 45
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	80 61       	ori	r24, 0x10	; 16
     d5c:	8c 93       	st	X, r24
#if SPI_CLOCK_FREQ == FOSC_4
		CLR_BIT(SPCR, SPR0);
		CLR_BIT(SPCR, SPR1);
		CLR_BIT(SPSR, SPI2X);
#elif SPI_CLOCK_FREQ == FOSC_16
		SET_BIT(SPCR, SPR0);
     d5e:	ad e2       	ldi	r26, 0x2D	; 45
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	ed e2       	ldi	r30, 0x2D	; 45
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	81 60       	ori	r24, 0x01	; 1
     d6a:	8c 93       	st	X, r24
		CLR_BIT(SPCR, SPR1);
     d6c:	ad e2       	ldi	r26, 0x2D	; 45
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ed e2       	ldi	r30, 0x2D	; 45
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8d 7f       	andi	r24, 0xFD	; 253
     d78:	8c 93       	st	X, r24
		CLR_BIT(SPSR, SPI2X);
     d7a:	ae e2       	ldi	r26, 0x2E	; 46
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	ee e2       	ldi	r30, 0x2E	; 46
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	8e 7f       	andi	r24, 0xFE	; 254
     d86:	8c 93       	st	X, r24
		break;
	}

	// Plarity Setting.
#if SPI_MODE == LeSampRise_TrSetFall
	CLR_BIT(SPCR, CPHA);
     d88:	ad e2       	ldi	r26, 0x2D	; 45
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ed e2       	ldi	r30, 0x2D	; 45
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8b 7f       	andi	r24, 0xFB	; 251
     d94:	8c 93       	st	X, r24
	CLR_BIT(SPCR, CPOL);
     d96:	ad e2       	ldi	r26, 0x2D	; 45
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	ed e2       	ldi	r30, 0x2D	; 45
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	87 7f       	andi	r24, 0xF7	; 247
     da2:	8c 93       	st	X, r24
	SET_BIT(SPCR, CPOL);
#elif SPI_MODE == LeSetFall_TrSampRise
	SET_BIT(SPCR, CPHA);
	SET_BIT(SPCR, CPOL);
#endif
}
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <SPI_MSTR_TRNSMT>:


void SPI_MSTR_TRNSMT(uint8 data) {
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	0f 92       	push	r0
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
     db6:	ef e2       	ldi	r30, 0x2F	; 47
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	80 83       	st	Z, r24

	while(!(SPSR & (1<<SPIF)));
     dbe:	ee e2       	ldi	r30, 0x2E	; 46
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	88 23       	and	r24, r24
     dc6:	dc f7       	brge	.-10     	; 0xdbe <SPI_MSTR_TRNSMT+0x14>
}
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <XTRN_INT_init>:

void (*p2f0)(void);
void (*p2f1)(void);
void (*p2f2)(void);

void XTRN_INT_init() {
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT0 == ENABLED
	SET_BIT(GICR, INT0);
     dd8:	ab e5       	ldi	r26, 0x5B	; 91
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	eb e5       	ldi	r30, 0x5B	; 91
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	80 64       	ori	r24, 0x40	; 64
     de4:	8c 93       	st	X, r24
	CLR_BIT(MCUCR, ISC01);
#elif EXTI_INT0_EDGE == Both_Edges
	SET_BIT(MCUCR, ISC00);
	CLR_BIT(MCUCR, ISC01);
#elif EXTI_INT0_EDGE == Falling_Edge
	CLR_BIT(MCUCR, ISC00);
     de6:	a5 e5       	ldi	r26, 0x55	; 85
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e5 e5       	ldi	r30, 0x55	; 85
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	8e 7f       	andi	r24, 0xFE	; 254
     df2:	8c 93       	st	X, r24
	SET_BIT(MCUCR, ISC01);
     df4:	a5 e5       	ldi	r26, 0x55	; 85
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e5 e5       	ldi	r30, 0x55	; 85
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	82 60       	ori	r24, 0x02	; 2
     e00:	8c 93       	st	X, r24
#endif

#if EXTI_INT1 == ENABLED
	SET_BIT(GICR, INT1);
#else
	CLR_BIT(GICR, INT1);
     e02:	ab e5       	ldi	r26, 0x5B	; 91
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	eb e5       	ldi	r30, 0x5B	; 91
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	8f 77       	andi	r24, 0x7F	; 127
     e0e:	8c 93       	st	X, r24

#if EXTI_INT1_EDGE == Low_Level
	CLR_BIT(MCUCR, ISC10);
	CLR_BIT(MCUCR, ISC11);
#elif EXTI_INT1_EDGE == Both_Edges
	SET_BIT(MCUCR, ISC10);
     e10:	a5 e5       	ldi	r26, 0x55	; 85
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e5 e5       	ldi	r30, 0x55	; 85
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	84 60       	ori	r24, 0x04	; 4
     e1c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR, ISC11);
     e1e:	a5 e5       	ldi	r26, 0x55	; 85
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e5       	ldi	r30, 0x55	; 85
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	87 7f       	andi	r24, 0xF7	; 247
     e2a:	8c 93       	st	X, r24
#endif

#if EXTI_INT2 == ENABLED
	SET_BIT(GICR, INT2);
#else
	CLR_BIT(GICR, INT2);
     e2c:	ab e5       	ldi	r26, 0x5B	; 91
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	eb e5       	ldi	r30, 0x5B	; 91
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8f 7d       	andi	r24, 0xDF	; 223
     e38:	8c 93       	st	X, r24
#endif

#if EXTI_INT2_EDGE == Falling_Edge
	CLR_BIT(MCUCR, ISC2);
#elif EXTI_INT2_EDGE == Raising_Edge
	SET_BIT(MCUCR, ISC2);
     e3a:	a5 e5       	ldi	r26, 0x55	; 85
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e5       	ldi	r30, 0x55	; 85
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 64       	ori	r24, 0x40	; 64
     e46:	8c 93       	st	X, r24
#endif

	SET_BIT(SREG, 7);
     e48:	af e5       	ldi	r26, 0x5F	; 95
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ef e5       	ldi	r30, 0x5F	; 95
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 68       	ori	r24, 0x80	; 128
     e54:	8c 93       	st	X, r24
}
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <CallBack_INT0>:


void CallBack_INT0(void (*p2func)(void)) {
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	00 d0       	rcall	.+0      	; 0xe62 <CallBack_INT0+0x6>
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
	p2f0 = p2func;
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	90 93 9b 00 	sts	0x009B, r25
     e72:	80 93 9a 00 	sts	0x009A, r24
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <CallBack_INT1>:

void CallBack_INT1(void (*p2func)(void)) {
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	00 d0       	rcall	.+0      	; 0xe86 <CallBack_INT1+0x6>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
	p2f1 = p2func;
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	90 93 9d 00 	sts	0x009D, r25
     e96:	80 93 9c 00 	sts	0x009C, r24
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <CallBack_INT2>:

void CallBack_INT2(void (*p2func)(void)) {
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <CallBack_INT2+0x6>
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
	p2f2 = p2func;
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	90 93 9f 00 	sts	0x009F, r25
     eba:	80 93 9e 00 	sts	0x009E, r24
}
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <__vector_1>:

ISR(INT0_vect) {
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	2f 93       	push	r18
     ed4:	3f 93       	push	r19
     ed6:	4f 93       	push	r20
     ed8:	5f 93       	push	r21
     eda:	6f 93       	push	r22
     edc:	7f 93       	push	r23
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
     ee2:	af 93       	push	r26
     ee4:	bf 93       	push	r27
     ee6:	ef 93       	push	r30
     ee8:	ff 93       	push	r31
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	p2f0();
     ef2:	e0 91 9a 00 	lds	r30, 0x009A
     ef6:	f0 91 9b 00 	lds	r31, 0x009B
     efa:	09 95       	icall
}
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	ff 91       	pop	r31
     f02:	ef 91       	pop	r30
     f04:	bf 91       	pop	r27
     f06:	af 91       	pop	r26
     f08:	9f 91       	pop	r25
     f0a:	8f 91       	pop	r24
     f0c:	7f 91       	pop	r23
     f0e:	6f 91       	pop	r22
     f10:	5f 91       	pop	r21
     f12:	4f 91       	pop	r20
     f14:	3f 91       	pop	r19
     f16:	2f 91       	pop	r18
     f18:	0f 90       	pop	r0
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	0f 90       	pop	r0
     f1e:	1f 90       	pop	r1
     f20:	18 95       	reti

00000f22 <__vector_2>:

ISR(INT1_vect) {
     f22:	1f 92       	push	r1
     f24:	0f 92       	push	r0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
	p2f1();
     f4c:	e0 91 9c 00 	lds	r30, 0x009C
     f50:	f0 91 9d 00 	lds	r31, 0x009D
     f54:	09 95       	icall
}
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	ff 91       	pop	r31
     f5c:	ef 91       	pop	r30
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <__vector_3>:

ISR(INT2_vect) {
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	2f 93       	push	r18
     f88:	3f 93       	push	r19
     f8a:	4f 93       	push	r20
     f8c:	5f 93       	push	r21
     f8e:	6f 93       	push	r22
     f90:	7f 93       	push	r23
     f92:	8f 93       	push	r24
     f94:	9f 93       	push	r25
     f96:	af 93       	push	r26
     f98:	bf 93       	push	r27
     f9a:	ef 93       	push	r30
     f9c:	ff 93       	push	r31
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	p2f2();
     fa6:	e0 91 9e 00 	lds	r30, 0x009E
     faa:	f0 91 9f 00 	lds	r31, 0x009F
     fae:	09 95       	icall
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <Dio_write>:


#include "Dio.h"


void Dio_write(Dio_Channel_Type channel, Dir dir) {
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <Dio_write+0x6>
     fdc:	00 d0       	rcall	.+0      	; 0xfde <Dio_write+0x8>
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <Dio_write+0xa>
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	8b 83       	std	Y+3, r24	; 0x03
     fe6:	6c 83       	std	Y+4, r22	; 0x04

	Dio_PORT_Type port = channel / 8;
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	86 95       	lsr	r24
     fec:	86 95       	lsr	r24
     fee:	86 95       	lsr	r24
     ff0:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Channel_Type pin = channel % 8;
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	87 70       	andi	r24, 0x07	; 7
     ff6:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	3e 83       	std	Y+6, r19	; 0x06
    1000:	2d 83       	std	Y+5, r18	; 0x05
    1002:	8d 81       	ldd	r24, Y+5	; 0x05
    1004:	9e 81       	ldd	r25, Y+6	; 0x06
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <Dio_write+0x38>
    100c:	43 c0       	rjmp	.+134    	; 0x1094 <Dio_write+0xbe>
    100e:	2d 81       	ldd	r18, Y+5	; 0x05
    1010:	3e 81       	ldd	r19, Y+6	; 0x06
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	2c f4       	brge	.+10     	; 0x1022 <Dio_write+0x4c>
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	71 f0       	breq	.+28     	; 0x103c <Dio_write+0x66>
    1020:	bc c0       	rjmp	.+376    	; 0x119a <Dio_write+0x1c4>
    1022:	2d 81       	ldd	r18, Y+5	; 0x05
    1024:	3e 81       	ldd	r19, Y+6	; 0x06
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <Dio_write+0x58>
    102c:	5f c0       	rjmp	.+190    	; 0x10ec <Dio_write+0x116>
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	83 30       	cpi	r24, 0x03	; 3
    1034:	91 05       	cpc	r25, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <Dio_write+0x64>
    1038:	85 c0       	rjmp	.+266    	; 0x1144 <Dio_write+0x16e>
    103a:	af c0       	rjmp	.+350    	; 0x119a <Dio_write+0x1c4>

	case PORT_A:
		if (dir == OUTPUT) {
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	a1 f4       	brne	.+40     	; 0x106a <Dio_write+0x94>
			SET_BIT(DDRA, pin);
    1042:	aa e3       	ldi	r26, 0x3A	; 58
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	ea e3       	ldi	r30, 0x3A	; 58
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <Dio_write+0x8a>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <Dio_write+0x86>
    1064:	84 2b       	or	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	98 c0       	rjmp	.+304    	; 0x119a <Dio_write+0x1c4>
		} else {
			CLR_BIT(DDRA, pin);
    106a:	aa e3       	ldi	r26, 0x3A	; 58
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ea e3       	ldi	r30, 0x3A	; 58
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <Dio_write+0xb2>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <Dio_write+0xae>
    108c:	80 95       	com	r24
    108e:	84 23       	and	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	83 c0       	rjmp	.+262    	; 0x119a <Dio_write+0x1c4>
		}
		break;

	case PORT_B:
		if (dir == OUTPUT) {
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	a1 f4       	brne	.+40     	; 0x10c2 <Dio_write+0xec>
			SET_BIT(DDRB, pin);
    109a:	a7 e3       	ldi	r26, 0x37	; 55
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e7 e3       	ldi	r30, 0x37	; 55
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <Dio_write+0xe2>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <Dio_write+0xde>
    10bc:	84 2b       	or	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	6c c0       	rjmp	.+216    	; 0x119a <Dio_write+0x1c4>
		} else {
			CLR_BIT(DDRB, pin);
    10c2:	a7 e3       	ldi	r26, 0x37	; 55
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e7 e3       	ldi	r30, 0x37	; 55
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <Dio_write+0x10a>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <Dio_write+0x106>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	57 c0       	rjmp	.+174    	; 0x119a <Dio_write+0x1c4>
		}
			break;

	case PORT_C:
		if (dir == OUTPUT) {
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	a1 f4       	brne	.+40     	; 0x111a <Dio_write+0x144>
			SET_BIT(DDRC, pin);
    10f2:	a4 e3       	ldi	r26, 0x34	; 52
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e4 e3       	ldi	r30, 0x34	; 52
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <Dio_write+0x13a>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <Dio_write+0x136>
    1114:	84 2b       	or	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	40 c0       	rjmp	.+128    	; 0x119a <Dio_write+0x1c4>
		} else {
			CLR_BIT(DDRC, pin);
    111a:	a4 e3       	ldi	r26, 0x34	; 52
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e4 e3       	ldi	r30, 0x34	; 52
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <Dio_write+0x162>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <Dio_write+0x15e>
    113c:	80 95       	com	r24
    113e:	84 23       	and	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	2b c0       	rjmp	.+86     	; 0x119a <Dio_write+0x1c4>
		}
			break;

	case PORT_D:
		if (dir == OUTPUT) {
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	a1 f4       	brne	.+40     	; 0x1172 <Dio_write+0x19c>
			SET_BIT(DDRD, pin);
    114a:	a1 e3       	ldi	r26, 0x31	; 49
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e1 e3       	ldi	r30, 0x31	; 49
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <Dio_write+0x192>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <Dio_write+0x18e>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	14 c0       	rjmp	.+40     	; 0x119a <Dio_write+0x1c4>
		} else {
			CLR_BIT(DDRD, pin);
    1172:	a1 e3       	ldi	r26, 0x31	; 49
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e1 e3       	ldi	r30, 0x31	; 49
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <Dio_write+0x1ba>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <Dio_write+0x1b6>
    1194:	80 95       	com	r24
    1196:	84 23       	and	r24, r20
    1198:	8c 93       	st	X, r24
			break;

	default:
		break;
	}
}
    119a:	26 96       	adiw	r28, 0x06	; 6
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <Dio_write_PORT>:


void Dio_write_PORT(Dio_Channel_Type channel, LEVEL level) {
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <Dio_write_PORT+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <Dio_write_PORT+0x8>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <Dio_write_PORT+0xa>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	8b 83       	std	Y+3, r24	; 0x03
    11bc:	6c 83       	std	Y+4, r22	; 0x04

	Dio_PORT_Type port = channel / 8;
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	86 95       	lsr	r24
    11c2:	86 95       	lsr	r24
    11c4:	86 95       	lsr	r24
    11c6:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Channel_Type pin = channel % 8;
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	87 70       	andi	r24, 0x07	; 7
    11cc:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	3e 83       	std	Y+6, r19	; 0x06
    11d6:	2d 83       	std	Y+5, r18	; 0x05
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	91 05       	cpc	r25, r1
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <Dio_write_PORT+0x38>
    11e2:	43 c0       	rjmp	.+134    	; 0x126a <Dio_write_PORT+0xbe>
    11e4:	2d 81       	ldd	r18, Y+5	; 0x05
    11e6:	3e 81       	ldd	r19, Y+6	; 0x06
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <Dio_write_PORT+0x4c>
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	71 f0       	breq	.+28     	; 0x1212 <Dio_write_PORT+0x66>
    11f6:	bc c0       	rjmp	.+376    	; 0x1370 <Dio_write_PORT+0x1c4>
    11f8:	2d 81       	ldd	r18, Y+5	; 0x05
    11fa:	3e 81       	ldd	r19, Y+6	; 0x06
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <Dio_write_PORT+0x58>
    1202:	5f c0       	rjmp	.+190    	; 0x12c2 <Dio_write_PORT+0x116>
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <Dio_write_PORT+0x64>
    120e:	85 c0       	rjmp	.+266    	; 0x131a <Dio_write_PORT+0x16e>
    1210:	af c0       	rjmp	.+350    	; 0x1370 <Dio_write_PORT+0x1c4>

	case PORT_A:
			if (level == HIGH) {
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	a1 f4       	brne	.+40     	; 0x1240 <Dio_write_PORT+0x94>
				SET_BIT(PORTA, pin);
    1218:	ab e3       	ldi	r26, 0x3B	; 59
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <Dio_write_PORT+0x8a>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <Dio_write_PORT+0x86>
    123a:	84 2b       	or	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	98 c0       	rjmp	.+304    	; 0x1370 <Dio_write_PORT+0x1c4>
			} else {
				CLR_BIT(PORTA, pin);
    1240:	ab e3       	ldi	r26, 0x3B	; 59
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	eb e3       	ldi	r30, 0x3B	; 59
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <Dio_write_PORT+0xb2>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <Dio_write_PORT+0xae>
    1262:	80 95       	com	r24
    1264:	84 23       	and	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	83 c0       	rjmp	.+262    	; 0x1370 <Dio_write_PORT+0x1c4>
			}
			break;

		case PORT_B:
			if (level == HIGH) {
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	a1 f4       	brne	.+40     	; 0x1298 <Dio_write_PORT+0xec>
				SET_BIT(PORTB, pin);
    1270:	a8 e3       	ldi	r26, 0x38	; 56
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e8 e3       	ldi	r30, 0x38	; 56
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <Dio_write_PORT+0xe2>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <Dio_write_PORT+0xde>
    1292:	84 2b       	or	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	6c c0       	rjmp	.+216    	; 0x1370 <Dio_write_PORT+0x1c4>
			} else {
				CLR_BIT(PORTB, pin);
    1298:	a8 e3       	ldi	r26, 0x38	; 56
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e8 e3       	ldi	r30, 0x38	; 56
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <Dio_write_PORT+0x10a>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <Dio_write_PORT+0x106>
    12ba:	80 95       	com	r24
    12bc:	84 23       	and	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	57 c0       	rjmp	.+174    	; 0x1370 <Dio_write_PORT+0x1c4>
			}
				break;

		case PORT_C:
			if (level == HIGH) {
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	a1 f4       	brne	.+40     	; 0x12f0 <Dio_write_PORT+0x144>
				SET_BIT(PORTC, pin);
    12c8:	a5 e3       	ldi	r26, 0x35	; 53
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e5 e3       	ldi	r30, 0x35	; 53
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <Dio_write_PORT+0x13a>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <Dio_write_PORT+0x136>
    12ea:	84 2b       	or	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	40 c0       	rjmp	.+128    	; 0x1370 <Dio_write_PORT+0x1c4>
			} else {
				CLR_BIT(PORTC, pin);
    12f0:	a5 e3       	ldi	r26, 0x35	; 53
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e5 e3       	ldi	r30, 0x35	; 53
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <Dio_write_PORT+0x162>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <Dio_write_PORT+0x15e>
    1312:	80 95       	com	r24
    1314:	84 23       	and	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	2b c0       	rjmp	.+86     	; 0x1370 <Dio_write_PORT+0x1c4>
			}
				break;

		case PORT_D:
			if (level == HIGH) {
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	a1 f4       	brne	.+40     	; 0x1348 <Dio_write_PORT+0x19c>
				SET_BIT(PORTD, pin);
    1320:	a2 e3       	ldi	r26, 0x32	; 50
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e2 e3       	ldi	r30, 0x32	; 50
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <Dio_write_PORT+0x192>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <Dio_write_PORT+0x18e>
    1342:	84 2b       	or	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	14 c0       	rjmp	.+40     	; 0x1370 <Dio_write_PORT+0x1c4>
			} else {
				CLR_BIT(PORTD, pin);
    1348:	a2 e3       	ldi	r26, 0x32	; 50
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e2 e3       	ldi	r30, 0x32	; 50
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 2e       	mov	r0, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <Dio_write_PORT+0x1ba>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	0a 94       	dec	r0
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <Dio_write_PORT+0x1b6>
    136a:	80 95       	com	r24
    136c:	84 23       	and	r24, r20
    136e:	8c 93       	st	X, r24
				break;

		default:
			break;
		}
}
    1370:	26 96       	adiw	r28, 0x06	; 6
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <Dio_Read_PORT>:


LEVEL Dio_Read_PORT(Dio_Channel_Type channel) {
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <Dio_Read_PORT+0x6>
    1388:	00 d0       	rcall	.+0      	; 0x138a <Dio_Read_PORT+0x8>
    138a:	00 d0       	rcall	.+0      	; 0x138c <Dio_Read_PORT+0xa>
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	8c 83       	std	Y+4, r24	; 0x04

	Dio_PORT_Type port = channel / 8;
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	86 95       	lsr	r24
    1396:	86 95       	lsr	r24
    1398:	86 95       	lsr	r24
    139a:	8b 83       	std	Y+3, r24	; 0x03
	Dio_Channel_Type pin = channel % 8;
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	87 70       	andi	r24, 0x07	; 7
    13a0:	8a 83       	std	Y+2, r24	; 0x02

	LEVEL level;

	switch (port) {
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3e 83       	std	Y+6, r19	; 0x06
    13aa:	2d 83       	std	Y+5, r18	; 0x05
    13ac:	4d 81       	ldd	r20, Y+5	; 0x05
    13ae:	5e 81       	ldd	r21, Y+6	; 0x06
    13b0:	41 30       	cpi	r20, 0x01	; 1
    13b2:	51 05       	cpc	r21, r1
    13b4:	41 f1       	breq	.+80     	; 0x1406 <Dio_Read_PORT+0x84>
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	91 05       	cpc	r25, r1
    13be:	34 f4       	brge	.+12     	; 0x13cc <Dio_Read_PORT+0x4a>
    13c0:	2d 81       	ldd	r18, Y+5	; 0x05
    13c2:	3e 81       	ldd	r19, Y+6	; 0x06
    13c4:	21 15       	cp	r18, r1
    13c6:	31 05       	cpc	r19, r1
    13c8:	61 f0       	breq	.+24     	; 0x13e2 <Dio_Read_PORT+0x60>
    13ca:	52 c0       	rjmp	.+164    	; 0x1470 <Dio_Read_PORT+0xee>
    13cc:	4d 81       	ldd	r20, Y+5	; 0x05
    13ce:	5e 81       	ldd	r21, Y+6	; 0x06
    13d0:	42 30       	cpi	r20, 0x02	; 2
    13d2:	51 05       	cpc	r21, r1
    13d4:	51 f1       	breq	.+84     	; 0x142a <Dio_Read_PORT+0xa8>
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	b9 f1       	breq	.+110    	; 0x144e <Dio_Read_PORT+0xcc>
    13e0:	47 c0       	rjmp	.+142    	; 0x1470 <Dio_Read_PORT+0xee>

	case PORT_A:
		level = GET_BIT(PORTA, pin);
    13e2:	eb e3       	ldi	r30, 0x3B	; 59
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	88 2f       	mov	r24, r24
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	a9 01       	movw	r20, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <Dio_Read_PORT+0x78>
    13f6:	55 95       	asr	r21
    13f8:	47 95       	ror	r20
    13fa:	8a 95       	dec	r24
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <Dio_Read_PORT+0x74>
    13fe:	ca 01       	movw	r24, r20
    1400:	81 70       	andi	r24, 0x01	; 1
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	35 c0       	rjmp	.+106    	; 0x1470 <Dio_Read_PORT+0xee>
		break;

	case PORT_B:
		level = GET_BIT(PORTB, pin);
    1406:	e8 e3       	ldi	r30, 0x38	; 56
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <Dio_Read_PORT+0x9c>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <Dio_Read_PORT+0x98>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	23 c0       	rjmp	.+70     	; 0x1470 <Dio_Read_PORT+0xee>
		break;

	case PORT_C:
		level = GET_BIT(PORTC, pin);
    142a:	e5 e3       	ldi	r30, 0x35	; 53
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a9 01       	movw	r20, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <Dio_Read_PORT+0xc0>
    143e:	55 95       	asr	r21
    1440:	47 95       	ror	r20
    1442:	8a 95       	dec	r24
    1444:	e2 f7       	brpl	.-8      	; 0x143e <Dio_Read_PORT+0xbc>
    1446:	ca 01       	movw	r24, r20
    1448:	81 70       	andi	r24, 0x01	; 1
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	11 c0       	rjmp	.+34     	; 0x1470 <Dio_Read_PORT+0xee>
		break;

	case PORT_D:
		level = GET_BIT(PORTD, pin);
    144e:	e2 e3       	ldi	r30, 0x32	; 50
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a9 01       	movw	r20, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <Dio_Read_PORT+0xe4>
    1462:	55 95       	asr	r21
    1464:	47 95       	ror	r20
    1466:	8a 95       	dec	r24
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <Dio_Read_PORT+0xe0>
    146a:	ca 01       	movw	r24, r20
    146c:	81 70       	andi	r24, 0x01	; 1
    146e:	89 83       	std	Y+1, r24	; 0x01

	default:
		break;
	}

		return level;
    1470:	89 81       	ldd	r24, Y+1	; 0x01
}
    1472:	26 96       	adiw	r28, 0x06	; 6
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <Dio_Read_PIN>:


LEVEL Dio_Read_PIN(Dio_Channel_Type channel) {
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	00 d0       	rcall	.+0      	; 0x148a <Dio_Read_PIN+0x6>
    148a:	00 d0       	rcall	.+0      	; 0x148c <Dio_Read_PIN+0x8>
    148c:	00 d0       	rcall	.+0      	; 0x148e <Dio_Read_PIN+0xa>
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	8c 83       	std	Y+4, r24	; 0x04

	Dio_PORT_Type port = channel / 8;
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	86 95       	lsr	r24
    1498:	86 95       	lsr	r24
    149a:	86 95       	lsr	r24
    149c:	8b 83       	std	Y+3, r24	; 0x03
	Dio_Channel_Type pin = channel % 8;
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	87 70       	andi	r24, 0x07	; 7
    14a2:	8a 83       	std	Y+2, r24	; 0x02

	LEVEL level;

	switch (port) {
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	3e 83       	std	Y+6, r19	; 0x06
    14ac:	2d 83       	std	Y+5, r18	; 0x05
    14ae:	4d 81       	ldd	r20, Y+5	; 0x05
    14b0:	5e 81       	ldd	r21, Y+6	; 0x06
    14b2:	41 30       	cpi	r20, 0x01	; 1
    14b4:	51 05       	cpc	r21, r1
    14b6:	41 f1       	breq	.+80     	; 0x1508 <Dio_Read_PIN+0x84>
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	9e 81       	ldd	r25, Y+6	; 0x06
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	91 05       	cpc	r25, r1
    14c0:	34 f4       	brge	.+12     	; 0x14ce <Dio_Read_PIN+0x4a>
    14c2:	2d 81       	ldd	r18, Y+5	; 0x05
    14c4:	3e 81       	ldd	r19, Y+6	; 0x06
    14c6:	21 15       	cp	r18, r1
    14c8:	31 05       	cpc	r19, r1
    14ca:	61 f0       	breq	.+24     	; 0x14e4 <Dio_Read_PIN+0x60>
    14cc:	52 c0       	rjmp	.+164    	; 0x1572 <Dio_Read_PIN+0xee>
    14ce:	4d 81       	ldd	r20, Y+5	; 0x05
    14d0:	5e 81       	ldd	r21, Y+6	; 0x06
    14d2:	42 30       	cpi	r20, 0x02	; 2
    14d4:	51 05       	cpc	r21, r1
    14d6:	51 f1       	breq	.+84     	; 0x152c <Dio_Read_PIN+0xa8>
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	9e 81       	ldd	r25, Y+6	; 0x06
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	91 05       	cpc	r25, r1
    14e0:	b9 f1       	breq	.+110    	; 0x1550 <Dio_Read_PIN+0xcc>
    14e2:	47 c0       	rjmp	.+142    	; 0x1572 <Dio_Read_PIN+0xee>

	case PORT_A:
		level = GET_BIT(PINA, pin);
    14e4:	e9 e3       	ldi	r30, 0x39	; 57
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a9 01       	movw	r20, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <Dio_Read_PIN+0x78>
    14f8:	55 95       	asr	r21
    14fa:	47 95       	ror	r20
    14fc:	8a 95       	dec	r24
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <Dio_Read_PIN+0x74>
    1500:	ca 01       	movw	r24, r20
    1502:	81 70       	andi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	35 c0       	rjmp	.+106    	; 0x1572 <Dio_Read_PIN+0xee>
		break;

	case PORT_B:
		level = GET_BIT(PINB, pin);
    1508:	e6 e3       	ldi	r30, 0x36	; 54
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a9 01       	movw	r20, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <Dio_Read_PIN+0x9c>
    151c:	55 95       	asr	r21
    151e:	47 95       	ror	r20
    1520:	8a 95       	dec	r24
    1522:	e2 f7       	brpl	.-8      	; 0x151c <Dio_Read_PIN+0x98>
    1524:	ca 01       	movw	r24, r20
    1526:	81 70       	andi	r24, 0x01	; 1
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	23 c0       	rjmp	.+70     	; 0x1572 <Dio_Read_PIN+0xee>
		break;

	case PORT_C:
		level = GET_BIT(PINC, pin);
    152c:	e3 e3       	ldi	r30, 0x33	; 51
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a9 01       	movw	r20, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <Dio_Read_PIN+0xc0>
    1540:	55 95       	asr	r21
    1542:	47 95       	ror	r20
    1544:	8a 95       	dec	r24
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <Dio_Read_PIN+0xbc>
    1548:	ca 01       	movw	r24, r20
    154a:	81 70       	andi	r24, 0x01	; 1
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	11 c0       	rjmp	.+34     	; 0x1572 <Dio_Read_PIN+0xee>
		break;

	case PORT_D:
		level = GET_BIT(PIND, pin);
    1550:	e0 e3       	ldi	r30, 0x30	; 48
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	88 2f       	mov	r24, r24
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	a9 01       	movw	r20, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <Dio_Read_PIN+0xe4>
    1564:	55 95       	asr	r21
    1566:	47 95       	ror	r20
    1568:	8a 95       	dec	r24
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <Dio_Read_PIN+0xe0>
    156c:	ca 01       	movw	r24, r20
    156e:	81 70       	andi	r24, 0x01	; 1
    1570:	89 83       	std	Y+1, r24	; 0x01

	default:
		break;
	}

		return level;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
}
    1574:	26 96       	adiw	r28, 0x06	; 6
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <Dio_Toggle_Channel>:


void Dio_Toggle_Channel(Dio_Channel_Type channel) {
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <Dio_Toggle_Channel+0x6>
    158c:	00 d0       	rcall	.+0      	; 0x158e <Dio_Toggle_Channel+0x8>
    158e:	0f 92       	push	r0
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	8b 83       	std	Y+3, r24	; 0x03

	Dio_PORT_Type port = channel / 8;
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	86 95       	lsr	r24
    159a:	86 95       	lsr	r24
    159c:	86 95       	lsr	r24
    159e:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Channel_Type pin = channel % 8;
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	87 70       	andi	r24, 0x07	; 7
    15a4:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3d 83       	std	Y+5, r19	; 0x05
    15ae:	2c 83       	std	Y+4, r18	; 0x04
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	49 f1       	breq	.+82     	; 0x160c <Dio_Toggle_Channel+0x86>
    15ba:	2c 81       	ldd	r18, Y+4	; 0x04
    15bc:	3d 81       	ldd	r19, Y+5	; 0x05
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	2c f4       	brge	.+10     	; 0x15ce <Dio_Toggle_Channel+0x48>
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	61 f0       	breq	.+24     	; 0x15e4 <Dio_Toggle_Channel+0x5e>
    15cc:	5a c0       	rjmp	.+180    	; 0x1682 <Dio_Toggle_Channel+0xfc>
    15ce:	2c 81       	ldd	r18, Y+4	; 0x04
    15d0:	3d 81       	ldd	r19, Y+5	; 0x05
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	71 f1       	breq	.+92     	; 0x1634 <Dio_Toggle_Channel+0xae>
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	9d 81       	ldd	r25, Y+5	; 0x05
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	91 05       	cpc	r25, r1
    15e0:	e9 f1       	breq	.+122    	; 0x165c <Dio_Toggle_Channel+0xd6>
    15e2:	4f c0       	rjmp	.+158    	; 0x1682 <Dio_Toggle_Channel+0xfc>

	case PORT_A:
		TOG_BIT(PORTA, pin);
    15e4:	ab e3       	ldi	r26, 0x3B	; 59
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	eb e3       	ldi	r30, 0x3B	; 59
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <Dio_Toggle_Channel+0x7c>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <Dio_Toggle_Channel+0x78>
    1606:	84 27       	eor	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	3b c0       	rjmp	.+118    	; 0x1682 <Dio_Toggle_Channel+0xfc>
		break;

	case PORT_B:
		TOG_BIT(PORTB, pin);
    160c:	a8 e3       	ldi	r26, 0x38	; 56
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e8 e3       	ldi	r30, 0x38	; 56
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <Dio_Toggle_Channel+0xa4>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <Dio_Toggle_Channel+0xa0>
    162e:	84 27       	eor	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	27 c0       	rjmp	.+78     	; 0x1682 <Dio_Toggle_Channel+0xfc>
		break;

	case PORT_C:
		TOG_BIT(PORTC, pin);
    1634:	a5 e3       	ldi	r26, 0x35	; 53
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e5 e3       	ldi	r30, 0x35	; 53
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <Dio_Toggle_Channel+0xcc>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <Dio_Toggle_Channel+0xc8>
    1656:	84 27       	eor	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	13 c0       	rjmp	.+38     	; 0x1682 <Dio_Toggle_Channel+0xfc>
		break;

	case PORT_D:
		TOG_BIT(PORTD, pin);
    165c:	a2 e3       	ldi	r26, 0x32	; 50
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e2 e3       	ldi	r30, 0x32	; 50
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <Dio_Toggle_Channel+0xf4>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <Dio_Toggle_Channel+0xf0>
    167e:	84 27       	eor	r24, r20
    1680:	8c 93       	st	X, r24
		break;

	default:
		break;
	}
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <Dio_init>:
//		{PORT_D,PIN_5,OUTPUT,LOW},
//		{PORT_D,PIN_6,INPUT,LOW},
};


void Dio_init() {
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <Dio_init+0x6>
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62

	for (int i = 0; i < (sizeof(PinCfg) / sizeof(PinCfg[0])); i++) {
    169c:	1a 82       	std	Y+2, r1	; 0x02
    169e:	19 82       	std	Y+1, r1	; 0x01
    16a0:	51 c1       	rjmp	.+674    	; 0x1944 <Dio_init+0x2b2>
		if (PinCfg[i].port == PORT_A) {
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	fc 01       	movw	r30, r24
    16b0:	e8 59       	subi	r30, 0x98	; 152
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 81       	ld	r24, Z
    16b6:	88 23       	and	r24, r24
    16b8:	09 f0       	breq	.+2      	; 0x16bc <Dio_init+0x2a>
    16ba:	46 c0       	rjmp	.+140    	; 0x1748 <Dio_init+0xb6>
			if (PinCfg[i].dir == OUTPUT) {
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	fc 01       	movw	r30, r24
    16ca:	e6 59       	subi	r30, 0x96	; 150
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 81       	ld	r24, Z
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	e9 f4       	brne	.+58     	; 0x170e <Dio_init+0x7c>
				SET_BIT(DDRA, PinCfg[i].pin);
    16d4:	aa e3       	ldi	r26, 0x3A	; 58
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	ea e3       	ldi	r30, 0x3A	; 58
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	fc 01       	movw	r30, r24
    16ee:	e7 59       	subi	r30, 0x97	; 151
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <Dio_init+0x72>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <Dio_init+0x6e>
    1708:	84 2b       	or	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	1d c0       	rjmp	.+58     	; 0x1748 <Dio_init+0xb6>
			} else {
				CLR_BIT(DDRA, PinCfg[i].pin);
    170e:	aa e3       	ldi	r26, 0x3A	; 58
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	ea e3       	ldi	r30, 0x3A	; 58
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	fc 01       	movw	r30, r24
    1728:	e7 59       	subi	r30, 0x97	; 151
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	80 81       	ld	r24, Z
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <Dio_init+0xac>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <Dio_init+0xa8>
    1742:	80 95       	com	r24
    1744:	84 23       	and	r24, r20
    1746:	8c 93       	st	X, r24
			}
		}

		if (PinCfg[i].port == PORT_B) {
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	9a 81       	ldd	r25, Y+2	; 0x02
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	fc 01       	movw	r30, r24
    1756:	e8 59       	subi	r30, 0x98	; 152
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	09 f0       	breq	.+2      	; 0x1762 <Dio_init+0xd0>
    1760:	46 c0       	rjmp	.+140    	; 0x17ee <Dio_init+0x15c>
			if (PinCfg[i].dir == OUTPUT) {
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	fc 01       	movw	r30, r24
    1770:	e6 59       	subi	r30, 0x96	; 150
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	80 81       	ld	r24, Z
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	e9 f4       	brne	.+58     	; 0x17b4 <Dio_init+0x122>
				SET_BIT(DDRB, PinCfg[i].pin);
    177a:	a7 e3       	ldi	r26, 0x37	; 55
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e7 e3       	ldi	r30, 0x37	; 55
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	9a 81       	ldd	r25, Y+2	; 0x02
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	fc 01       	movw	r30, r24
    1794:	e7 59       	subi	r30, 0x97	; 151
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 81       	ld	r24, Z
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 2e       	mov	r0, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <Dio_init+0x118>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <Dio_init+0x114>
    17ae:	84 2b       	or	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	1d c0       	rjmp	.+58     	; 0x17ee <Dio_init+0x15c>
			} else {
				CLR_BIT(DDRB, PinCfg[i].pin);
    17b4:	a7 e3       	ldi	r26, 0x37	; 55
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e7 e3       	ldi	r30, 0x37	; 55
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	fc 01       	movw	r30, r24
    17ce:	e7 59       	subi	r30, 0x97	; 151
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	80 81       	ld	r24, Z
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <Dio_init+0x152>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <Dio_init+0x14e>
    17e8:	80 95       	com	r24
    17ea:	84 23       	and	r24, r20
    17ec:	8c 93       	st	X, r24
			}
		}

		if (PinCfg[i].port == PORT_C) {
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	fc 01       	movw	r30, r24
    17fc:	e8 59       	subi	r30, 0x98	; 152
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	09 f0       	breq	.+2      	; 0x1808 <Dio_init+0x176>
    1806:	46 c0       	rjmp	.+140    	; 0x1894 <Dio_init+0x202>
			if (PinCfg[i].dir == OUTPUT) {
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	fc 01       	movw	r30, r24
    1816:	e6 59       	subi	r30, 0x96	; 150
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 81       	ld	r24, Z
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	e9 f4       	brne	.+58     	; 0x185a <Dio_init+0x1c8>
				SET_BIT(DDRC, PinCfg[i].pin);
    1820:	a4 e3       	ldi	r26, 0x34	; 52
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e4 e3       	ldi	r30, 0x34	; 52
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	fc 01       	movw	r30, r24
    183a:	e7 59       	subi	r30, 0x97	; 151
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	80 81       	ld	r24, Z
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <Dio_init+0x1be>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <Dio_init+0x1ba>
    1854:	84 2b       	or	r24, r20
    1856:	8c 93       	st	X, r24
    1858:	1d c0       	rjmp	.+58     	; 0x1894 <Dio_init+0x202>
			} else {
				CLR_BIT(DDRC, PinCfg[i].pin);
    185a:	a4 e3       	ldi	r26, 0x34	; 52
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e4 e3       	ldi	r30, 0x34	; 52
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	fc 01       	movw	r30, r24
    1874:	e7 59       	subi	r30, 0x97	; 151
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 81       	ld	r24, Z
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <Dio_init+0x1f8>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <Dio_init+0x1f4>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
			}
		}

		if (PinCfg[i].port == PORT_D) {
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	9a 81       	ldd	r25, Y+2	; 0x02
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	fc 01       	movw	r30, r24
    18a2:	e8 59       	subi	r30, 0x98	; 152
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	83 30       	cpi	r24, 0x03	; 3
    18aa:	09 f0       	breq	.+2      	; 0x18ae <Dio_init+0x21c>
    18ac:	46 c0       	rjmp	.+140    	; 0x193a <Dio_init+0x2a8>
			if (PinCfg[i].dir == OUTPUT) {
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	fc 01       	movw	r30, r24
    18bc:	e6 59       	subi	r30, 0x96	; 150
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	80 81       	ld	r24, Z
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	e9 f4       	brne	.+58     	; 0x1900 <Dio_init+0x26e>
				SET_BIT(DDRD, PinCfg[i].pin);
    18c6:	a1 e3       	ldi	r26, 0x31	; 49
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e1 e3       	ldi	r30, 0x31	; 49
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	48 2f       	mov	r20, r24
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	fc 01       	movw	r30, r24
    18e0:	e7 59       	subi	r30, 0x97	; 151
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <Dio_init+0x264>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <Dio_init+0x260>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	1d c0       	rjmp	.+58     	; 0x193a <Dio_init+0x2a8>
			} else {
				CLR_BIT(DDRD, PinCfg[i].pin);
    1900:	a1 e3       	ldi	r26, 0x31	; 49
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e1 e3       	ldi	r30, 0x31	; 49
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	fc 01       	movw	r30, r24
    191a:	e7 59       	subi	r30, 0x97	; 151
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	80 81       	ld	r24, Z
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <Dio_init+0x29e>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <Dio_init+0x29a>
    1934:	80 95       	com	r24
    1936:	84 23       	and	r24, r20
    1938:	8c 93       	st	X, r24
};


void Dio_init() {

	for (int i = 0; i < (sizeof(PinCfg) / sizeof(PinCfg[0])); i++) {
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	9a 83       	std	Y+2, r25	; 0x02
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	9a 81       	ldd	r25, Y+2	; 0x02
    1948:	8a 30       	cpi	r24, 0x0A	; 10
    194a:	91 05       	cpc	r25, r1
    194c:	08 f4       	brcc	.+2      	; 0x1950 <Dio_init+0x2be>
    194e:	a9 ce       	rjmp	.-686    	; 0x16a2 <Dio_init+0x10>
			} else {
				CLR_BIT(DDRD, PinCfg[i].pin);
			}
		}
	}
}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <ADC_init>:
 *      Author: ahmed
 */

#include "ADC.h"

void ADC_init() {
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62

#if ADC_ENABLE == ENABLE
	SET_BIT(ADCSRA, ADEN);
    1962:	a6 e2       	ldi	r26, 0x26	; 38
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e6 e2       	ldi	r30, 0x26	; 38
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	80 68       	ori	r24, 0x80	; 128
    196e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
#elif ADC_SOURCE == ADC_SOURCE_RESERVED
	CLR_BIT(ADMUX, REFS0);
	SET_BIT(ADMUX, REFS1);
#elif ADC_SOURCE == ADC_SOURCE_VREF
	SET_BIT(ADMUX, REFS0);
    1970:	a7 e2       	ldi	r26, 0x27	; 39
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e7 e2       	ldi	r30, 0x27	; 39
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	80 64       	ori	r24, 0x40	; 64
    197c:	8c 93       	st	X, r24
	SET_BIT(ADMUX, REFS1);
    197e:	a7 e2       	ldi	r26, 0x27	; 39
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e7 e2       	ldi	r30, 0x27	; 39
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 68       	ori	r24, 0x80	; 128
    198a:	8c 93       	st	X, r24
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_8
	SET_BIT(ADCSRA, ADPS0);
	SET_BIT(ADCSRA, ADPS1);
	CLR_BIT(ADCSRA, ADPS2);
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_16
	CLR_BIT(ADCSRA, ADPS0);
    198c:	a6 e2       	ldi	r26, 0x26	; 38
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e6 e2       	ldi	r30, 0x26	; 38
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8e 7f       	andi	r24, 0xFE	; 254
    1998:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADPS1);
    199a:	a6 e2       	ldi	r26, 0x26	; 38
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e6 e2       	ldi	r30, 0x26	; 38
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8d 7f       	andi	r24, 0xFD	; 253
    19a6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS2);
    19a8:	a6 e2       	ldi	r26, 0x26	; 38
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e6 e2       	ldi	r30, 0x26	; 38
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	84 60       	ori	r24, 0x04	; 4
    19b4:	8c 93       	st	X, r24
#elif ADC_PRESCALER_MODE == ADC_PRESCALER_128
	SET_BIT(ADCSRA, ADPS0);
	SET_BIT(ADCSRA, ADPS1);
	SET_BIT(ADCSRA, ADPS2);
#endif
}
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <ADC_READ>:

uint16 ADC_READ(uint8 channel) {
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	6a 97       	sbiw	r28, 0x1a	; 26
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	89 8f       	std	Y+25, r24	; 0x19

	ADMUX = (ADMUX & 0b11100000) | channel;
    19d2:	a7 e2       	ldi	r26, 0x27	; 39
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e7 e2       	ldi	r30, 0x27	; 39
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	98 2f       	mov	r25, r24
    19de:	90 7e       	andi	r25, 0xE0	; 224
    19e0:	89 8d       	ldd	r24, Y+25	; 0x19
    19e2:	89 2b       	or	r24, r25
    19e4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC);
    19e6:	a6 e2       	ldi	r26, 0x26	; 38
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e6 e2       	ldi	r30, 0x26	; 38
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	80 64       	ori	r24, 0x40	; 64
    19f2:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA, ADIF) == 0);
    19f4:	e6 e2       	ldi	r30, 0x26	; 38
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	a0 e2       	ldi	r26, 0x20	; 32
    1a00:	b1 e4       	ldi	r27, 0x41	; 65
    1a02:	8d 8b       	std	Y+21, r24	; 0x15
    1a04:	9e 8b       	std	Y+22, r25	; 0x16
    1a06:	af 8b       	std	Y+23, r26	; 0x17
    1a08:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a10:	98 8d       	ldd	r25, Y+24	; 0x18
    1a12:	2b ea       	ldi	r18, 0xAB	; 171
    1a14:	3a ea       	ldi	r19, 0xAA	; 170
    1a16:	4a ea       	ldi	r20, 0xAA	; 170
    1a18:	50 e4       	ldi	r21, 0x40	; 64
    1a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	89 8b       	std	Y+17, r24	; 0x11
    1a24:	9a 8b       	std	Y+18, r25	; 0x12
    1a26:	ab 8b       	std	Y+19, r26	; 0x13
    1a28:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a2a:	69 89       	ldd	r22, Y+17	; 0x11
    1a2c:	7a 89       	ldd	r23, Y+18	; 0x12
    1a2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a30:	9c 89       	ldd	r25, Y+20	; 0x14
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e8       	ldi	r20, 0x80	; 128
    1a38:	5f e3       	ldi	r21, 0x3F	; 63
    1a3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	1c f4       	brge	.+6      	; 0x1a48 <ADC_READ+0x8c>
		__ticks = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	88 8b       	std	Y+16, r24	; 0x10
    1a46:	91 c0       	rjmp	.+290    	; 0x1b6a <ADC_READ+0x1ae>
	else if (__tmp > 255)
    1a48:	69 89       	ldd	r22, Y+17	; 0x11
    1a4a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4f e7       	ldi	r20, 0x7F	; 127
    1a56:	53 e4       	ldi	r21, 0x43	; 67
    1a58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	0c f0       	brlt	.+2      	; 0x1a62 <ADC_READ+0xa6>
    1a60:	7b c0       	rjmp	.+246    	; 0x1b58 <ADC_READ+0x19c>
	{
		_delay_ms(__us / 1000.0);
    1a62:	6d 89       	ldd	r22, Y+21	; 0x15
    1a64:	7e 89       	ldd	r23, Y+22	; 0x16
    1a66:	8f 89       	ldd	r24, Y+23	; 0x17
    1a68:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a e7       	ldi	r20, 0x7A	; 122
    1a70:	54 e4       	ldi	r21, 0x44	; 68
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8c 87       	std	Y+12, r24	; 0x0c
    1a7c:	9d 87       	std	Y+13, r25	; 0x0d
    1a7e:	ae 87       	std	Y+14, r26	; 0x0e
    1a80:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a82:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a84:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a86:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a88:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4a e7       	ldi	r20, 0x7A	; 122
    1a90:	55 e4       	ldi	r21, 0x45	; 69
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	88 87       	std	Y+8, r24	; 0x08
    1a9c:	99 87       	std	Y+9, r25	; 0x09
    1a9e:	aa 87       	std	Y+10, r26	; 0x0a
    1aa0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1aa2:	68 85       	ldd	r22, Y+8	; 0x08
    1aa4:	79 85       	ldd	r23, Y+9	; 0x09
    1aa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aa8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	5f e3       	ldi	r21, 0x3F	; 63
    1ab2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	2c f4       	brge	.+10     	; 0x1ac4 <ADC_READ+0x108>
		__ticks = 1;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9f 83       	std	Y+7, r25	; 0x07
    1ac0:	8e 83       	std	Y+6, r24	; 0x06
    1ac2:	3f c0       	rjmp	.+126    	; 0x1b42 <ADC_READ+0x186>
	else if (__tmp > 65535)
    1ac4:	68 85       	ldd	r22, Y+8	; 0x08
    1ac6:	79 85       	ldd	r23, Y+9	; 0x09
    1ac8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aca:	9b 85       	ldd	r25, Y+11	; 0x0b
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	3f ef       	ldi	r19, 0xFF	; 255
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	57 e4       	ldi	r21, 0x47	; 71
    1ad4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	4c f5       	brge	.+82     	; 0x1b2e <ADC_READ+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1adc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ade:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ae0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ae2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9f 83       	std	Y+7, r25	; 0x07
    1b02:	8e 83       	std	Y+6, r24	; 0x06
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <ADC_READ+0x168>
    1b06:	80 e9       	ldi	r24, 0x90	; 144
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	9d 83       	std	Y+5, r25	; 0x05
    1b0c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b10:	9d 81       	ldd	r25, Y+5	; 0x05
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <ADC_READ+0x156>
    1b16:	9d 83       	std	Y+5, r25	; 0x05
    1b18:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	9f 83       	std	Y+7, r25	; 0x07
    1b22:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b24:	8e 81       	ldd	r24, Y+6	; 0x06
    1b26:	9f 81       	ldd	r25, Y+7	; 0x07
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	69 f7       	brne	.-38     	; 0x1b06 <ADC_READ+0x14a>
    1b2c:	24 c0       	rjmp	.+72     	; 0x1b76 <ADC_READ+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2e:	68 85       	ldd	r22, Y+8	; 0x08
    1b30:	79 85       	ldd	r23, Y+9	; 0x09
    1b32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b34:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9f 83       	std	Y+7, r25	; 0x07
    1b40:	8e 83       	std	Y+6, r24	; 0x06
    1b42:	8e 81       	ldd	r24, Y+6	; 0x06
    1b44:	9f 81       	ldd	r25, Y+7	; 0x07
    1b46:	9b 83       	std	Y+3, r25	; 0x03
    1b48:	8a 83       	std	Y+2, r24	; 0x02
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <ADC_READ+0x192>
    1b52:	9b 83       	std	Y+3, r25	; 0x03
    1b54:	8a 83       	std	Y+2, r24	; 0x02
    1b56:	0f c0       	rjmp	.+30     	; 0x1b76 <ADC_READ+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b58:	69 89       	ldd	r22, Y+17	; 0x11
    1b5a:	7a 89       	ldd	r23, Y+18	; 0x12
    1b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	88 8b       	std	Y+16, r24	; 0x10
    1b6a:	88 89       	ldd	r24, Y+16	; 0x10
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	8a 95       	dec	r24
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <ADC_READ+0x1b4>
    1b74:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(10);

	SET_BIT(ADCSRA, ADIF);
    1b76:	a6 e2       	ldi	r26, 0x26	; 38
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e6 e2       	ldi	r30, 0x26	; 38
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	80 61       	ori	r24, 0x10	; 16
    1b82:	8c 93       	st	X, r24

	return ADC;
    1b84:	e4 e2       	ldi	r30, 0x24	; 36
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	91 81       	ldd	r25, Z+1	; 0x01
}
    1b8c:	6a 96       	adiw	r28, 0x1a	; 26
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <LCD_init>:
 */


#include "LCD.h"

void LCD_init() {
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	6c 97       	sbiw	r28, 0x1c	; 28
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
	Dio_write_PORT(Rw, LOW);
    1bb2:	8a e0       	ldi	r24, 0x0A	; 10
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a0 ea       	ldi	r26, 0xA0	; 160
    1bc0:	b1 e4       	ldi	r27, 0x41	; 65
    1bc2:	89 8f       	std	Y+25, r24	; 0x19
    1bc4:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc6:	ab 8f       	std	Y+27, r26	; 0x1b
    1bc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	69 8d       	ldd	r22, Y+25	; 0x19
    1bcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a e7       	ldi	r20, 0x7A	; 122
    1bd8:	55 e4       	ldi	r21, 0x45	; 69
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8d 8b       	std	Y+21, r24	; 0x15
    1be4:	9e 8b       	std	Y+22, r25	; 0x16
    1be6:	af 8b       	std	Y+23, r26	; 0x17
    1be8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bea:	6d 89       	ldd	r22, Y+21	; 0x15
    1bec:	7e 89       	ldd	r23, Y+22	; 0x16
    1bee:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <LCD_init+0x6e>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9c 8b       	std	Y+20, r25	; 0x14
    1c08:	8b 8b       	std	Y+19, r24	; 0x13
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <LCD_init+0xec>
	else if (__tmp > 65535)
    1c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <LCD_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	69 8d       	ldd	r22, Y+25	; 0x19
    1c26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9c 8b       	std	Y+20, r25	; 0x14
    1c4a:	8b 8b       	std	Y+19, r24	; 0x13
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <LCD_init+0xce>
    1c4e:	80 e9       	ldi	r24, 0x90	; 144
    1c50:	91 e0       	ldi	r25, 0x01	; 1
    1c52:	9a 8b       	std	Y+18, r25	; 0x12
    1c54:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c56:	89 89       	ldd	r24, Y+17	; 0x11
    1c58:	9a 89       	ldd	r25, Y+18	; 0x12
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_init+0xbc>
    1c5e:	9a 8b       	std	Y+18, r25	; 0x12
    1c60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	8b 89       	ldd	r24, Y+19	; 0x13
    1c64:	9c 89       	ldd	r25, Y+20	; 0x14
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9c 8b       	std	Y+20, r25	; 0x14
    1c6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <LCD_init+0xb0>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <LCD_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	6d 89       	ldd	r22, Y+21	; 0x15
    1c78:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8e:	98 8b       	std	Y+16, r25	; 0x10
    1c90:	8f 87       	std	Y+15, r24	; 0x0f
    1c92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c94:	98 89       	ldd	r25, Y+16	; 0x10
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_init+0xf8>
    1c9a:	98 8b       	std	Y+16, r25	; 0x10
    1c9c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

	LCD_cmd(0x33);
    1c9e:	83 e3       	ldi	r24, 0x33	; 51
    1ca0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_cmd>
	LCD_cmd(0x32); 	/* Send for 4 bit initialization of LCD  */
    1ca4:	82 e3       	ldi	r24, 0x32	; 50
    1ca6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_cmd>
	LCD_cmd(0x28); 	// Select 4 Bit Mode, 5*7 dots
    1caa:	88 e2       	ldi	r24, 0x28	; 40
    1cac:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_cmd>
	LCD_cmd(0x0C);	// Display On, Cursor Blinking
    1cb0:	8c e0       	ldi	r24, 0x0C	; 12
    1cb2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_cmd>
	LCD_cmd(0x06);	// Entry Mode Increment cursor to right
    1cb6:	86 e0       	ldi	r24, 0x06	; 6
    1cb8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_cmd>
	LCD_cmd(0x01);	// Clear Display
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_cmd>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e0       	ldi	r26, 0x00	; 0
    1cc8:	b0 e4       	ldi	r27, 0x40	; 64
    1cca:	8b 87       	std	Y+11, r24	; 0x0b
    1ccc:	9c 87       	std	Y+12, r25	; 0x0c
    1cce:	ad 87       	std	Y+13, r26	; 0x0d
    1cd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a e7       	ldi	r20, 0x7A	; 122
    1ce0:	55 e4       	ldi	r21, 0x45	; 69
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8f 83       	std	Y+7, r24	; 0x07
    1cec:	98 87       	std	Y+8, r25	; 0x08
    1cee:	a9 87       	std	Y+9, r26	; 0x09
    1cf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf4:	78 85       	ldd	r23, Y+8	; 0x08
    1cf6:	89 85       	ldd	r24, Y+9	; 0x09
    1cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <LCD_init+0x176>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <LCD_init+0x1f4>
	else if (__tmp > 65535)
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <LCD_init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_init+0x1d6>
    1d56:	80 e9       	ldi	r24, 0x90	; 144
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	9c 83       	std	Y+4, r25	; 0x04
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_init+0x1c4>
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	9e 81       	ldd	r25, Y+6	; 0x06
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_init+0x1b8>
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <LCD_init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	9a 83       	std	Y+2, r25	; 0x02
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_init+0x200>
    1da2:	9a 83       	std	Y+2, r25	; 0x02
    1da4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1da6:	6c 96       	adiw	r28, 0x1c	; 28
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <LCD_cmd>:

void LCD_cmd(uint8 cmd) {
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	c1 56       	subi	r28, 0x61	; 97
    1dc6:	d0 40       	sbci	r29, 0x00	; 0
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ef 59       	subi	r30, 0x9F	; 159
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 83       	st	Z, r24
	Dio_write_PORT(Rs, LOW);
    1dda:	89 e0       	ldi	r24, 0x09	; 9
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(Rw, LOW);
    1de2:	8a e0       	ldi	r24, 0x0A	; 10
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>

	Dio_write_PORT(D7, GET_BIT(cmd, 7));
    1dea:	fe 01       	movw	r30, r28
    1dec:	ef 59       	subi	r30, 0x9F	; 159
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 81       	ld	r24, Z
    1df2:	98 2f       	mov	r25, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	99 27       	eor	r25, r25
    1df8:	99 1f       	adc	r25, r25
    1dfa:	87 e0       	ldi	r24, 0x07	; 7
    1dfc:	69 2f       	mov	r22, r25
    1dfe:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(cmd, 6));
    1e02:	fe 01       	movw	r30, r28
    1e04:	ef 59       	subi	r30, 0x9F	; 159
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 81       	ld	r24, Z
    1e0a:	82 95       	swap	r24
    1e0c:	86 95       	lsr	r24
    1e0e:	86 95       	lsr	r24
    1e10:	83 70       	andi	r24, 0x03	; 3
    1e12:	98 2f       	mov	r25, r24
    1e14:	91 70       	andi	r25, 0x01	; 1
    1e16:	86 e0       	ldi	r24, 0x06	; 6
    1e18:	69 2f       	mov	r22, r25
    1e1a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(cmd, 5));
    1e1e:	fe 01       	movw	r30, r28
    1e20:	ef 59       	subi	r30, 0x9F	; 159
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	80 81       	ld	r24, Z
    1e26:	82 95       	swap	r24
    1e28:	86 95       	lsr	r24
    1e2a:	87 70       	andi	r24, 0x07	; 7
    1e2c:	98 2f       	mov	r25, r24
    1e2e:	91 70       	andi	r25, 0x01	; 1
    1e30:	85 e0       	ldi	r24, 0x05	; 5
    1e32:	69 2f       	mov	r22, r25
    1e34:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D4, GET_BIT(cmd, 4));
    1e38:	fe 01       	movw	r30, r28
    1e3a:	ef 59       	subi	r30, 0x9F	; 159
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	82 95       	swap	r24
    1e42:	8f 70       	andi	r24, 0x0F	; 15
    1e44:	98 2f       	mov	r25, r24
    1e46:	91 70       	andi	r25, 0x01	; 1
    1e48:	84 e0       	ldi	r24, 0x04	; 4
    1e4a:	69 2f       	mov	r22, r25
    1e4c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(E, HIGH);
    1e50:	8b e0       	ldi	r24, 0x0B	; 11
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e3 5a       	subi	r30, 0xA3	; 163
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a0 e2       	ldi	r26, 0x20	; 32
    1e64:	b1 e4       	ldi	r27, 0x41	; 65
    1e66:	80 83       	st	Z, r24
    1e68:	91 83       	std	Z+1, r25	; 0x01
    1e6a:	a2 83       	std	Z+2, r26	; 0x02
    1e6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e6e:	8e 01       	movw	r16, r28
    1e70:	07 5a       	subi	r16, 0xA7	; 167
    1e72:	1f 4f       	sbci	r17, 0xFF	; 255
    1e74:	fe 01       	movw	r30, r28
    1e76:	e3 5a       	subi	r30, 0xA3	; 163
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	60 81       	ld	r22, Z
    1e7c:	71 81       	ldd	r23, Z+1	; 0x01
    1e7e:	82 81       	ldd	r24, Z+2	; 0x02
    1e80:	93 81       	ldd	r25, Z+3	; 0x03
    1e82:	2b ea       	ldi	r18, 0xAB	; 171
    1e84:	3a ea       	ldi	r19, 0xAA	; 170
    1e86:	4a ea       	ldi	r20, 0xAA	; 170
    1e88:	50 e4       	ldi	r21, 0x40	; 64
    1e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	f8 01       	movw	r30, r16
    1e94:	80 83       	st	Z, r24
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	a2 83       	std	Z+2, r26	; 0x02
    1e9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e7 5a       	subi	r30, 0xA7	; 167
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	60 81       	ld	r22, Z
    1ea4:	71 81       	ldd	r23, Z+1	; 0x01
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb6:	88 23       	and	r24, r24
    1eb8:	34 f4       	brge	.+12     	; 0x1ec6 <LCD_cmd+0x10e>
		__ticks = 1;
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e8 5a       	subi	r30, 0xA8	; 168
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	80 83       	st	Z, r24
    1ec4:	e0 c0       	rjmp	.+448    	; 0x2086 <LCD_cmd+0x2ce>
	else if (__tmp > 255)
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e7 5a       	subi	r30, 0xA7	; 167
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	53 e4       	ldi	r21, 0x43	; 67
    1edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	0c f0       	brlt	.+2      	; 0x1ee6 <LCD_cmd+0x12e>
    1ee4:	c0 c0       	rjmp	.+384    	; 0x2066 <LCD_cmd+0x2ae>
	{
		_delay_ms(__us / 1000.0);
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e3 5a       	subi	r30, 0xA3	; 163
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	4a e7       	ldi	r20, 0x7A	; 122
    1efa:	54 e4       	ldi	r21, 0x44	; 68
    1efc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	fe 01       	movw	r30, r28
    1f06:	ec 5a       	subi	r30, 0xAC	; 172
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	80 83       	st	Z, r24
    1f0c:	91 83       	std	Z+1, r25	; 0x01
    1f0e:	a2 83       	std	Z+2, r26	; 0x02
    1f10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	8e 01       	movw	r16, r28
    1f14:	00 5b       	subi	r16, 0xB0	; 176
    1f16:	1f 4f       	sbci	r17, 0xFF	; 255
    1f18:	fe 01       	movw	r30, r28
    1f1a:	ec 5a       	subi	r30, 0xAC	; 172
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	60 81       	ld	r22, Z
    1f20:	71 81       	ldd	r23, Z+1	; 0x01
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a e7       	ldi	r20, 0x7A	; 122
    1f2c:	55 e4       	ldi	r21, 0x45	; 69
    1f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	f8 01       	movw	r30, r16
    1f38:	80 83       	st	Z, r24
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	a2 83       	std	Z+2, r26	; 0x02
    1f3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f40:	fe 01       	movw	r30, r28
    1f42:	e0 5b       	subi	r30, 0xB0	; 176
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	60 81       	ld	r22, Z
    1f48:	71 81       	ldd	r23, Z+1	; 0x01
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	93 81       	ldd	r25, Z+3	; 0x03
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	5f e3       	ldi	r21, 0x3F	; 63
    1f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	44 f4       	brge	.+16     	; 0x1f6e <LCD_cmd+0x1b6>
		__ticks = 1;
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e2 5b       	subi	r30, 0xB2	; 178
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	80 83       	st	Z, r24
    1f6c:	64 c0       	rjmp	.+200    	; 0x2036 <LCD_cmd+0x27e>
	else if (__tmp > 65535)
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e0 5b       	subi	r30, 0xB0	; 176
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	60 81       	ld	r22, Z
    1f76:	71 81       	ldd	r23, Z+1	; 0x01
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	3f ef       	ldi	r19, 0xFF	; 255
    1f80:	4f e7       	ldi	r20, 0x7F	; 127
    1f82:	57 e4       	ldi	r21, 0x47	; 71
    1f84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f88:	18 16       	cp	r1, r24
    1f8a:	0c f0       	brlt	.+2      	; 0x1f8e <LCD_cmd+0x1d6>
    1f8c:	43 c0       	rjmp	.+134    	; 0x2014 <LCD_cmd+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ec 5a       	subi	r30, 0xAC	; 172
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	60 81       	ld	r22, Z
    1f96:	71 81       	ldd	r23, Z+1	; 0x01
    1f98:	82 81       	ldd	r24, Z+2	; 0x02
    1f9a:	93 81       	ldd	r25, Z+3	; 0x03
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e2       	ldi	r20, 0x20	; 32
    1fa2:	51 e4       	ldi	r21, 0x41	; 65
    1fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	8e 01       	movw	r16, r28
    1fae:	02 5b       	subi	r16, 0xB2	; 178
    1fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	f8 01       	movw	r30, r16
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
    1fc4:	1f c0       	rjmp	.+62     	; 0x2004 <LCD_cmd+0x24c>
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e4 5b       	subi	r30, 0xB4	; 180
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 e9       	ldi	r24, 0x90	; 144
    1fce:	91 e0       	ldi	r25, 0x01	; 1
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	80 83       	st	Z, r24
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e4 5b       	subi	r30, 0xB4	; 180
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	80 81       	ld	r24, Z
    1fdc:	91 81       	ldd	r25, Z+1	; 0x01
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_cmd+0x226>
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e4 5b       	subi	r30, 0xB4	; 180
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fec:	de 01       	movw	r26, r28
    1fee:	a2 5b       	subi	r26, 0xB2	; 178
    1ff0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e2 5b       	subi	r30, 0xB2	; 178
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 81       	ld	r24, Z
    1ffa:	91 81       	ldd	r25, Z+1	; 0x01
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	11 96       	adiw	r26, 0x01	; 1
    2000:	9c 93       	st	X, r25
    2002:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2004:	fe 01       	movw	r30, r28
    2006:	e2 5b       	subi	r30, 0xB2	; 178
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	80 81       	ld	r24, Z
    200c:	91 81       	ldd	r25, Z+1	; 0x01
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	d1 f6       	brne	.-76     	; 0x1fc6 <LCD_cmd+0x20e>
    2012:	4b c0       	rjmp	.+150    	; 0x20aa <LCD_cmd+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2014:	8e 01       	movw	r16, r28
    2016:	02 5b       	subi	r16, 0xB2	; 178
    2018:	1f 4f       	sbci	r17, 0xFF	; 255
    201a:	fe 01       	movw	r30, r28
    201c:	e0 5b       	subi	r30, 0xB0	; 176
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	60 81       	ld	r22, Z
    2022:	71 81       	ldd	r23, Z+1	; 0x01
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	93 81       	ldd	r25, Z+3	; 0x03
    2028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	f8 01       	movw	r30, r16
    2032:	91 83       	std	Z+1, r25	; 0x01
    2034:	80 83       	st	Z, r24
    2036:	de 01       	movw	r26, r28
    2038:	a6 5b       	subi	r26, 0xB6	; 182
    203a:	bf 4f       	sbci	r27, 0xFF	; 255
    203c:	fe 01       	movw	r30, r28
    203e:	e2 5b       	subi	r30, 0xB2	; 178
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	11 96       	adiw	r26, 0x01	; 1
    2048:	9c 93       	st	X, r25
    204a:	8e 93       	st	-X, r24
    204c:	fe 01       	movw	r30, r28
    204e:	e6 5b       	subi	r30, 0xB6	; 182
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	80 81       	ld	r24, Z
    2054:	91 81       	ldd	r25, Z+1	; 0x01
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_cmd+0x29e>
    205a:	fe 01       	movw	r30, r28
    205c:	e6 5b       	subi	r30, 0xB6	; 182
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	91 83       	std	Z+1, r25	; 0x01
    2062:	80 83       	st	Z, r24
    2064:	22 c0       	rjmp	.+68     	; 0x20aa <LCD_cmd+0x2f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2066:	8e 01       	movw	r16, r28
    2068:	08 5a       	subi	r16, 0xA8	; 168
    206a:	1f 4f       	sbci	r17, 0xFF	; 255
    206c:	fe 01       	movw	r30, r28
    206e:	e7 5a       	subi	r30, 0xA7	; 167
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	f8 01       	movw	r30, r16
    2084:	80 83       	st	Z, r24
    2086:	de 01       	movw	r26, r28
    2088:	a7 5b       	subi	r26, 0xB7	; 183
    208a:	bf 4f       	sbci	r27, 0xFF	; 255
    208c:	fe 01       	movw	r30, r28
    208e:	e8 5a       	subi	r30, 0xA8	; 168
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	80 81       	ld	r24, Z
    2094:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2096:	fe 01       	movw	r30, r28
    2098:	e7 5b       	subi	r30, 0xB7	; 183
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 81       	ld	r24, Z
    209e:	8a 95       	dec	r24
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_cmd+0x2e6>
    20a2:	fe 01       	movw	r30, r28
    20a4:	e7 5b       	subi	r30, 0xB7	; 183
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 83       	st	Z, r24
	_delay_us(10);
	Dio_write_PORT(E, LOW);
    20aa:	8b e0       	ldi	r24, 0x0B	; 11
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    20b2:	fe 01       	movw	r30, r28
    20b4:	eb 5b       	subi	r30, 0xBB	; 187
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a8 e4       	ldi	r26, 0x48	; 72
    20be:	b3 e4       	ldi	r27, 0x43	; 67
    20c0:	80 83       	st	Z, r24
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	a2 83       	std	Z+2, r26	; 0x02
    20c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20c8:	8e 01       	movw	r16, r28
    20ca:	0f 5b       	subi	r16, 0xBF	; 191
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	fe 01       	movw	r30, r28
    20d0:	eb 5b       	subi	r30, 0xBB	; 187
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	2b ea       	ldi	r18, 0xAB	; 171
    20de:	3a ea       	ldi	r19, 0xAA	; 170
    20e0:	4a ea       	ldi	r20, 0xAA	; 170
    20e2:	50 e4       	ldi	r21, 0x40	; 64
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	f8 01       	movw	r30, r16
    20ee:	80 83       	st	Z, r24
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	a2 83       	std	Z+2, r26	; 0x02
    20f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20f6:	fe 01       	movw	r30, r28
    20f8:	ef 5b       	subi	r30, 0xBF	; 191
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	34 f4       	brge	.+12     	; 0x2120 <LCD_cmd+0x368>
		__ticks = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	fe 01       	movw	r30, r28
    2118:	e0 5c       	subi	r30, 0xC0	; 192
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 83       	st	Z, r24
    211e:	9d c0       	rjmp	.+314    	; 0x225a <LCD_cmd+0x4a2>
	else if (__tmp > 255)
    2120:	fe 01       	movw	r30, r28
    2122:	ef 5b       	subi	r30, 0xBF	; 191
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	60 81       	ld	r22, Z
    2128:	71 81       	ldd	r23, Z+1	; 0x01
    212a:	82 81       	ldd	r24, Z+2	; 0x02
    212c:	93 81       	ldd	r25, Z+3	; 0x03
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	53 e4       	ldi	r21, 0x43	; 67
    2136:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	0c f0       	brlt	.+2      	; 0x2140 <LCD_cmd+0x388>
    213e:	7e c0       	rjmp	.+252    	; 0x223c <LCD_cmd+0x484>
	{
		_delay_ms(__us / 1000.0);
    2140:	fe 01       	movw	r30, r28
    2142:	eb 5b       	subi	r30, 0xBB	; 187
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a e7       	ldi	r20, 0x7A	; 122
    2154:	54 e4       	ldi	r21, 0x44	; 68
    2156:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	8c af       	std	Y+60, r24	; 0x3c
    2160:	9d af       	std	Y+61, r25	; 0x3d
    2162:	ae af       	std	Y+62, r26	; 0x3e
    2164:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2166:	6c ad       	ldd	r22, Y+60	; 0x3c
    2168:	7d ad       	ldd	r23, Y+61	; 0x3d
    216a:	8e ad       	ldd	r24, Y+62	; 0x3e
    216c:	9f ad       	ldd	r25, Y+63	; 0x3f
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	4a e7       	ldi	r20, 0x7A	; 122
    2174:	55 e4       	ldi	r21, 0x45	; 69
    2176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	88 af       	std	Y+56, r24	; 0x38
    2180:	99 af       	std	Y+57, r25	; 0x39
    2182:	aa af       	std	Y+58, r26	; 0x3a
    2184:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2186:	68 ad       	ldd	r22, Y+56	; 0x38
    2188:	79 ad       	ldd	r23, Y+57	; 0x39
    218a:	8a ad       	ldd	r24, Y+58	; 0x3a
    218c:	9b ad       	ldd	r25, Y+59	; 0x3b
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    219a:	88 23       	and	r24, r24
    219c:	2c f4       	brge	.+10     	; 0x21a8 <LCD_cmd+0x3f0>
		__ticks = 1;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	9f ab       	std	Y+55, r25	; 0x37
    21a4:	8e ab       	std	Y+54, r24	; 0x36
    21a6:	3f c0       	rjmp	.+126    	; 0x2226 <LCD_cmd+0x46e>
	else if (__tmp > 65535)
    21a8:	68 ad       	ldd	r22, Y+56	; 0x38
    21aa:	79 ad       	ldd	r23, Y+57	; 0x39
    21ac:	8a ad       	ldd	r24, Y+58	; 0x3a
    21ae:	9b ad       	ldd	r25, Y+59	; 0x3b
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	3f ef       	ldi	r19, 0xFF	; 255
    21b4:	4f e7       	ldi	r20, 0x7F	; 127
    21b6:	57 e4       	ldi	r21, 0x47	; 71
    21b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21bc:	18 16       	cp	r1, r24
    21be:	4c f5       	brge	.+82     	; 0x2212 <LCD_cmd+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    21c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    21c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    21c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e2       	ldi	r20, 0x20	; 32
    21ce:	51 e4       	ldi	r21, 0x41	; 65
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	bc 01       	movw	r22, r24
    21da:	cd 01       	movw	r24, r26
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9f ab       	std	Y+55, r25	; 0x37
    21e6:	8e ab       	std	Y+54, r24	; 0x36
    21e8:	0f c0       	rjmp	.+30     	; 0x2208 <LCD_cmd+0x450>
    21ea:	80 e9       	ldi	r24, 0x90	; 144
    21ec:	91 e0       	ldi	r25, 0x01	; 1
    21ee:	9d ab       	std	Y+53, r25	; 0x35
    21f0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21f2:	8c a9       	ldd	r24, Y+52	; 0x34
    21f4:	9d a9       	ldd	r25, Y+53	; 0x35
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <LCD_cmd+0x43e>
    21fa:	9d ab       	std	Y+53, r25	; 0x35
    21fc:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fe:	8e a9       	ldd	r24, Y+54	; 0x36
    2200:	9f a9       	ldd	r25, Y+55	; 0x37
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	9f ab       	std	Y+55, r25	; 0x37
    2206:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2208:	8e a9       	ldd	r24, Y+54	; 0x36
    220a:	9f a9       	ldd	r25, Y+55	; 0x37
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	69 f7       	brne	.-38     	; 0x21ea <LCD_cmd+0x432>
    2210:	2d c0       	rjmp	.+90     	; 0x226c <LCD_cmd+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2212:	68 ad       	ldd	r22, Y+56	; 0x38
    2214:	79 ad       	ldd	r23, Y+57	; 0x39
    2216:	8a ad       	ldd	r24, Y+58	; 0x3a
    2218:	9b ad       	ldd	r25, Y+59	; 0x3b
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9f ab       	std	Y+55, r25	; 0x37
    2224:	8e ab       	std	Y+54, r24	; 0x36
    2226:	8e a9       	ldd	r24, Y+54	; 0x36
    2228:	9f a9       	ldd	r25, Y+55	; 0x37
    222a:	9b ab       	std	Y+51, r25	; 0x33
    222c:	8a ab       	std	Y+50, r24	; 0x32
    222e:	8a a9       	ldd	r24, Y+50	; 0x32
    2230:	9b a9       	ldd	r25, Y+51	; 0x33
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <LCD_cmd+0x47a>
    2236:	9b ab       	std	Y+51, r25	; 0x33
    2238:	8a ab       	std	Y+50, r24	; 0x32
    223a:	18 c0       	rjmp	.+48     	; 0x226c <LCD_cmd+0x4b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    223c:	fe 01       	movw	r30, r28
    223e:	ef 5b       	subi	r30, 0xBF	; 191
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	60 81       	ld	r22, Z
    2244:	71 81       	ldd	r23, Z+1	; 0x01
    2246:	82 81       	ldd	r24, Z+2	; 0x02
    2248:	93 81       	ldd	r25, Z+3	; 0x03
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	fe 01       	movw	r30, r28
    2254:	e0 5c       	subi	r30, 0xC0	; 192
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 83       	st	Z, r24
    225a:	fe 01       	movw	r30, r28
    225c:	e0 5c       	subi	r30, 0xC0	; 192
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2264:	89 a9       	ldd	r24, Y+49	; 0x31
    2266:	8a 95       	dec	r24
    2268:	f1 f7       	brne	.-4      	; 0x2266 <LCD_cmd+0x4ae>
    226a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	Dio_write_PORT(D7, GET_BIT(cmd, 3));
    226c:	fe 01       	movw	r30, r28
    226e:	ef 59       	subi	r30, 0x9F	; 159
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	86 95       	lsr	r24
    2276:	86 95       	lsr	r24
    2278:	86 95       	lsr	r24
    227a:	98 2f       	mov	r25, r24
    227c:	91 70       	andi	r25, 0x01	; 1
    227e:	87 e0       	ldi	r24, 0x07	; 7
    2280:	69 2f       	mov	r22, r25
    2282:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(cmd, 2));
    2286:	fe 01       	movw	r30, r28
    2288:	ef 59       	subi	r30, 0x9F	; 159
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 81       	ld	r24, Z
    228e:	86 95       	lsr	r24
    2290:	86 95       	lsr	r24
    2292:	98 2f       	mov	r25, r24
    2294:	91 70       	andi	r25, 0x01	; 1
    2296:	86 e0       	ldi	r24, 0x06	; 6
    2298:	69 2f       	mov	r22, r25
    229a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(cmd, 1));
    229e:	fe 01       	movw	r30, r28
    22a0:	ef 59       	subi	r30, 0x9F	; 159
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	86 95       	lsr	r24
    22a8:	98 2f       	mov	r25, r24
    22aa:	91 70       	andi	r25, 0x01	; 1
    22ac:	85 e0       	ldi	r24, 0x05	; 5
    22ae:	69 2f       	mov	r22, r25
    22b0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D4, GET_BIT(cmd, 0));
    22b4:	fe 01       	movw	r30, r28
    22b6:	ef 59       	subi	r30, 0x9F	; 159
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	80 81       	ld	r24, Z
    22bc:	98 2f       	mov	r25, r24
    22be:	91 70       	andi	r25, 0x01	; 1
    22c0:	84 e0       	ldi	r24, 0x04	; 4
    22c2:	69 2f       	mov	r22, r25
    22c4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(E, HIGH);
    22c8:	8b e0       	ldi	r24, 0x0B	; 11
    22ca:	61 e0       	ldi	r22, 0x01	; 1
    22cc:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 e2       	ldi	r26, 0x20	; 32
    22d6:	b1 e4       	ldi	r27, 0x41	; 65
    22d8:	8d a7       	std	Y+45, r24	; 0x2d
    22da:	9e a7       	std	Y+46, r25	; 0x2e
    22dc:	af a7       	std	Y+47, r26	; 0x2f
    22de:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22e0:	6d a5       	ldd	r22, Y+45	; 0x2d
    22e2:	7e a5       	ldd	r23, Y+46	; 0x2e
    22e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e6:	98 a9       	ldd	r25, Y+48	; 0x30
    22e8:	2b ea       	ldi	r18, 0xAB	; 171
    22ea:	3a ea       	ldi	r19, 0xAA	; 170
    22ec:	4a ea       	ldi	r20, 0xAA	; 170
    22ee:	50 e4       	ldi	r21, 0x40	; 64
    22f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	89 a7       	std	Y+41, r24	; 0x29
    22fa:	9a a7       	std	Y+42, r25	; 0x2a
    22fc:	ab a7       	std	Y+43, r26	; 0x2b
    22fe:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2300:	69 a5       	ldd	r22, Y+41	; 0x29
    2302:	7a a5       	ldd	r23, Y+42	; 0x2a
    2304:	8b a5       	ldd	r24, Y+43	; 0x2b
    2306:	9c a5       	ldd	r25, Y+44	; 0x2c
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e8       	ldi	r20, 0x80	; 128
    230e:	5f e3       	ldi	r21, 0x3F	; 63
    2310:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2314:	88 23       	and	r24, r24
    2316:	1c f4       	brge	.+6      	; 0x231e <LCD_cmd+0x566>
		__ticks = 1;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	88 a7       	std	Y+40, r24	; 0x28
    231c:	91 c0       	rjmp	.+290    	; 0x2440 <LCD_cmd+0x688>
	else if (__tmp > 255)
    231e:	69 a5       	ldd	r22, Y+41	; 0x29
    2320:	7a a5       	ldd	r23, Y+42	; 0x2a
    2322:	8b a5       	ldd	r24, Y+43	; 0x2b
    2324:	9c a5       	ldd	r25, Y+44	; 0x2c
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	53 e4       	ldi	r21, 0x43	; 67
    232e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	0c f0       	brlt	.+2      	; 0x2338 <LCD_cmd+0x580>
    2336:	7b c0       	rjmp	.+246    	; 0x242e <LCD_cmd+0x676>
	{
		_delay_ms(__us / 1000.0);
    2338:	6d a5       	ldd	r22, Y+45	; 0x2d
    233a:	7e a5       	ldd	r23, Y+46	; 0x2e
    233c:	8f a5       	ldd	r24, Y+47	; 0x2f
    233e:	98 a9       	ldd	r25, Y+48	; 0x30
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a e7       	ldi	r20, 0x7A	; 122
    2346:	54 e4       	ldi	r21, 0x44	; 68
    2348:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	8c a3       	std	Y+36, r24	; 0x24
    2352:	9d a3       	std	Y+37, r25	; 0x25
    2354:	ae a3       	std	Y+38, r26	; 0x26
    2356:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2358:	6c a1       	ldd	r22, Y+36	; 0x24
    235a:	7d a1       	ldd	r23, Y+37	; 0x25
    235c:	8e a1       	ldd	r24, Y+38	; 0x26
    235e:	9f a1       	ldd	r25, Y+39	; 0x27
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	4a e7       	ldi	r20, 0x7A	; 122
    2366:	55 e4       	ldi	r21, 0x45	; 69
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	88 a3       	std	Y+32, r24	; 0x20
    2372:	99 a3       	std	Y+33, r25	; 0x21
    2374:	aa a3       	std	Y+34, r26	; 0x22
    2376:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2378:	68 a1       	ldd	r22, Y+32	; 0x20
    237a:	79 a1       	ldd	r23, Y+33	; 0x21
    237c:	8a a1       	ldd	r24, Y+34	; 0x22
    237e:	9b a1       	ldd	r25, Y+35	; 0x23
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e8       	ldi	r20, 0x80	; 128
    2386:	5f e3       	ldi	r21, 0x3F	; 63
    2388:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238c:	88 23       	and	r24, r24
    238e:	2c f4       	brge	.+10     	; 0x239a <LCD_cmd+0x5e2>
		__ticks = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9f 8f       	std	Y+31, r25	; 0x1f
    2396:	8e 8f       	std	Y+30, r24	; 0x1e
    2398:	3f c0       	rjmp	.+126    	; 0x2418 <LCD_cmd+0x660>
	else if (__tmp > 65535)
    239a:	68 a1       	ldd	r22, Y+32	; 0x20
    239c:	79 a1       	ldd	r23, Y+33	; 0x21
    239e:	8a a1       	ldd	r24, Y+34	; 0x22
    23a0:	9b a1       	ldd	r25, Y+35	; 0x23
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	4c f5       	brge	.+82     	; 0x2404 <LCD_cmd+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b2:	6c a1       	ldd	r22, Y+36	; 0x24
    23b4:	7d a1       	ldd	r23, Y+37	; 0x25
    23b6:	8e a1       	ldd	r24, Y+38	; 0x26
    23b8:	9f a1       	ldd	r25, Y+39	; 0x27
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e2       	ldi	r20, 0x20	; 32
    23c0:	51 e4       	ldi	r21, 0x41	; 65
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9f 8f       	std	Y+31, r25	; 0x1f
    23d8:	8e 8f       	std	Y+30, r24	; 0x1e
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <LCD_cmd+0x642>
    23dc:	80 e9       	ldi	r24, 0x90	; 144
    23de:	91 e0       	ldi	r25, 0x01	; 1
    23e0:	9d 8f       	std	Y+29, r25	; 0x1d
    23e2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <LCD_cmd+0x630>
    23ec:	9d 8f       	std	Y+29, r25	; 0x1d
    23ee:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	9f 8f       	std	Y+31, r25	; 0x1f
    23f8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f7       	brne	.-38     	; 0x23dc <LCD_cmd+0x624>
    2402:	24 c0       	rjmp	.+72     	; 0x244c <LCD_cmd+0x694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	68 a1       	ldd	r22, Y+32	; 0x20
    2406:	79 a1       	ldd	r23, Y+33	; 0x21
    2408:	8a a1       	ldd	r24, Y+34	; 0x22
    240a:	9b a1       	ldd	r25, Y+35	; 0x23
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9f 8f       	std	Y+31, r25	; 0x1f
    2416:	8e 8f       	std	Y+30, r24	; 0x1e
    2418:	8e 8d       	ldd	r24, Y+30	; 0x1e
    241a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    241c:	9b 8f       	std	Y+27, r25	; 0x1b
    241e:	8a 8f       	std	Y+26, r24	; 0x1a
    2420:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2422:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_cmd+0x66c>
    2428:	9b 8f       	std	Y+27, r25	; 0x1b
    242a:	8a 8f       	std	Y+26, r24	; 0x1a
    242c:	0f c0       	rjmp	.+30     	; 0x244c <LCD_cmd+0x694>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    242e:	69 a5       	ldd	r22, Y+41	; 0x29
    2430:	7a a5       	ldd	r23, Y+42	; 0x2a
    2432:	8b a5       	ldd	r24, Y+43	; 0x2b
    2434:	9c a5       	ldd	r25, Y+44	; 0x2c
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	88 a7       	std	Y+40, r24	; 0x28
    2440:	88 a5       	ldd	r24, Y+40	; 0x28
    2442:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2444:	89 8d       	ldd	r24, Y+25	; 0x19
    2446:	8a 95       	dec	r24
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_cmd+0x68e>
    244a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write_PORT(E, LOW);
    244c:	8b e0       	ldi	r24, 0x0B	; 11
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	a8 e4       	ldi	r26, 0x48	; 72
    245a:	b3 e4       	ldi	r27, 0x43	; 67
    245c:	8d 8b       	std	Y+21, r24	; 0x15
    245e:	9e 8b       	std	Y+22, r25	; 0x16
    2460:	af 8b       	std	Y+23, r26	; 0x17
    2462:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2464:	6d 89       	ldd	r22, Y+21	; 0x15
    2466:	7e 89       	ldd	r23, Y+22	; 0x16
    2468:	8f 89       	ldd	r24, Y+23	; 0x17
    246a:	98 8d       	ldd	r25, Y+24	; 0x18
    246c:	2b ea       	ldi	r18, 0xAB	; 171
    246e:	3a ea       	ldi	r19, 0xAA	; 170
    2470:	4a ea       	ldi	r20, 0xAA	; 170
    2472:	50 e4       	ldi	r21, 0x40	; 64
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	89 8b       	std	Y+17, r24	; 0x11
    247e:	9a 8b       	std	Y+18, r25	; 0x12
    2480:	ab 8b       	std	Y+19, r26	; 0x13
    2482:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2484:	69 89       	ldd	r22, Y+17	; 0x11
    2486:	7a 89       	ldd	r23, Y+18	; 0x12
    2488:	8b 89       	ldd	r24, Y+19	; 0x13
    248a:	9c 89       	ldd	r25, Y+20	; 0x14
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2498:	88 23       	and	r24, r24
    249a:	1c f4       	brge	.+6      	; 0x24a2 <LCD_cmd+0x6ea>
		__ticks = 1;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	88 8b       	std	Y+16, r24	; 0x10
    24a0:	91 c0       	rjmp	.+290    	; 0x25c4 <LCD_cmd+0x80c>
	else if (__tmp > 255)
    24a2:	69 89       	ldd	r22, Y+17	; 0x11
    24a4:	7a 89       	ldd	r23, Y+18	; 0x12
    24a6:	8b 89       	ldd	r24, Y+19	; 0x13
    24a8:	9c 89       	ldd	r25, Y+20	; 0x14
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	4f e7       	ldi	r20, 0x7F	; 127
    24b0:	53 e4       	ldi	r21, 0x43	; 67
    24b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b6:	18 16       	cp	r1, r24
    24b8:	0c f0       	brlt	.+2      	; 0x24bc <LCD_cmd+0x704>
    24ba:	7b c0       	rjmp	.+246    	; 0x25b2 <LCD_cmd+0x7fa>
	{
		_delay_ms(__us / 1000.0);
    24bc:	6d 89       	ldd	r22, Y+21	; 0x15
    24be:	7e 89       	ldd	r23, Y+22	; 0x16
    24c0:	8f 89       	ldd	r24, Y+23	; 0x17
    24c2:	98 8d       	ldd	r25, Y+24	; 0x18
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	4a e7       	ldi	r20, 0x7A	; 122
    24ca:	54 e4       	ldi	r21, 0x44	; 68
    24cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	8c 87       	std	Y+12, r24	; 0x0c
    24d6:	9d 87       	std	Y+13, r25	; 0x0d
    24d8:	ae 87       	std	Y+14, r26	; 0x0e
    24da:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    24de:	7d 85       	ldd	r23, Y+13	; 0x0d
    24e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    24e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	4a e7       	ldi	r20, 0x7A	; 122
    24ea:	55 e4       	ldi	r21, 0x45	; 69
    24ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	88 87       	std	Y+8, r24	; 0x08
    24f6:	99 87       	std	Y+9, r25	; 0x09
    24f8:	aa 87       	std	Y+10, r26	; 0x0a
    24fa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24fc:	68 85       	ldd	r22, Y+8	; 0x08
    24fe:	79 85       	ldd	r23, Y+9	; 0x09
    2500:	8a 85       	ldd	r24, Y+10	; 0x0a
    2502:	9b 85       	ldd	r25, Y+11	; 0x0b
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e8       	ldi	r20, 0x80	; 128
    250a:	5f e3       	ldi	r21, 0x3F	; 63
    250c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2510:	88 23       	and	r24, r24
    2512:	2c f4       	brge	.+10     	; 0x251e <LCD_cmd+0x766>
		__ticks = 1;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9f 83       	std	Y+7, r25	; 0x07
    251a:	8e 83       	std	Y+6, r24	; 0x06
    251c:	3f c0       	rjmp	.+126    	; 0x259c <LCD_cmd+0x7e4>
	else if (__tmp > 65535)
    251e:	68 85       	ldd	r22, Y+8	; 0x08
    2520:	79 85       	ldd	r23, Y+9	; 0x09
    2522:	8a 85       	ldd	r24, Y+10	; 0x0a
    2524:	9b 85       	ldd	r25, Y+11	; 0x0b
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	3f ef       	ldi	r19, 0xFF	; 255
    252a:	4f e7       	ldi	r20, 0x7F	; 127
    252c:	57 e4       	ldi	r21, 0x47	; 71
    252e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2532:	18 16       	cp	r1, r24
    2534:	4c f5       	brge	.+82     	; 0x2588 <LCD_cmd+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2536:	6c 85       	ldd	r22, Y+12	; 0x0c
    2538:	7d 85       	ldd	r23, Y+13	; 0x0d
    253a:	8e 85       	ldd	r24, Y+14	; 0x0e
    253c:	9f 85       	ldd	r25, Y+15	; 0x0f
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e2       	ldi	r20, 0x20	; 32
    2544:	51 e4       	ldi	r21, 0x41	; 65
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9f 83       	std	Y+7, r25	; 0x07
    255c:	8e 83       	std	Y+6, r24	; 0x06
    255e:	0f c0       	rjmp	.+30     	; 0x257e <LCD_cmd+0x7c6>
    2560:	80 e9       	ldi	r24, 0x90	; 144
    2562:	91 e0       	ldi	r25, 0x01	; 1
    2564:	9d 83       	std	Y+5, r25	; 0x05
    2566:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2568:	8c 81       	ldd	r24, Y+4	; 0x04
    256a:	9d 81       	ldd	r25, Y+5	; 0x05
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_cmd+0x7b4>
    2570:	9d 83       	std	Y+5, r25	; 0x05
    2572:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2574:	8e 81       	ldd	r24, Y+6	; 0x06
    2576:	9f 81       	ldd	r25, Y+7	; 0x07
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	9f 83       	std	Y+7, r25	; 0x07
    257c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257e:	8e 81       	ldd	r24, Y+6	; 0x06
    2580:	9f 81       	ldd	r25, Y+7	; 0x07
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	69 f7       	brne	.-38     	; 0x2560 <LCD_cmd+0x7a8>
    2586:	24 c0       	rjmp	.+72     	; 0x25d0 <LCD_cmd+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2588:	68 85       	ldd	r22, Y+8	; 0x08
    258a:	79 85       	ldd	r23, Y+9	; 0x09
    258c:	8a 85       	ldd	r24, Y+10	; 0x0a
    258e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	9f 83       	std	Y+7, r25	; 0x07
    259a:	8e 83       	std	Y+6, r24	; 0x06
    259c:	8e 81       	ldd	r24, Y+6	; 0x06
    259e:	9f 81       	ldd	r25, Y+7	; 0x07
    25a0:	9b 83       	std	Y+3, r25	; 0x03
    25a2:	8a 83       	std	Y+2, r24	; 0x02
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	9b 81       	ldd	r25, Y+3	; 0x03
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_cmd+0x7f0>
    25ac:	9b 83       	std	Y+3, r25	; 0x03
    25ae:	8a 83       	std	Y+2, r24	; 0x02
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <LCD_cmd+0x818>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25b2:	69 89       	ldd	r22, Y+17	; 0x11
    25b4:	7a 89       	ldd	r23, Y+18	; 0x12
    25b6:	8b 89       	ldd	r24, Y+19	; 0x13
    25b8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	88 8b       	std	Y+16, r24	; 0x10
    25c4:	88 89       	ldd	r24, Y+16	; 0x10
    25c6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	8a 95       	dec	r24
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <LCD_cmd+0x812>
    25ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    25d0:	cf 59       	subi	r28, 0x9F	; 159
    25d2:	df 4f       	sbci	r29, 0xFF	; 255
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	08 95       	ret

000025e8 <LCD_data_write>:



void LCD_data_write(uint8 data) {
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	c1 56       	subi	r28, 0x61	; 97
    25f6:	d0 40       	sbci	r29, 0x00	; 0
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	fe 01       	movw	r30, r28
    2604:	ef 59       	subi	r30, 0x9F	; 159
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	80 83       	st	Z, r24
	Dio_write_PORT(Rs, HIGH);
    260a:	89 e0       	ldi	r24, 0x09	; 9
    260c:	61 e0       	ldi	r22, 0x01	; 1
    260e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(Rw, LOW);
    2612:	8a e0       	ldi	r24, 0x0A	; 10
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>

	Dio_write_PORT(D4, GET_BIT(data, 4));
    261a:	fe 01       	movw	r30, r28
    261c:	ef 59       	subi	r30, 0x9F	; 159
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 81       	ld	r24, Z
    2622:	82 95       	swap	r24
    2624:	8f 70       	andi	r24, 0x0F	; 15
    2626:	98 2f       	mov	r25, r24
    2628:	91 70       	andi	r25, 0x01	; 1
    262a:	84 e0       	ldi	r24, 0x04	; 4
    262c:	69 2f       	mov	r22, r25
    262e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(data, 5));
    2632:	fe 01       	movw	r30, r28
    2634:	ef 59       	subi	r30, 0x9F	; 159
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	80 81       	ld	r24, Z
    263a:	82 95       	swap	r24
    263c:	86 95       	lsr	r24
    263e:	87 70       	andi	r24, 0x07	; 7
    2640:	98 2f       	mov	r25, r24
    2642:	91 70       	andi	r25, 0x01	; 1
    2644:	85 e0       	ldi	r24, 0x05	; 5
    2646:	69 2f       	mov	r22, r25
    2648:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(data, 6));
    264c:	fe 01       	movw	r30, r28
    264e:	ef 59       	subi	r30, 0x9F	; 159
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	80 81       	ld	r24, Z
    2654:	82 95       	swap	r24
    2656:	86 95       	lsr	r24
    2658:	86 95       	lsr	r24
    265a:	83 70       	andi	r24, 0x03	; 3
    265c:	98 2f       	mov	r25, r24
    265e:	91 70       	andi	r25, 0x01	; 1
    2660:	86 e0       	ldi	r24, 0x06	; 6
    2662:	69 2f       	mov	r22, r25
    2664:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D7, GET_BIT(data, 7));
    2668:	fe 01       	movw	r30, r28
    266a:	ef 59       	subi	r30, 0x9F	; 159
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	98 2f       	mov	r25, r24
    2672:	99 1f       	adc	r25, r25
    2674:	99 27       	eor	r25, r25
    2676:	99 1f       	adc	r25, r25
    2678:	87 e0       	ldi	r24, 0x07	; 7
    267a:	69 2f       	mov	r22, r25
    267c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>

	Dio_write_PORT(E, HIGH);
    2680:	8b e0       	ldi	r24, 0x0B	; 11
    2682:	61 e0       	ldi	r22, 0x01	; 1
    2684:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    2688:	fe 01       	movw	r30, r28
    268a:	e3 5a       	subi	r30, 0xA3	; 163
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	a0 e2       	ldi	r26, 0x20	; 32
    2694:	b1 e4       	ldi	r27, 0x41	; 65
    2696:	80 83       	st	Z, r24
    2698:	91 83       	std	Z+1, r25	; 0x01
    269a:	a2 83       	std	Z+2, r26	; 0x02
    269c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    269e:	8e 01       	movw	r16, r28
    26a0:	07 5a       	subi	r16, 0xA7	; 167
    26a2:	1f 4f       	sbci	r17, 0xFF	; 255
    26a4:	fe 01       	movw	r30, r28
    26a6:	e3 5a       	subi	r30, 0xA3	; 163
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	60 81       	ld	r22, Z
    26ac:	71 81       	ldd	r23, Z+1	; 0x01
    26ae:	82 81       	ldd	r24, Z+2	; 0x02
    26b0:	93 81       	ldd	r25, Z+3	; 0x03
    26b2:	2b ea       	ldi	r18, 0xAB	; 171
    26b4:	3a ea       	ldi	r19, 0xAA	; 170
    26b6:	4a ea       	ldi	r20, 0xAA	; 170
    26b8:	50 e4       	ldi	r21, 0x40	; 64
    26ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	f8 01       	movw	r30, r16
    26c4:	80 83       	st	Z, r24
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	a2 83       	std	Z+2, r26	; 0x02
    26ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26cc:	fe 01       	movw	r30, r28
    26ce:	e7 5a       	subi	r30, 0xA7	; 167
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e8       	ldi	r20, 0x80	; 128
    26e0:	5f e3       	ldi	r21, 0x3F	; 63
    26e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26e6:	88 23       	and	r24, r24
    26e8:	34 f4       	brge	.+12     	; 0x26f6 <LCD_data_write+0x10e>
		__ticks = 1;
    26ea:	fe 01       	movw	r30, r28
    26ec:	e8 5a       	subi	r30, 0xA8	; 168
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	80 83       	st	Z, r24
    26f4:	e0 c0       	rjmp	.+448    	; 0x28b6 <LCD_data_write+0x2ce>
	else if (__tmp > 255)
    26f6:	fe 01       	movw	r30, r28
    26f8:	e7 5a       	subi	r30, 0xA7	; 167
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	4f e7       	ldi	r20, 0x7F	; 127
    270a:	53 e4       	ldi	r21, 0x43	; 67
    270c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2710:	18 16       	cp	r1, r24
    2712:	0c f0       	brlt	.+2      	; 0x2716 <LCD_data_write+0x12e>
    2714:	c0 c0       	rjmp	.+384    	; 0x2896 <LCD_data_write+0x2ae>
	{
		_delay_ms(__us / 1000.0);
    2716:	fe 01       	movw	r30, r28
    2718:	e3 5a       	subi	r30, 0xA3	; 163
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	4a e7       	ldi	r20, 0x7A	; 122
    272a:	54 e4       	ldi	r21, 0x44	; 68
    272c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	fe 01       	movw	r30, r28
    2736:	ec 5a       	subi	r30, 0xAC	; 172
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 83       	st	Z, r24
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	a2 83       	std	Z+2, r26	; 0x02
    2740:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2742:	8e 01       	movw	r16, r28
    2744:	00 5b       	subi	r16, 0xB0	; 176
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	fe 01       	movw	r30, r28
    274a:	ec 5a       	subi	r30, 0xAC	; 172
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	4a e7       	ldi	r20, 0x7A	; 122
    275c:	55 e4       	ldi	r21, 0x45	; 69
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	f8 01       	movw	r30, r16
    2768:	80 83       	st	Z, r24
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	a2 83       	std	Z+2, r26	; 0x02
    276e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2770:	fe 01       	movw	r30, r28
    2772:	e0 5b       	subi	r30, 0xB0	; 176
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	60 81       	ld	r22, Z
    2778:	71 81       	ldd	r23, Z+1	; 0x01
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	93 81       	ldd	r25, Z+3	; 0x03
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	44 f4       	brge	.+16     	; 0x279e <LCD_data_write+0x1b6>
		__ticks = 1;
    278e:	fe 01       	movw	r30, r28
    2790:	e2 5b       	subi	r30, 0xB2	; 178
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
    279c:	64 c0       	rjmp	.+200    	; 0x2866 <LCD_data_write+0x27e>
	else if (__tmp > 65535)
    279e:	fe 01       	movw	r30, r28
    27a0:	e0 5b       	subi	r30, 0xB0	; 176
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	60 81       	ld	r22, Z
    27a6:	71 81       	ldd	r23, Z+1	; 0x01
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	57 e4       	ldi	r21, 0x47	; 71
    27b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b8:	18 16       	cp	r1, r24
    27ba:	0c f0       	brlt	.+2      	; 0x27be <LCD_data_write+0x1d6>
    27bc:	43 c0       	rjmp	.+134    	; 0x2844 <LCD_data_write+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27be:	fe 01       	movw	r30, r28
    27c0:	ec 5a       	subi	r30, 0xAC	; 172
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e2       	ldi	r20, 0x20	; 32
    27d2:	51 e4       	ldi	r21, 0x41	; 65
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	8e 01       	movw	r16, r28
    27de:	02 5b       	subi	r16, 0xB2	; 178
    27e0:	1f 4f       	sbci	r17, 0xFF	; 255
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	f8 01       	movw	r30, r16
    27f0:	91 83       	std	Z+1, r25	; 0x01
    27f2:	80 83       	st	Z, r24
    27f4:	1f c0       	rjmp	.+62     	; 0x2834 <LCD_data_write+0x24c>
    27f6:	fe 01       	movw	r30, r28
    27f8:	e4 5b       	subi	r30, 0xB4	; 180
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 e9       	ldi	r24, 0x90	; 144
    27fe:	91 e0       	ldi	r25, 0x01	; 1
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2804:	fe 01       	movw	r30, r28
    2806:	e4 5b       	subi	r30, 0xB4	; 180
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <LCD_data_write+0x226>
    2812:	fe 01       	movw	r30, r28
    2814:	e4 5b       	subi	r30, 0xB4	; 180
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281c:	de 01       	movw	r26, r28
    281e:	a2 5b       	subi	r26, 0xB2	; 178
    2820:	bf 4f       	sbci	r27, 0xFF	; 255
    2822:	fe 01       	movw	r30, r28
    2824:	e2 5b       	subi	r30, 0xB2	; 178
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	9c 93       	st	X, r25
    2832:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2834:	fe 01       	movw	r30, r28
    2836:	e2 5b       	subi	r30, 0xB2	; 178
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	d1 f6       	brne	.-76     	; 0x27f6 <LCD_data_write+0x20e>
    2842:	4b c0       	rjmp	.+150    	; 0x28da <LCD_data_write+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	8e 01       	movw	r16, r28
    2846:	02 5b       	subi	r16, 0xB2	; 178
    2848:	1f 4f       	sbci	r17, 0xFF	; 255
    284a:	fe 01       	movw	r30, r28
    284c:	e0 5b       	subi	r30, 0xB0	; 176
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	f8 01       	movw	r30, r16
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	80 83       	st	Z, r24
    2866:	de 01       	movw	r26, r28
    2868:	a6 5b       	subi	r26, 0xB6	; 182
    286a:	bf 4f       	sbci	r27, 0xFF	; 255
    286c:	fe 01       	movw	r30, r28
    286e:	e2 5b       	subi	r30, 0xB2	; 178
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	80 81       	ld	r24, Z
    2874:	91 81       	ldd	r25, Z+1	; 0x01
    2876:	11 96       	adiw	r26, 0x01	; 1
    2878:	9c 93       	st	X, r25
    287a:	8e 93       	st	-X, r24
    287c:	fe 01       	movw	r30, r28
    287e:	e6 5b       	subi	r30, 0xB6	; 182
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	91 81       	ldd	r25, Z+1	; 0x01
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <LCD_data_write+0x29e>
    288a:	fe 01       	movw	r30, r28
    288c:	e6 5b       	subi	r30, 0xB6	; 182
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
    2894:	22 c0       	rjmp	.+68     	; 0x28da <LCD_data_write+0x2f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2896:	8e 01       	movw	r16, r28
    2898:	08 5a       	subi	r16, 0xA8	; 168
    289a:	1f 4f       	sbci	r17, 0xFF	; 255
    289c:	fe 01       	movw	r30, r28
    289e:	e7 5a       	subi	r30, 0xA7	; 167
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	60 81       	ld	r22, Z
    28a4:	71 81       	ldd	r23, Z+1	; 0x01
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	f8 01       	movw	r30, r16
    28b4:	80 83       	st	Z, r24
    28b6:	de 01       	movw	r26, r28
    28b8:	a7 5b       	subi	r26, 0xB7	; 183
    28ba:	bf 4f       	sbci	r27, 0xFF	; 255
    28bc:	fe 01       	movw	r30, r28
    28be:	e8 5a       	subi	r30, 0xA8	; 168
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 81       	ld	r24, Z
    28c4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28c6:	fe 01       	movw	r30, r28
    28c8:	e7 5b       	subi	r30, 0xB7	; 183
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 81       	ld	r24, Z
    28ce:	8a 95       	dec	r24
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <LCD_data_write+0x2e6>
    28d2:	fe 01       	movw	r30, r28
    28d4:	e7 5b       	subi	r30, 0xB7	; 183
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 83       	st	Z, r24
	_delay_us(10);
	Dio_write_PORT(E, LOW);
    28da:	8b e0       	ldi	r24, 0x0B	; 11
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    28e2:	fe 01       	movw	r30, r28
    28e4:	eb 5b       	subi	r30, 0xBB	; 187
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	a8 e4       	ldi	r26, 0x48	; 72
    28ee:	b3 e4       	ldi	r27, 0x43	; 67
    28f0:	80 83       	st	Z, r24
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	a2 83       	std	Z+2, r26	; 0x02
    28f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28f8:	8e 01       	movw	r16, r28
    28fa:	0f 5b       	subi	r16, 0xBF	; 191
    28fc:	1f 4f       	sbci	r17, 0xFF	; 255
    28fe:	fe 01       	movw	r30, r28
    2900:	eb 5b       	subi	r30, 0xBB	; 187
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	60 81       	ld	r22, Z
    2906:	71 81       	ldd	r23, Z+1	; 0x01
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	2b ea       	ldi	r18, 0xAB	; 171
    290e:	3a ea       	ldi	r19, 0xAA	; 170
    2910:	4a ea       	ldi	r20, 0xAA	; 170
    2912:	50 e4       	ldi	r21, 0x40	; 64
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	f8 01       	movw	r30, r16
    291e:	80 83       	st	Z, r24
    2920:	91 83       	std	Z+1, r25	; 0x01
    2922:	a2 83       	std	Z+2, r26	; 0x02
    2924:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2926:	fe 01       	movw	r30, r28
    2928:	ef 5b       	subi	r30, 0xBF	; 191
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	60 81       	ld	r22, Z
    292e:	71 81       	ldd	r23, Z+1	; 0x01
    2930:	82 81       	ldd	r24, Z+2	; 0x02
    2932:	93 81       	ldd	r25, Z+3	; 0x03
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	34 f4       	brge	.+12     	; 0x2950 <LCD_data_write+0x368>
		__ticks = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	fe 01       	movw	r30, r28
    2948:	e0 5c       	subi	r30, 0xC0	; 192
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	80 83       	st	Z, r24
    294e:	9d c0       	rjmp	.+314    	; 0x2a8a <LCD_data_write+0x4a2>
	else if (__tmp > 255)
    2950:	fe 01       	movw	r30, r28
    2952:	ef 5b       	subi	r30, 0xBF	; 191
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4f e7       	ldi	r20, 0x7F	; 127
    2964:	53 e4       	ldi	r21, 0x43	; 67
    2966:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    296a:	18 16       	cp	r1, r24
    296c:	0c f0       	brlt	.+2      	; 0x2970 <LCD_data_write+0x388>
    296e:	7e c0       	rjmp	.+252    	; 0x2a6c <LCD_data_write+0x484>
	{
		_delay_ms(__us / 1000.0);
    2970:	fe 01       	movw	r30, r28
    2972:	eb 5b       	subi	r30, 0xBB	; 187
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	60 81       	ld	r22, Z
    2978:	71 81       	ldd	r23, Z+1	; 0x01
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	4a e7       	ldi	r20, 0x7A	; 122
    2984:	54 e4       	ldi	r21, 0x44	; 68
    2986:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	8c af       	std	Y+60, r24	; 0x3c
    2990:	9d af       	std	Y+61, r25	; 0x3d
    2992:	ae af       	std	Y+62, r26	; 0x3e
    2994:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2996:	6c ad       	ldd	r22, Y+60	; 0x3c
    2998:	7d ad       	ldd	r23, Y+61	; 0x3d
    299a:	8e ad       	ldd	r24, Y+62	; 0x3e
    299c:	9f ad       	ldd	r25, Y+63	; 0x3f
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	4a e7       	ldi	r20, 0x7A	; 122
    29a4:	55 e4       	ldi	r21, 0x45	; 69
    29a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	88 af       	std	Y+56, r24	; 0x38
    29b0:	99 af       	std	Y+57, r25	; 0x39
    29b2:	aa af       	std	Y+58, r26	; 0x3a
    29b4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    29b6:	68 ad       	ldd	r22, Y+56	; 0x38
    29b8:	79 ad       	ldd	r23, Y+57	; 0x39
    29ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    29bc:	9b ad       	ldd	r25, Y+59	; 0x3b
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e8       	ldi	r20, 0x80	; 128
    29c4:	5f e3       	ldi	r21, 0x3F	; 63
    29c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ca:	88 23       	and	r24, r24
    29cc:	2c f4       	brge	.+10     	; 0x29d8 <LCD_data_write+0x3f0>
		__ticks = 1;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	9f ab       	std	Y+55, r25	; 0x37
    29d4:	8e ab       	std	Y+54, r24	; 0x36
    29d6:	3f c0       	rjmp	.+126    	; 0x2a56 <LCD_data_write+0x46e>
	else if (__tmp > 65535)
    29d8:	68 ad       	ldd	r22, Y+56	; 0x38
    29da:	79 ad       	ldd	r23, Y+57	; 0x39
    29dc:	8a ad       	ldd	r24, Y+58	; 0x3a
    29de:	9b ad       	ldd	r25, Y+59	; 0x3b
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	3f ef       	ldi	r19, 0xFF	; 255
    29e4:	4f e7       	ldi	r20, 0x7F	; 127
    29e6:	57 e4       	ldi	r21, 0x47	; 71
    29e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ec:	18 16       	cp	r1, r24
    29ee:	4c f5       	brge	.+82     	; 0x2a42 <LCD_data_write+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f0:	6c ad       	ldd	r22, Y+60	; 0x3c
    29f2:	7d ad       	ldd	r23, Y+61	; 0x3d
    29f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    29f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e2       	ldi	r20, 0x20	; 32
    29fe:	51 e4       	ldi	r21, 0x41	; 65
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	bc 01       	movw	r22, r24
    2a0a:	cd 01       	movw	r24, r26
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	9f ab       	std	Y+55, r25	; 0x37
    2a16:	8e ab       	std	Y+54, r24	; 0x36
    2a18:	0f c0       	rjmp	.+30     	; 0x2a38 <LCD_data_write+0x450>
    2a1a:	80 e9       	ldi	r24, 0x90	; 144
    2a1c:	91 e0       	ldi	r25, 0x01	; 1
    2a1e:	9d ab       	std	Y+53, r25	; 0x35
    2a20:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a22:	8c a9       	ldd	r24, Y+52	; 0x34
    2a24:	9d a9       	ldd	r25, Y+53	; 0x35
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <LCD_data_write+0x43e>
    2a2a:	9d ab       	std	Y+53, r25	; 0x35
    2a2c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2e:	8e a9       	ldd	r24, Y+54	; 0x36
    2a30:	9f a9       	ldd	r25, Y+55	; 0x37
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	9f ab       	std	Y+55, r25	; 0x37
    2a36:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a38:	8e a9       	ldd	r24, Y+54	; 0x36
    2a3a:	9f a9       	ldd	r25, Y+55	; 0x37
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	69 f7       	brne	.-38     	; 0x2a1a <LCD_data_write+0x432>
    2a40:	2d c0       	rjmp	.+90     	; 0x2a9c <LCD_data_write+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a42:	68 ad       	ldd	r22, Y+56	; 0x38
    2a44:	79 ad       	ldd	r23, Y+57	; 0x39
    2a46:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a48:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	9f ab       	std	Y+55, r25	; 0x37
    2a54:	8e ab       	std	Y+54, r24	; 0x36
    2a56:	8e a9       	ldd	r24, Y+54	; 0x36
    2a58:	9f a9       	ldd	r25, Y+55	; 0x37
    2a5a:	9b ab       	std	Y+51, r25	; 0x33
    2a5c:	8a ab       	std	Y+50, r24	; 0x32
    2a5e:	8a a9       	ldd	r24, Y+50	; 0x32
    2a60:	9b a9       	ldd	r25, Y+51	; 0x33
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	f1 f7       	brne	.-4      	; 0x2a62 <LCD_data_write+0x47a>
    2a66:	9b ab       	std	Y+51, r25	; 0x33
    2a68:	8a ab       	std	Y+50, r24	; 0x32
    2a6a:	18 c0       	rjmp	.+48     	; 0x2a9c <LCD_data_write+0x4b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	ef 5b       	subi	r30, 0xBF	; 191
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	60 81       	ld	r22, Z
    2a74:	71 81       	ldd	r23, Z+1	; 0x01
    2a76:	82 81       	ldd	r24, Z+2	; 0x02
    2a78:	93 81       	ldd	r25, Z+3	; 0x03
    2a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	fe 01       	movw	r30, r28
    2a84:	e0 5c       	subi	r30, 0xC0	; 192
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 83       	st	Z, r24
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e0 5c       	subi	r30, 0xC0	; 192
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a94:	89 a9       	ldd	r24, Y+49	; 0x31
    2a96:	8a 95       	dec	r24
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <LCD_data_write+0x4ae>
    2a9a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	Dio_write_PORT(D4, GET_BIT(data, 0));
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ef 59       	subi	r30, 0x9F	; 159
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 81       	ld	r24, Z
    2aa4:	98 2f       	mov	r25, r24
    2aa6:	91 70       	andi	r25, 0x01	; 1
    2aa8:	84 e0       	ldi	r24, 0x04	; 4
    2aaa:	69 2f       	mov	r22, r25
    2aac:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(data, 1));
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ef 59       	subi	r30, 0x9F	; 159
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	80 81       	ld	r24, Z
    2ab8:	86 95       	lsr	r24
    2aba:	98 2f       	mov	r25, r24
    2abc:	91 70       	andi	r25, 0x01	; 1
    2abe:	85 e0       	ldi	r24, 0x05	; 5
    2ac0:	69 2f       	mov	r22, r25
    2ac2:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(data, 2));
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	ef 59       	subi	r30, 0x9F	; 159
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 81       	ld	r24, Z
    2ace:	86 95       	lsr	r24
    2ad0:	86 95       	lsr	r24
    2ad2:	98 2f       	mov	r25, r24
    2ad4:	91 70       	andi	r25, 0x01	; 1
    2ad6:	86 e0       	ldi	r24, 0x06	; 6
    2ad8:	69 2f       	mov	r22, r25
    2ada:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D7, GET_BIT(data, 3));
    2ade:	fe 01       	movw	r30, r28
    2ae0:	ef 59       	subi	r30, 0x9F	; 159
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	80 81       	ld	r24, Z
    2ae6:	86 95       	lsr	r24
    2ae8:	86 95       	lsr	r24
    2aea:	86 95       	lsr	r24
    2aec:	98 2f       	mov	r25, r24
    2aee:	91 70       	andi	r25, 0x01	; 1
    2af0:	87 e0       	ldi	r24, 0x07	; 7
    2af2:	69 2f       	mov	r22, r25
    2af4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>

	Dio_write_PORT(E, HIGH);
    2af8:	8b e0       	ldi	r24, 0x0B	; 11
    2afa:	61 e0       	ldi	r22, 0x01	; 1
    2afc:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	a0 e2       	ldi	r26, 0x20	; 32
    2b06:	b1 e4       	ldi	r27, 0x41	; 65
    2b08:	8d a7       	std	Y+45, r24	; 0x2d
    2b0a:	9e a7       	std	Y+46, r25	; 0x2e
    2b0c:	af a7       	std	Y+47, r26	; 0x2f
    2b0e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b10:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b12:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b16:	98 a9       	ldd	r25, Y+48	; 0x30
    2b18:	2b ea       	ldi	r18, 0xAB	; 171
    2b1a:	3a ea       	ldi	r19, 0xAA	; 170
    2b1c:	4a ea       	ldi	r20, 0xAA	; 170
    2b1e:	50 e4       	ldi	r21, 0x40	; 64
    2b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	89 a7       	std	Y+41, r24	; 0x29
    2b2a:	9a a7       	std	Y+42, r25	; 0x2a
    2b2c:	ab a7       	std	Y+43, r26	; 0x2b
    2b2e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2b30:	69 a5       	ldd	r22, Y+41	; 0x29
    2b32:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b34:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b36:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e8       	ldi	r20, 0x80	; 128
    2b3e:	5f e3       	ldi	r21, 0x3F	; 63
    2b40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b44:	88 23       	and	r24, r24
    2b46:	1c f4       	brge	.+6      	; 0x2b4e <LCD_data_write+0x566>
		__ticks = 1;
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	88 a7       	std	Y+40, r24	; 0x28
    2b4c:	91 c0       	rjmp	.+290    	; 0x2c70 <LCD_data_write+0x688>
	else if (__tmp > 255)
    2b4e:	69 a5       	ldd	r22, Y+41	; 0x29
    2b50:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b52:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b54:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	53 e4       	ldi	r21, 0x43	; 67
    2b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	0c f0       	brlt	.+2      	; 0x2b68 <LCD_data_write+0x580>
    2b66:	7b c0       	rjmp	.+246    	; 0x2c5e <LCD_data_write+0x676>
	{
		_delay_ms(__us / 1000.0);
    2b68:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b6a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	4a e7       	ldi	r20, 0x7A	; 122
    2b76:	54 e4       	ldi	r21, 0x44	; 68
    2b78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	8c a3       	std	Y+36, r24	; 0x24
    2b82:	9d a3       	std	Y+37, r25	; 0x25
    2b84:	ae a3       	std	Y+38, r26	; 0x26
    2b86:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b88:	6c a1       	ldd	r22, Y+36	; 0x24
    2b8a:	7d a1       	ldd	r23, Y+37	; 0x25
    2b8c:	8e a1       	ldd	r24, Y+38	; 0x26
    2b8e:	9f a1       	ldd	r25, Y+39	; 0x27
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	4a e7       	ldi	r20, 0x7A	; 122
    2b96:	55 e4       	ldi	r21, 0x45	; 69
    2b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	88 a3       	std	Y+32, r24	; 0x20
    2ba2:	99 a3       	std	Y+33, r25	; 0x21
    2ba4:	aa a3       	std	Y+34, r26	; 0x22
    2ba6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2ba8:	68 a1       	ldd	r22, Y+32	; 0x20
    2baa:	79 a1       	ldd	r23, Y+33	; 0x21
    2bac:	8a a1       	ldd	r24, Y+34	; 0x22
    2bae:	9b a1       	ldd	r25, Y+35	; 0x23
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bbc:	88 23       	and	r24, r24
    2bbe:	2c f4       	brge	.+10     	; 0x2bca <LCD_data_write+0x5e2>
		__ticks = 1;
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	9f 8f       	std	Y+31, r25	; 0x1f
    2bc6:	8e 8f       	std	Y+30, r24	; 0x1e
    2bc8:	3f c0       	rjmp	.+126    	; 0x2c48 <LCD_data_write+0x660>
	else if (__tmp > 65535)
    2bca:	68 a1       	ldd	r22, Y+32	; 0x20
    2bcc:	79 a1       	ldd	r23, Y+33	; 0x21
    2bce:	8a a1       	ldd	r24, Y+34	; 0x22
    2bd0:	9b a1       	ldd	r25, Y+35	; 0x23
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	3f ef       	ldi	r19, 0xFF	; 255
    2bd6:	4f e7       	ldi	r20, 0x7F	; 127
    2bd8:	57 e4       	ldi	r21, 0x47	; 71
    2bda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bde:	18 16       	cp	r1, r24
    2be0:	4c f5       	brge	.+82     	; 0x2c34 <LCD_data_write+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be2:	6c a1       	ldd	r22, Y+36	; 0x24
    2be4:	7d a1       	ldd	r23, Y+37	; 0x25
    2be6:	8e a1       	ldd	r24, Y+38	; 0x26
    2be8:	9f a1       	ldd	r25, Y+39	; 0x27
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e2       	ldi	r20, 0x20	; 32
    2bf0:	51 e4       	ldi	r21, 0x41	; 65
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	9f 8f       	std	Y+31, r25	; 0x1f
    2c08:	8e 8f       	std	Y+30, r24	; 0x1e
    2c0a:	0f c0       	rjmp	.+30     	; 0x2c2a <LCD_data_write+0x642>
    2c0c:	80 e9       	ldi	r24, 0x90	; 144
    2c0e:	91 e0       	ldi	r25, 0x01	; 1
    2c10:	9d 8f       	std	Y+29, r25	; 0x1d
    2c12:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c14:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c16:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	f1 f7       	brne	.-4      	; 0x2c18 <LCD_data_write+0x630>
    2c1c:	9d 8f       	std	Y+29, r25	; 0x1d
    2c1e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c22:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	9f 8f       	std	Y+31, r25	; 0x1f
    2c28:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c2c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	69 f7       	brne	.-38     	; 0x2c0c <LCD_data_write+0x624>
    2c32:	24 c0       	rjmp	.+72     	; 0x2c7c <LCD_data_write+0x694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c34:	68 a1       	ldd	r22, Y+32	; 0x20
    2c36:	79 a1       	ldd	r23, Y+33	; 0x21
    2c38:	8a a1       	ldd	r24, Y+34	; 0x22
    2c3a:	9b a1       	ldd	r25, Y+35	; 0x23
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9f 8f       	std	Y+31, r25	; 0x1f
    2c46:	8e 8f       	std	Y+30, r24	; 0x1e
    2c48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c4a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c4c:	9b 8f       	std	Y+27, r25	; 0x1b
    2c4e:	8a 8f       	std	Y+26, r24	; 0x1a
    2c50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c52:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <LCD_data_write+0x66c>
    2c58:	9b 8f       	std	Y+27, r25	; 0x1b
    2c5a:	8a 8f       	std	Y+26, r24	; 0x1a
    2c5c:	0f c0       	rjmp	.+30     	; 0x2c7c <LCD_data_write+0x694>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c5e:	69 a5       	ldd	r22, Y+41	; 0x29
    2c60:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c62:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c64:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	88 a7       	std	Y+40, r24	; 0x28
    2c70:	88 a5       	ldd	r24, Y+40	; 0x28
    2c72:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c74:	89 8d       	ldd	r24, Y+25	; 0x19
    2c76:	8a 95       	dec	r24
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <LCD_data_write+0x68e>
    2c7a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write_PORT(E, LOW);
    2c7c:	8b e0       	ldi	r24, 0x0B	; 11
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	a8 e4       	ldi	r26, 0x48	; 72
    2c8a:	b3 e4       	ldi	r27, 0x43	; 67
    2c8c:	8d 8b       	std	Y+21, r24	; 0x15
    2c8e:	9e 8b       	std	Y+22, r25	; 0x16
    2c90:	af 8b       	std	Y+23, r26	; 0x17
    2c92:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c94:	6d 89       	ldd	r22, Y+21	; 0x15
    2c96:	7e 89       	ldd	r23, Y+22	; 0x16
    2c98:	8f 89       	ldd	r24, Y+23	; 0x17
    2c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9c:	2b ea       	ldi	r18, 0xAB	; 171
    2c9e:	3a ea       	ldi	r19, 0xAA	; 170
    2ca0:	4a ea       	ldi	r20, 0xAA	; 170
    2ca2:	50 e4       	ldi	r21, 0x40	; 64
    2ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	89 8b       	std	Y+17, r24	; 0x11
    2cae:	9a 8b       	std	Y+18, r25	; 0x12
    2cb0:	ab 8b       	std	Y+19, r26	; 0x13
    2cb2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2cb4:	69 89       	ldd	r22, Y+17	; 0x11
    2cb6:	7a 89       	ldd	r23, Y+18	; 0x12
    2cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cba:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e8       	ldi	r20, 0x80	; 128
    2cc2:	5f e3       	ldi	r21, 0x3F	; 63
    2cc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cc8:	88 23       	and	r24, r24
    2cca:	1c f4       	brge	.+6      	; 0x2cd2 <LCD_data_write+0x6ea>
		__ticks = 1;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	88 8b       	std	Y+16, r24	; 0x10
    2cd0:	91 c0       	rjmp	.+290    	; 0x2df4 <LCD_data_write+0x80c>
	else if (__tmp > 255)
    2cd2:	69 89       	ldd	r22, Y+17	; 0x11
    2cd4:	7a 89       	ldd	r23, Y+18	; 0x12
    2cd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	4f e7       	ldi	r20, 0x7F	; 127
    2ce0:	53 e4       	ldi	r21, 0x43	; 67
    2ce2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ce6:	18 16       	cp	r1, r24
    2ce8:	0c f0       	brlt	.+2      	; 0x2cec <LCD_data_write+0x704>
    2cea:	7b c0       	rjmp	.+246    	; 0x2de2 <LCD_data_write+0x7fa>
	{
		_delay_ms(__us / 1000.0);
    2cec:	6d 89       	ldd	r22, Y+21	; 0x15
    2cee:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a e7       	ldi	r20, 0x7A	; 122
    2cfa:	54 e4       	ldi	r21, 0x44	; 68
    2cfc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	8c 87       	std	Y+12, r24	; 0x0c
    2d06:	9d 87       	std	Y+13, r25	; 0x0d
    2d08:	ae 87       	std	Y+14, r26	; 0x0e
    2d0a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d10:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d12:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	4a e7       	ldi	r20, 0x7A	; 122
    2d1a:	55 e4       	ldi	r21, 0x45	; 69
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	88 87       	std	Y+8, r24	; 0x08
    2d26:	99 87       	std	Y+9, r25	; 0x09
    2d28:	aa 87       	std	Y+10, r26	; 0x0a
    2d2a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d2c:	68 85       	ldd	r22, Y+8	; 0x08
    2d2e:	79 85       	ldd	r23, Y+9	; 0x09
    2d30:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d32:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e8       	ldi	r20, 0x80	; 128
    2d3a:	5f e3       	ldi	r21, 0x3F	; 63
    2d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d40:	88 23       	and	r24, r24
    2d42:	2c f4       	brge	.+10     	; 0x2d4e <LCD_data_write+0x766>
		__ticks = 1;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9f 83       	std	Y+7, r25	; 0x07
    2d4a:	8e 83       	std	Y+6, r24	; 0x06
    2d4c:	3f c0       	rjmp	.+126    	; 0x2dcc <LCD_data_write+0x7e4>
	else if (__tmp > 65535)
    2d4e:	68 85       	ldd	r22, Y+8	; 0x08
    2d50:	79 85       	ldd	r23, Y+9	; 0x09
    2d52:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d54:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	3f ef       	ldi	r19, 0xFF	; 255
    2d5a:	4f e7       	ldi	r20, 0x7F	; 127
    2d5c:	57 e4       	ldi	r21, 0x47	; 71
    2d5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d62:	18 16       	cp	r1, r24
    2d64:	4c f5       	brge	.+82     	; 0x2db8 <LCD_data_write+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d66:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d68:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e2       	ldi	r20, 0x20	; 32
    2d74:	51 e4       	ldi	r21, 0x41	; 65
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	9f 83       	std	Y+7, r25	; 0x07
    2d8c:	8e 83       	std	Y+6, r24	; 0x06
    2d8e:	0f c0       	rjmp	.+30     	; 0x2dae <LCD_data_write+0x7c6>
    2d90:	80 e9       	ldi	r24, 0x90	; 144
    2d92:	91 e0       	ldi	r25, 0x01	; 1
    2d94:	9d 83       	std	Y+5, r25	; 0x05
    2d96:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d98:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <LCD_data_write+0x7b4>
    2da0:	9d 83       	std	Y+5, r25	; 0x05
    2da2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da4:	8e 81       	ldd	r24, Y+6	; 0x06
    2da6:	9f 81       	ldd	r25, Y+7	; 0x07
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	9f 83       	std	Y+7, r25	; 0x07
    2dac:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	8e 81       	ldd	r24, Y+6	; 0x06
    2db0:	9f 81       	ldd	r25, Y+7	; 0x07
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	69 f7       	brne	.-38     	; 0x2d90 <LCD_data_write+0x7a8>
    2db6:	24 c0       	rjmp	.+72     	; 0x2e00 <LCD_data_write+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db8:	68 85       	ldd	r22, Y+8	; 0x08
    2dba:	79 85       	ldd	r23, Y+9	; 0x09
    2dbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9f 83       	std	Y+7, r25	; 0x07
    2dca:	8e 83       	std	Y+6, r24	; 0x06
    2dcc:	8e 81       	ldd	r24, Y+6	; 0x06
    2dce:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd0:	9b 83       	std	Y+3, r25	; 0x03
    2dd2:	8a 83       	std	Y+2, r24	; 0x02
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <LCD_data_write+0x7f0>
    2ddc:	9b 83       	std	Y+3, r25	; 0x03
    2dde:	8a 83       	std	Y+2, r24	; 0x02
    2de0:	0f c0       	rjmp	.+30     	; 0x2e00 <LCD_data_write+0x818>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2de2:	69 89       	ldd	r22, Y+17	; 0x11
    2de4:	7a 89       	ldd	r23, Y+18	; 0x12
    2de6:	8b 89       	ldd	r24, Y+19	; 0x13
    2de8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	88 8b       	std	Y+16, r24	; 0x10
    2df4:	88 89       	ldd	r24, Y+16	; 0x10
    2df6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
    2dfa:	8a 95       	dec	r24
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <LCD_data_write+0x812>
    2dfe:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    2e00:	cf 59       	subi	r28, 0x9F	; 159
    2e02:	df 4f       	sbci	r29, 0xFF	; 255
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	08 95       	ret

00002e18 <LCD_data_read>:


void LCD_data_read(uint16 data) {
    2e18:	0f 93       	push	r16
    2e1a:	1f 93       	push	r17
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
    2e24:	c2 56       	subi	r28, 0x62	; 98
    2e26:	d0 40       	sbci	r29, 0x00	; 0
    2e28:	0f b6       	in	r0, 0x3f	; 63
    2e2a:	f8 94       	cli
    2e2c:	de bf       	out	0x3e, r29	; 62
    2e2e:	0f be       	out	0x3f, r0	; 63
    2e30:	cd bf       	out	0x3d, r28	; 61
    2e32:	fe 01       	movw	r30, r28
    2e34:	ef 59       	subi	r30, 0x9F	; 159
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	80 83       	st	Z, r24
	Dio_write_PORT(Rs, HIGH);
    2e3c:	89 e0       	ldi	r24, 0x09	; 9
    2e3e:	61 e0       	ldi	r22, 0x01	; 1
    2e40:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(Rw, HIGH);
    2e44:	8a e0       	ldi	r24, 0x0A	; 10
    2e46:	61 e0       	ldi	r22, 0x01	; 1
    2e48:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>

	Dio_write_PORT(D4, GET_BIT(data, 4));
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	ef 59       	subi	r30, 0x9F	; 159
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 81       	ld	r24, Z
    2e54:	91 81       	ldd	r25, Z+1	; 0x01
    2e56:	92 95       	swap	r25
    2e58:	82 95       	swap	r24
    2e5a:	8f 70       	andi	r24, 0x0F	; 15
    2e5c:	89 27       	eor	r24, r25
    2e5e:	9f 70       	andi	r25, 0x0F	; 15
    2e60:	89 27       	eor	r24, r25
    2e62:	98 2f       	mov	r25, r24
    2e64:	91 70       	andi	r25, 0x01	; 1
    2e66:	84 e0       	ldi	r24, 0x04	; 4
    2e68:	69 2f       	mov	r22, r25
    2e6a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(data, 5));
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ef 59       	subi	r30, 0x9F	; 159
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	80 81       	ld	r24, Z
    2e76:	91 81       	ldd	r25, Z+1	; 0x01
    2e78:	96 95       	lsr	r25
    2e7a:	87 95       	ror	r24
    2e7c:	92 95       	swap	r25
    2e7e:	82 95       	swap	r24
    2e80:	8f 70       	andi	r24, 0x0F	; 15
    2e82:	89 27       	eor	r24, r25
    2e84:	9f 70       	andi	r25, 0x0F	; 15
    2e86:	89 27       	eor	r24, r25
    2e88:	98 2f       	mov	r25, r24
    2e8a:	91 70       	andi	r25, 0x01	; 1
    2e8c:	85 e0       	ldi	r24, 0x05	; 5
    2e8e:	69 2f       	mov	r22, r25
    2e90:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(data, 6));
    2e94:	fe 01       	movw	r30, r28
    2e96:	ef 59       	subi	r30, 0x9F	; 159
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	80 81       	ld	r24, Z
    2e9c:	91 81       	ldd	r25, Z+1	; 0x01
    2e9e:	00 24       	eor	r0, r0
    2ea0:	88 0f       	add	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	00 1c       	adc	r0, r0
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	00 1c       	adc	r0, r0
    2eac:	89 2f       	mov	r24, r25
    2eae:	90 2d       	mov	r25, r0
    2eb0:	98 2f       	mov	r25, r24
    2eb2:	91 70       	andi	r25, 0x01	; 1
    2eb4:	86 e0       	ldi	r24, 0x06	; 6
    2eb6:	69 2f       	mov	r22, r25
    2eb8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D7, GET_BIT(data, 7));
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ef 59       	subi	r30, 0x9F	; 159
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	91 81       	ldd	r25, Z+1	; 0x01
    2ec6:	88 0f       	add	r24, r24
    2ec8:	89 2f       	mov	r24, r25
    2eca:	88 1f       	adc	r24, r24
    2ecc:	99 0b       	sbc	r25, r25
    2ece:	91 95       	neg	r25
    2ed0:	98 2f       	mov	r25, r24
    2ed2:	91 70       	andi	r25, 0x01	; 1
    2ed4:	87 e0       	ldi	r24, 0x07	; 7
    2ed6:	69 2f       	mov	r22, r25
    2ed8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>

	Dio_write_PORT(E, HIGH);
    2edc:	8b e0       	ldi	r24, 0x0B	; 11
    2ede:	61 e0       	ldi	r22, 0x01	; 1
    2ee0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e3 5a       	subi	r30, 0xA3	; 163
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	a0 e2       	ldi	r26, 0x20	; 32
    2ef0:	b1 e4       	ldi	r27, 0x41	; 65
    2ef2:	80 83       	st	Z, r24
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	a2 83       	std	Z+2, r26	; 0x02
    2ef8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2efa:	8e 01       	movw	r16, r28
    2efc:	07 5a       	subi	r16, 0xA7	; 167
    2efe:	1f 4f       	sbci	r17, 0xFF	; 255
    2f00:	fe 01       	movw	r30, r28
    2f02:	e3 5a       	subi	r30, 0xA3	; 163
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	60 81       	ld	r22, Z
    2f08:	71 81       	ldd	r23, Z+1	; 0x01
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
    2f0e:	2b ea       	ldi	r18, 0xAB	; 171
    2f10:	3a ea       	ldi	r19, 0xAA	; 170
    2f12:	4a ea       	ldi	r20, 0xAA	; 170
    2f14:	50 e4       	ldi	r21, 0x40	; 64
    2f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	f8 01       	movw	r30, r16
    2f20:	80 83       	st	Z, r24
    2f22:	91 83       	std	Z+1, r25	; 0x01
    2f24:	a2 83       	std	Z+2, r26	; 0x02
    2f26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f28:	fe 01       	movw	r30, r28
    2f2a:	e7 5a       	subi	r30, 0xA7	; 167
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	60 81       	ld	r22, Z
    2f30:	71 81       	ldd	r23, Z+1	; 0x01
    2f32:	82 81       	ldd	r24, Z+2	; 0x02
    2f34:	93 81       	ldd	r25, Z+3	; 0x03
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e8       	ldi	r20, 0x80	; 128
    2f3c:	5f e3       	ldi	r21, 0x3F	; 63
    2f3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f42:	88 23       	and	r24, r24
    2f44:	34 f4       	brge	.+12     	; 0x2f52 <LCD_data_read+0x13a>
		__ticks = 1;
    2f46:	fe 01       	movw	r30, r28
    2f48:	e8 5a       	subi	r30, 0xA8	; 168
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	80 83       	st	Z, r24
    2f50:	e0 c0       	rjmp	.+448    	; 0x3112 <LCD_data_read+0x2fa>
	else if (__tmp > 255)
    2f52:	fe 01       	movw	r30, r28
    2f54:	e7 5a       	subi	r30, 0xA7	; 167
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4f e7       	ldi	r20, 0x7F	; 127
    2f66:	53 e4       	ldi	r21, 0x43	; 67
    2f68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f6c:	18 16       	cp	r1, r24
    2f6e:	0c f0       	brlt	.+2      	; 0x2f72 <LCD_data_read+0x15a>
    2f70:	c0 c0       	rjmp	.+384    	; 0x30f2 <LCD_data_read+0x2da>
	{
		_delay_ms(__us / 1000.0);
    2f72:	fe 01       	movw	r30, r28
    2f74:	e3 5a       	subi	r30, 0xA3	; 163
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	60 81       	ld	r22, Z
    2f7a:	71 81       	ldd	r23, Z+1	; 0x01
    2f7c:	82 81       	ldd	r24, Z+2	; 0x02
    2f7e:	93 81       	ldd	r25, Z+3	; 0x03
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	4a e7       	ldi	r20, 0x7A	; 122
    2f86:	54 e4       	ldi	r21, 0x44	; 68
    2f88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	fe 01       	movw	r30, r28
    2f92:	ec 5a       	subi	r30, 0xAC	; 172
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	80 83       	st	Z, r24
    2f98:	91 83       	std	Z+1, r25	; 0x01
    2f9a:	a2 83       	std	Z+2, r26	; 0x02
    2f9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9e:	8e 01       	movw	r16, r28
    2fa0:	00 5b       	subi	r16, 0xB0	; 176
    2fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	ec 5a       	subi	r30, 0xAC	; 172
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	60 81       	ld	r22, Z
    2fac:	71 81       	ldd	r23, Z+1	; 0x01
    2fae:	82 81       	ldd	r24, Z+2	; 0x02
    2fb0:	93 81       	ldd	r25, Z+3	; 0x03
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	4a e7       	ldi	r20, 0x7A	; 122
    2fb8:	55 e4       	ldi	r21, 0x45	; 69
    2fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	f8 01       	movw	r30, r16
    2fc4:	80 83       	st	Z, r24
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	a2 83       	std	Z+2, r26	; 0x02
    2fca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e0 5b       	subi	r30, 0xB0	; 176
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	60 81       	ld	r22, Z
    2fd4:	71 81       	ldd	r23, Z+1	; 0x01
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	44 f4       	brge	.+16     	; 0x2ffa <LCD_data_read+0x1e2>
		__ticks = 1;
    2fea:	fe 01       	movw	r30, r28
    2fec:	e2 5b       	subi	r30, 0xB2	; 178
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	80 83       	st	Z, r24
    2ff8:	64 c0       	rjmp	.+200    	; 0x30c2 <LCD_data_read+0x2aa>
	else if (__tmp > 65535)
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e0 5b       	subi	r30, 0xB0	; 176
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	60 81       	ld	r22, Z
    3002:	71 81       	ldd	r23, Z+1	; 0x01
    3004:	82 81       	ldd	r24, Z+2	; 0x02
    3006:	93 81       	ldd	r25, Z+3	; 0x03
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	3f ef       	ldi	r19, 0xFF	; 255
    300c:	4f e7       	ldi	r20, 0x7F	; 127
    300e:	57 e4       	ldi	r21, 0x47	; 71
    3010:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3014:	18 16       	cp	r1, r24
    3016:	0c f0       	brlt	.+2      	; 0x301a <LCD_data_read+0x202>
    3018:	43 c0       	rjmp	.+134    	; 0x30a0 <LCD_data_read+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301a:	fe 01       	movw	r30, r28
    301c:	ec 5a       	subi	r30, 0xAC	; 172
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	40 e2       	ldi	r20, 0x20	; 32
    302e:	51 e4       	ldi	r21, 0x41	; 65
    3030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	8e 01       	movw	r16, r28
    303a:	02 5b       	subi	r16, 0xB2	; 178
    303c:	1f 4f       	sbci	r17, 0xFF	; 255
    303e:	bc 01       	movw	r22, r24
    3040:	cd 01       	movw	r24, r26
    3042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	f8 01       	movw	r30, r16
    304c:	91 83       	std	Z+1, r25	; 0x01
    304e:	80 83       	st	Z, r24
    3050:	1f c0       	rjmp	.+62     	; 0x3090 <LCD_data_read+0x278>
    3052:	fe 01       	movw	r30, r28
    3054:	e4 5b       	subi	r30, 0xB4	; 180
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	80 e9       	ldi	r24, 0x90	; 144
    305a:	91 e0       	ldi	r25, 0x01	; 1
    305c:	91 83       	std	Z+1, r25	; 0x01
    305e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3060:	fe 01       	movw	r30, r28
    3062:	e4 5b       	subi	r30, 0xB4	; 180
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	f1 f7       	brne	.-4      	; 0x306a <LCD_data_read+0x252>
    306e:	fe 01       	movw	r30, r28
    3070:	e4 5b       	subi	r30, 0xB4	; 180
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	91 83       	std	Z+1, r25	; 0x01
    3076:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3078:	de 01       	movw	r26, r28
    307a:	a2 5b       	subi	r26, 0xB2	; 178
    307c:	bf 4f       	sbci	r27, 0xFF	; 255
    307e:	fe 01       	movw	r30, r28
    3080:	e2 5b       	subi	r30, 0xB2	; 178
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	80 81       	ld	r24, Z
    3086:	91 81       	ldd	r25, Z+1	; 0x01
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	11 96       	adiw	r26, 0x01	; 1
    308c:	9c 93       	st	X, r25
    308e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3090:	fe 01       	movw	r30, r28
    3092:	e2 5b       	subi	r30, 0xB2	; 178
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 81       	ld	r24, Z
    3098:	91 81       	ldd	r25, Z+1	; 0x01
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	d1 f6       	brne	.-76     	; 0x3052 <LCD_data_read+0x23a>
    309e:	4b c0       	rjmp	.+150    	; 0x3136 <LCD_data_read+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a0:	8e 01       	movw	r16, r28
    30a2:	02 5b       	subi	r16, 0xB2	; 178
    30a4:	1f 4f       	sbci	r17, 0xFF	; 255
    30a6:	fe 01       	movw	r30, r28
    30a8:	e0 5b       	subi	r30, 0xB0	; 176
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	60 81       	ld	r22, Z
    30ae:	71 81       	ldd	r23, Z+1	; 0x01
    30b0:	82 81       	ldd	r24, Z+2	; 0x02
    30b2:	93 81       	ldd	r25, Z+3	; 0x03
    30b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	f8 01       	movw	r30, r16
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	80 83       	st	Z, r24
    30c2:	de 01       	movw	r26, r28
    30c4:	a6 5b       	subi	r26, 0xB6	; 182
    30c6:	bf 4f       	sbci	r27, 0xFF	; 255
    30c8:	fe 01       	movw	r30, r28
    30ca:	e2 5b       	subi	r30, 0xB2	; 178
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	80 81       	ld	r24, Z
    30d0:	91 81       	ldd	r25, Z+1	; 0x01
    30d2:	11 96       	adiw	r26, 0x01	; 1
    30d4:	9c 93       	st	X, r25
    30d6:	8e 93       	st	-X, r24
    30d8:	fe 01       	movw	r30, r28
    30da:	e6 5b       	subi	r30, 0xB6	; 182
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	80 81       	ld	r24, Z
    30e0:	91 81       	ldd	r25, Z+1	; 0x01
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <LCD_data_read+0x2ca>
    30e6:	fe 01       	movw	r30, r28
    30e8:	e6 5b       	subi	r30, 0xB6	; 182
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	91 83       	std	Z+1, r25	; 0x01
    30ee:	80 83       	st	Z, r24
    30f0:	22 c0       	rjmp	.+68     	; 0x3136 <LCD_data_read+0x31e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30f2:	8e 01       	movw	r16, r28
    30f4:	08 5a       	subi	r16, 0xA8	; 168
    30f6:	1f 4f       	sbci	r17, 0xFF	; 255
    30f8:	fe 01       	movw	r30, r28
    30fa:	e7 5a       	subi	r30, 0xA7	; 167
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	60 81       	ld	r22, Z
    3100:	71 81       	ldd	r23, Z+1	; 0x01
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	f8 01       	movw	r30, r16
    3110:	80 83       	st	Z, r24
    3112:	de 01       	movw	r26, r28
    3114:	a7 5b       	subi	r26, 0xB7	; 183
    3116:	bf 4f       	sbci	r27, 0xFF	; 255
    3118:	fe 01       	movw	r30, r28
    311a:	e8 5a       	subi	r30, 0xA8	; 168
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	80 81       	ld	r24, Z
    3120:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3122:	fe 01       	movw	r30, r28
    3124:	e7 5b       	subi	r30, 0xB7	; 183
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	80 81       	ld	r24, Z
    312a:	8a 95       	dec	r24
    312c:	f1 f7       	brne	.-4      	; 0x312a <LCD_data_read+0x312>
    312e:	fe 01       	movw	r30, r28
    3130:	e7 5b       	subi	r30, 0xB7	; 183
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 83       	st	Z, r24
	_delay_us(10);
	Dio_write_PORT(E, LOW);
    3136:	8b e0       	ldi	r24, 0x0B	; 11
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    313e:	fe 01       	movw	r30, r28
    3140:	eb 5b       	subi	r30, 0xBB	; 187
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	a8 e4       	ldi	r26, 0x48	; 72
    314a:	b3 e4       	ldi	r27, 0x43	; 67
    314c:	80 83       	st	Z, r24
    314e:	91 83       	std	Z+1, r25	; 0x01
    3150:	a2 83       	std	Z+2, r26	; 0x02
    3152:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3154:	8e 01       	movw	r16, r28
    3156:	0f 5b       	subi	r16, 0xBF	; 191
    3158:	1f 4f       	sbci	r17, 0xFF	; 255
    315a:	fe 01       	movw	r30, r28
    315c:	eb 5b       	subi	r30, 0xBB	; 187
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	60 81       	ld	r22, Z
    3162:	71 81       	ldd	r23, Z+1	; 0x01
    3164:	82 81       	ldd	r24, Z+2	; 0x02
    3166:	93 81       	ldd	r25, Z+3	; 0x03
    3168:	2b ea       	ldi	r18, 0xAB	; 171
    316a:	3a ea       	ldi	r19, 0xAA	; 170
    316c:	4a ea       	ldi	r20, 0xAA	; 170
    316e:	50 e4       	ldi	r21, 0x40	; 64
    3170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	f8 01       	movw	r30, r16
    317a:	80 83       	st	Z, r24
    317c:	91 83       	std	Z+1, r25	; 0x01
    317e:	a2 83       	std	Z+2, r26	; 0x02
    3180:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3182:	fe 01       	movw	r30, r28
    3184:	ef 5b       	subi	r30, 0xBF	; 191
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	60 81       	ld	r22, Z
    318a:	71 81       	ldd	r23, Z+1	; 0x01
    318c:	82 81       	ldd	r24, Z+2	; 0x02
    318e:	93 81       	ldd	r25, Z+3	; 0x03
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e8       	ldi	r20, 0x80	; 128
    3196:	5f e3       	ldi	r21, 0x3F	; 63
    3198:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    319c:	88 23       	and	r24, r24
    319e:	34 f4       	brge	.+12     	; 0x31ac <LCD_data_read+0x394>
		__ticks = 1;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	fe 01       	movw	r30, r28
    31a4:	e0 5c       	subi	r30, 0xC0	; 192
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	80 83       	st	Z, r24
    31aa:	9d c0       	rjmp	.+314    	; 0x32e6 <LCD_data_read+0x4ce>
	else if (__tmp > 255)
    31ac:	fe 01       	movw	r30, r28
    31ae:	ef 5b       	subi	r30, 0xBF	; 191
    31b0:	ff 4f       	sbci	r31, 0xFF	; 255
    31b2:	60 81       	ld	r22, Z
    31b4:	71 81       	ldd	r23, Z+1	; 0x01
    31b6:	82 81       	ldd	r24, Z+2	; 0x02
    31b8:	93 81       	ldd	r25, Z+3	; 0x03
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	4f e7       	ldi	r20, 0x7F	; 127
    31c0:	53 e4       	ldi	r21, 0x43	; 67
    31c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31c6:	18 16       	cp	r1, r24
    31c8:	0c f0       	brlt	.+2      	; 0x31cc <LCD_data_read+0x3b4>
    31ca:	7e c0       	rjmp	.+252    	; 0x32c8 <LCD_data_read+0x4b0>
	{
		_delay_ms(__us / 1000.0);
    31cc:	fe 01       	movw	r30, r28
    31ce:	eb 5b       	subi	r30, 0xBB	; 187
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	60 81       	ld	r22, Z
    31d4:	71 81       	ldd	r23, Z+1	; 0x01
    31d6:	82 81       	ldd	r24, Z+2	; 0x02
    31d8:	93 81       	ldd	r25, Z+3	; 0x03
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	4a e7       	ldi	r20, 0x7A	; 122
    31e0:	54 e4       	ldi	r21, 0x44	; 68
    31e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	8c af       	std	Y+60, r24	; 0x3c
    31ec:	9d af       	std	Y+61, r25	; 0x3d
    31ee:	ae af       	std	Y+62, r26	; 0x3e
    31f0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f2:	6c ad       	ldd	r22, Y+60	; 0x3c
    31f4:	7d ad       	ldd	r23, Y+61	; 0x3d
    31f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    31f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	4a e7       	ldi	r20, 0x7A	; 122
    3200:	55 e4       	ldi	r21, 0x45	; 69
    3202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	88 af       	std	Y+56, r24	; 0x38
    320c:	99 af       	std	Y+57, r25	; 0x39
    320e:	aa af       	std	Y+58, r26	; 0x3a
    3210:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3212:	68 ad       	ldd	r22, Y+56	; 0x38
    3214:	79 ad       	ldd	r23, Y+57	; 0x39
    3216:	8a ad       	ldd	r24, Y+58	; 0x3a
    3218:	9b ad       	ldd	r25, Y+59	; 0x3b
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e8       	ldi	r20, 0x80	; 128
    3220:	5f e3       	ldi	r21, 0x3F	; 63
    3222:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3226:	88 23       	and	r24, r24
    3228:	2c f4       	brge	.+10     	; 0x3234 <LCD_data_read+0x41c>
		__ticks = 1;
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	9f ab       	std	Y+55, r25	; 0x37
    3230:	8e ab       	std	Y+54, r24	; 0x36
    3232:	3f c0       	rjmp	.+126    	; 0x32b2 <LCD_data_read+0x49a>
	else if (__tmp > 65535)
    3234:	68 ad       	ldd	r22, Y+56	; 0x38
    3236:	79 ad       	ldd	r23, Y+57	; 0x39
    3238:	8a ad       	ldd	r24, Y+58	; 0x3a
    323a:	9b ad       	ldd	r25, Y+59	; 0x3b
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	3f ef       	ldi	r19, 0xFF	; 255
    3240:	4f e7       	ldi	r20, 0x7F	; 127
    3242:	57 e4       	ldi	r21, 0x47	; 71
    3244:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3248:	18 16       	cp	r1, r24
    324a:	4c f5       	brge	.+82     	; 0x329e <LCD_data_read+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324c:	6c ad       	ldd	r22, Y+60	; 0x3c
    324e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3250:	8e ad       	ldd	r24, Y+62	; 0x3e
    3252:	9f ad       	ldd	r25, Y+63	; 0x3f
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e2       	ldi	r20, 0x20	; 32
    325a:	51 e4       	ldi	r21, 0x41	; 65
    325c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	bc 01       	movw	r22, r24
    3266:	cd 01       	movw	r24, r26
    3268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	9f ab       	std	Y+55, r25	; 0x37
    3272:	8e ab       	std	Y+54, r24	; 0x36
    3274:	0f c0       	rjmp	.+30     	; 0x3294 <LCD_data_read+0x47c>
    3276:	80 e9       	ldi	r24, 0x90	; 144
    3278:	91 e0       	ldi	r25, 0x01	; 1
    327a:	9d ab       	std	Y+53, r25	; 0x35
    327c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    327e:	8c a9       	ldd	r24, Y+52	; 0x34
    3280:	9d a9       	ldd	r25, Y+53	; 0x35
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f1 f7       	brne	.-4      	; 0x3282 <LCD_data_read+0x46a>
    3286:	9d ab       	std	Y+53, r25	; 0x35
    3288:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328a:	8e a9       	ldd	r24, Y+54	; 0x36
    328c:	9f a9       	ldd	r25, Y+55	; 0x37
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	9f ab       	std	Y+55, r25	; 0x37
    3292:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3294:	8e a9       	ldd	r24, Y+54	; 0x36
    3296:	9f a9       	ldd	r25, Y+55	; 0x37
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	69 f7       	brne	.-38     	; 0x3276 <LCD_data_read+0x45e>
    329c:	2d c0       	rjmp	.+90     	; 0x32f8 <LCD_data_read+0x4e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    329e:	68 ad       	ldd	r22, Y+56	; 0x38
    32a0:	79 ad       	ldd	r23, Y+57	; 0x39
    32a2:	8a ad       	ldd	r24, Y+58	; 0x3a
    32a4:	9b ad       	ldd	r25, Y+59	; 0x3b
    32a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	9f ab       	std	Y+55, r25	; 0x37
    32b0:	8e ab       	std	Y+54, r24	; 0x36
    32b2:	8e a9       	ldd	r24, Y+54	; 0x36
    32b4:	9f a9       	ldd	r25, Y+55	; 0x37
    32b6:	9b ab       	std	Y+51, r25	; 0x33
    32b8:	8a ab       	std	Y+50, r24	; 0x32
    32ba:	8a a9       	ldd	r24, Y+50	; 0x32
    32bc:	9b a9       	ldd	r25, Y+51	; 0x33
    32be:	01 97       	sbiw	r24, 0x01	; 1
    32c0:	f1 f7       	brne	.-4      	; 0x32be <LCD_data_read+0x4a6>
    32c2:	9b ab       	std	Y+51, r25	; 0x33
    32c4:	8a ab       	std	Y+50, r24	; 0x32
    32c6:	18 c0       	rjmp	.+48     	; 0x32f8 <LCD_data_read+0x4e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32c8:	fe 01       	movw	r30, r28
    32ca:	ef 5b       	subi	r30, 0xBF	; 191
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	60 81       	ld	r22, Z
    32d0:	71 81       	ldd	r23, Z+1	; 0x01
    32d2:	82 81       	ldd	r24, Z+2	; 0x02
    32d4:	93 81       	ldd	r25, Z+3	; 0x03
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	fe 01       	movw	r30, r28
    32e0:	e0 5c       	subi	r30, 0xC0	; 192
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	80 83       	st	Z, r24
    32e6:	fe 01       	movw	r30, r28
    32e8:	e0 5c       	subi	r30, 0xC0	; 192
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	80 81       	ld	r24, Z
    32ee:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32f0:	89 a9       	ldd	r24, Y+49	; 0x31
    32f2:	8a 95       	dec	r24
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <LCD_data_read+0x4da>
    32f6:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	Dio_write_PORT(D4, GET_BIT(data, 0));
    32f8:	fe 01       	movw	r30, r28
    32fa:	ef 59       	subi	r30, 0x9F	; 159
    32fc:	ff 4f       	sbci	r31, 0xFF	; 255
    32fe:	80 81       	ld	r24, Z
    3300:	98 2f       	mov	r25, r24
    3302:	91 70       	andi	r25, 0x01	; 1
    3304:	84 e0       	ldi	r24, 0x04	; 4
    3306:	69 2f       	mov	r22, r25
    3308:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(data, 1));
    330c:	fe 01       	movw	r30, r28
    330e:	ef 59       	subi	r30, 0x9F	; 159
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	80 81       	ld	r24, Z
    3314:	91 81       	ldd	r25, Z+1	; 0x01
    3316:	96 95       	lsr	r25
    3318:	87 95       	ror	r24
    331a:	98 2f       	mov	r25, r24
    331c:	91 70       	andi	r25, 0x01	; 1
    331e:	85 e0       	ldi	r24, 0x05	; 5
    3320:	69 2f       	mov	r22, r25
    3322:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(data, 2));
    3326:	fe 01       	movw	r30, r28
    3328:	ef 59       	subi	r30, 0x9F	; 159
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	80 81       	ld	r24, Z
    332e:	91 81       	ldd	r25, Z+1	; 0x01
    3330:	96 95       	lsr	r25
    3332:	87 95       	ror	r24
    3334:	96 95       	lsr	r25
    3336:	87 95       	ror	r24
    3338:	98 2f       	mov	r25, r24
    333a:	91 70       	andi	r25, 0x01	; 1
    333c:	86 e0       	ldi	r24, 0x06	; 6
    333e:	69 2f       	mov	r22, r25
    3340:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D7, GET_BIT(data, 3));
    3344:	fe 01       	movw	r30, r28
    3346:	ef 59       	subi	r30, 0x9F	; 159
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 81       	ld	r24, Z
    334c:	91 81       	ldd	r25, Z+1	; 0x01
    334e:	96 95       	lsr	r25
    3350:	87 95       	ror	r24
    3352:	96 95       	lsr	r25
    3354:	87 95       	ror	r24
    3356:	96 95       	lsr	r25
    3358:	87 95       	ror	r24
    335a:	98 2f       	mov	r25, r24
    335c:	91 70       	andi	r25, 0x01	; 1
    335e:	87 e0       	ldi	r24, 0x07	; 7
    3360:	69 2f       	mov	r22, r25
    3362:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>

	Dio_write_PORT(E, HIGH);
    3366:	8b e0       	ldi	r24, 0x0B	; 11
    3368:	61 e0       	ldi	r22, 0x01	; 1
    336a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	a0 e2       	ldi	r26, 0x20	; 32
    3374:	b1 e4       	ldi	r27, 0x41	; 65
    3376:	8d a7       	std	Y+45, r24	; 0x2d
    3378:	9e a7       	std	Y+46, r25	; 0x2e
    337a:	af a7       	std	Y+47, r26	; 0x2f
    337c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    337e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3380:	7e a5       	ldd	r23, Y+46	; 0x2e
    3382:	8f a5       	ldd	r24, Y+47	; 0x2f
    3384:	98 a9       	ldd	r25, Y+48	; 0x30
    3386:	2b ea       	ldi	r18, 0xAB	; 171
    3388:	3a ea       	ldi	r19, 0xAA	; 170
    338a:	4a ea       	ldi	r20, 0xAA	; 170
    338c:	50 e4       	ldi	r21, 0x40	; 64
    338e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	89 a7       	std	Y+41, r24	; 0x29
    3398:	9a a7       	std	Y+42, r25	; 0x2a
    339a:	ab a7       	std	Y+43, r26	; 0x2b
    339c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    339e:	69 a5       	ldd	r22, Y+41	; 0x29
    33a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    33a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    33a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	40 e8       	ldi	r20, 0x80	; 128
    33ac:	5f e3       	ldi	r21, 0x3F	; 63
    33ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b2:	88 23       	and	r24, r24
    33b4:	1c f4       	brge	.+6      	; 0x33bc <LCD_data_read+0x5a4>
		__ticks = 1;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	88 a7       	std	Y+40, r24	; 0x28
    33ba:	91 c0       	rjmp	.+290    	; 0x34de <LCD_data_read+0x6c6>
	else if (__tmp > 255)
    33bc:	69 a5       	ldd	r22, Y+41	; 0x29
    33be:	7a a5       	ldd	r23, Y+42	; 0x2a
    33c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    33c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	4f e7       	ldi	r20, 0x7F	; 127
    33ca:	53 e4       	ldi	r21, 0x43	; 67
    33cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33d0:	18 16       	cp	r1, r24
    33d2:	0c f0       	brlt	.+2      	; 0x33d6 <LCD_data_read+0x5be>
    33d4:	7b c0       	rjmp	.+246    	; 0x34cc <LCD_data_read+0x6b4>
	{
		_delay_ms(__us / 1000.0);
    33d6:	6d a5       	ldd	r22, Y+45	; 0x2d
    33d8:	7e a5       	ldd	r23, Y+46	; 0x2e
    33da:	8f a5       	ldd	r24, Y+47	; 0x2f
    33dc:	98 a9       	ldd	r25, Y+48	; 0x30
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	4a e7       	ldi	r20, 0x7A	; 122
    33e4:	54 e4       	ldi	r21, 0x44	; 68
    33e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	8c a3       	std	Y+36, r24	; 0x24
    33f0:	9d a3       	std	Y+37, r25	; 0x25
    33f2:	ae a3       	std	Y+38, r26	; 0x26
    33f4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f6:	6c a1       	ldd	r22, Y+36	; 0x24
    33f8:	7d a1       	ldd	r23, Y+37	; 0x25
    33fa:	8e a1       	ldd	r24, Y+38	; 0x26
    33fc:	9f a1       	ldd	r25, Y+39	; 0x27
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	4a e7       	ldi	r20, 0x7A	; 122
    3404:	55 e4       	ldi	r21, 0x45	; 69
    3406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	88 a3       	std	Y+32, r24	; 0x20
    3410:	99 a3       	std	Y+33, r25	; 0x21
    3412:	aa a3       	std	Y+34, r26	; 0x22
    3414:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3416:	68 a1       	ldd	r22, Y+32	; 0x20
    3418:	79 a1       	ldd	r23, Y+33	; 0x21
    341a:	8a a1       	ldd	r24, Y+34	; 0x22
    341c:	9b a1       	ldd	r25, Y+35	; 0x23
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e8       	ldi	r20, 0x80	; 128
    3424:	5f e3       	ldi	r21, 0x3F	; 63
    3426:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    342a:	88 23       	and	r24, r24
    342c:	2c f4       	brge	.+10     	; 0x3438 <LCD_data_read+0x620>
		__ticks = 1;
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	9f 8f       	std	Y+31, r25	; 0x1f
    3434:	8e 8f       	std	Y+30, r24	; 0x1e
    3436:	3f c0       	rjmp	.+126    	; 0x34b6 <LCD_data_read+0x69e>
	else if (__tmp > 65535)
    3438:	68 a1       	ldd	r22, Y+32	; 0x20
    343a:	79 a1       	ldd	r23, Y+33	; 0x21
    343c:	8a a1       	ldd	r24, Y+34	; 0x22
    343e:	9b a1       	ldd	r25, Y+35	; 0x23
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	3f ef       	ldi	r19, 0xFF	; 255
    3444:	4f e7       	ldi	r20, 0x7F	; 127
    3446:	57 e4       	ldi	r21, 0x47	; 71
    3448:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    344c:	18 16       	cp	r1, r24
    344e:	4c f5       	brge	.+82     	; 0x34a2 <LCD_data_read+0x68a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3450:	6c a1       	ldd	r22, Y+36	; 0x24
    3452:	7d a1       	ldd	r23, Y+37	; 0x25
    3454:	8e a1       	ldd	r24, Y+38	; 0x26
    3456:	9f a1       	ldd	r25, Y+39	; 0x27
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	40 e2       	ldi	r20, 0x20	; 32
    345e:	51 e4       	ldi	r21, 0x41	; 65
    3460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	bc 01       	movw	r22, r24
    346a:	cd 01       	movw	r24, r26
    346c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	9f 8f       	std	Y+31, r25	; 0x1f
    3476:	8e 8f       	std	Y+30, r24	; 0x1e
    3478:	0f c0       	rjmp	.+30     	; 0x3498 <LCD_data_read+0x680>
    347a:	80 e9       	ldi	r24, 0x90	; 144
    347c:	91 e0       	ldi	r25, 0x01	; 1
    347e:	9d 8f       	std	Y+29, r25	; 0x1d
    3480:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3482:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3484:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	f1 f7       	brne	.-4      	; 0x3486 <LCD_data_read+0x66e>
    348a:	9d 8f       	std	Y+29, r25	; 0x1d
    348c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    348e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3490:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	9f 8f       	std	Y+31, r25	; 0x1f
    3496:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3498:	8e 8d       	ldd	r24, Y+30	; 0x1e
    349a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    349c:	00 97       	sbiw	r24, 0x00	; 0
    349e:	69 f7       	brne	.-38     	; 0x347a <LCD_data_read+0x662>
    34a0:	24 c0       	rjmp	.+72     	; 0x34ea <LCD_data_read+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a2:	68 a1       	ldd	r22, Y+32	; 0x20
    34a4:	79 a1       	ldd	r23, Y+33	; 0x21
    34a6:	8a a1       	ldd	r24, Y+34	; 0x22
    34a8:	9b a1       	ldd	r25, Y+35	; 0x23
    34aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	9f 8f       	std	Y+31, r25	; 0x1f
    34b4:	8e 8f       	std	Y+30, r24	; 0x1e
    34b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34ba:	9b 8f       	std	Y+27, r25	; 0x1b
    34bc:	8a 8f       	std	Y+26, r24	; 0x1a
    34be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	f1 f7       	brne	.-4      	; 0x34c2 <LCD_data_read+0x6aa>
    34c6:	9b 8f       	std	Y+27, r25	; 0x1b
    34c8:	8a 8f       	std	Y+26, r24	; 0x1a
    34ca:	0f c0       	rjmp	.+30     	; 0x34ea <LCD_data_read+0x6d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34cc:	69 a5       	ldd	r22, Y+41	; 0x29
    34ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    34d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    34d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    34d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	88 a7       	std	Y+40, r24	; 0x28
    34de:	88 a5       	ldd	r24, Y+40	; 0x28
    34e0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34e2:	89 8d       	ldd	r24, Y+25	; 0x19
    34e4:	8a 95       	dec	r24
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <LCD_data_read+0x6cc>
    34e8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write_PORT(E, LOW);
    34ea:	8b e0       	ldi	r24, 0x0B	; 11
    34ec:	60 e0       	ldi	r22, 0x00	; 0
    34ee:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	a8 e4       	ldi	r26, 0x48	; 72
    34f8:	b3 e4       	ldi	r27, 0x43	; 67
    34fa:	8d 8b       	std	Y+21, r24	; 0x15
    34fc:	9e 8b       	std	Y+22, r25	; 0x16
    34fe:	af 8b       	std	Y+23, r26	; 0x17
    3500:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3502:	6d 89       	ldd	r22, Y+21	; 0x15
    3504:	7e 89       	ldd	r23, Y+22	; 0x16
    3506:	8f 89       	ldd	r24, Y+23	; 0x17
    3508:	98 8d       	ldd	r25, Y+24	; 0x18
    350a:	2b ea       	ldi	r18, 0xAB	; 171
    350c:	3a ea       	ldi	r19, 0xAA	; 170
    350e:	4a ea       	ldi	r20, 0xAA	; 170
    3510:	50 e4       	ldi	r21, 0x40	; 64
    3512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	89 8b       	std	Y+17, r24	; 0x11
    351c:	9a 8b       	std	Y+18, r25	; 0x12
    351e:	ab 8b       	std	Y+19, r26	; 0x13
    3520:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3522:	69 89       	ldd	r22, Y+17	; 0x11
    3524:	7a 89       	ldd	r23, Y+18	; 0x12
    3526:	8b 89       	ldd	r24, Y+19	; 0x13
    3528:	9c 89       	ldd	r25, Y+20	; 0x14
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	40 e8       	ldi	r20, 0x80	; 128
    3530:	5f e3       	ldi	r21, 0x3F	; 63
    3532:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3536:	88 23       	and	r24, r24
    3538:	1c f4       	brge	.+6      	; 0x3540 <LCD_data_read+0x728>
		__ticks = 1;
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	88 8b       	std	Y+16, r24	; 0x10
    353e:	91 c0       	rjmp	.+290    	; 0x3662 <LCD_data_read+0x84a>
	else if (__tmp > 255)
    3540:	69 89       	ldd	r22, Y+17	; 0x11
    3542:	7a 89       	ldd	r23, Y+18	; 0x12
    3544:	8b 89       	ldd	r24, Y+19	; 0x13
    3546:	9c 89       	ldd	r25, Y+20	; 0x14
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	4f e7       	ldi	r20, 0x7F	; 127
    354e:	53 e4       	ldi	r21, 0x43	; 67
    3550:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3554:	18 16       	cp	r1, r24
    3556:	0c f0       	brlt	.+2      	; 0x355a <LCD_data_read+0x742>
    3558:	7b c0       	rjmp	.+246    	; 0x3650 <LCD_data_read+0x838>
	{
		_delay_ms(__us / 1000.0);
    355a:	6d 89       	ldd	r22, Y+21	; 0x15
    355c:	7e 89       	ldd	r23, Y+22	; 0x16
    355e:	8f 89       	ldd	r24, Y+23	; 0x17
    3560:	98 8d       	ldd	r25, Y+24	; 0x18
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	4a e7       	ldi	r20, 0x7A	; 122
    3568:	54 e4       	ldi	r21, 0x44	; 68
    356a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	8c 87       	std	Y+12, r24	; 0x0c
    3574:	9d 87       	std	Y+13, r25	; 0x0d
    3576:	ae 87       	std	Y+14, r26	; 0x0e
    3578:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357a:	6c 85       	ldd	r22, Y+12	; 0x0c
    357c:	7d 85       	ldd	r23, Y+13	; 0x0d
    357e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3580:	9f 85       	ldd	r25, Y+15	; 0x0f
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	4a e7       	ldi	r20, 0x7A	; 122
    3588:	55 e4       	ldi	r21, 0x45	; 69
    358a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	88 87       	std	Y+8, r24	; 0x08
    3594:	99 87       	std	Y+9, r25	; 0x09
    3596:	aa 87       	std	Y+10, r26	; 0x0a
    3598:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    359a:	68 85       	ldd	r22, Y+8	; 0x08
    359c:	79 85       	ldd	r23, Y+9	; 0x09
    359e:	8a 85       	ldd	r24, Y+10	; 0x0a
    35a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e8       	ldi	r20, 0x80	; 128
    35a8:	5f e3       	ldi	r21, 0x3F	; 63
    35aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ae:	88 23       	and	r24, r24
    35b0:	2c f4       	brge	.+10     	; 0x35bc <LCD_data_read+0x7a4>
		__ticks = 1;
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	9f 83       	std	Y+7, r25	; 0x07
    35b8:	8e 83       	std	Y+6, r24	; 0x06
    35ba:	3f c0       	rjmp	.+126    	; 0x363a <LCD_data_read+0x822>
	else if (__tmp > 65535)
    35bc:	68 85       	ldd	r22, Y+8	; 0x08
    35be:	79 85       	ldd	r23, Y+9	; 0x09
    35c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    35c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	3f ef       	ldi	r19, 0xFF	; 255
    35c8:	4f e7       	ldi	r20, 0x7F	; 127
    35ca:	57 e4       	ldi	r21, 0x47	; 71
    35cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35d0:	18 16       	cp	r1, r24
    35d2:	4c f5       	brge	.+82     	; 0x3626 <LCD_data_read+0x80e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    35d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    35d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    35da:	9f 85       	ldd	r25, Y+15	; 0x0f
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	40 e2       	ldi	r20, 0x20	; 32
    35e2:	51 e4       	ldi	r21, 0x41	; 65
    35e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	bc 01       	movw	r22, r24
    35ee:	cd 01       	movw	r24, r26
    35f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	9f 83       	std	Y+7, r25	; 0x07
    35fa:	8e 83       	std	Y+6, r24	; 0x06
    35fc:	0f c0       	rjmp	.+30     	; 0x361c <LCD_data_read+0x804>
    35fe:	80 e9       	ldi	r24, 0x90	; 144
    3600:	91 e0       	ldi	r25, 0x01	; 1
    3602:	9d 83       	std	Y+5, r25	; 0x05
    3604:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3606:	8c 81       	ldd	r24, Y+4	; 0x04
    3608:	9d 81       	ldd	r25, Y+5	; 0x05
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <LCD_data_read+0x7f2>
    360e:	9d 83       	std	Y+5, r25	; 0x05
    3610:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3612:	8e 81       	ldd	r24, Y+6	; 0x06
    3614:	9f 81       	ldd	r25, Y+7	; 0x07
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	9f 83       	std	Y+7, r25	; 0x07
    361a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    361c:	8e 81       	ldd	r24, Y+6	; 0x06
    361e:	9f 81       	ldd	r25, Y+7	; 0x07
    3620:	00 97       	sbiw	r24, 0x00	; 0
    3622:	69 f7       	brne	.-38     	; 0x35fe <LCD_data_read+0x7e6>
    3624:	24 c0       	rjmp	.+72     	; 0x366e <LCD_data_read+0x856>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3626:	68 85       	ldd	r22, Y+8	; 0x08
    3628:	79 85       	ldd	r23, Y+9	; 0x09
    362a:	8a 85       	ldd	r24, Y+10	; 0x0a
    362c:	9b 85       	ldd	r25, Y+11	; 0x0b
    362e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	9f 83       	std	Y+7, r25	; 0x07
    3638:	8e 83       	std	Y+6, r24	; 0x06
    363a:	8e 81       	ldd	r24, Y+6	; 0x06
    363c:	9f 81       	ldd	r25, Y+7	; 0x07
    363e:	9b 83       	std	Y+3, r25	; 0x03
    3640:	8a 83       	std	Y+2, r24	; 0x02
    3642:	8a 81       	ldd	r24, Y+2	; 0x02
    3644:	9b 81       	ldd	r25, Y+3	; 0x03
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	f1 f7       	brne	.-4      	; 0x3646 <LCD_data_read+0x82e>
    364a:	9b 83       	std	Y+3, r25	; 0x03
    364c:	8a 83       	std	Y+2, r24	; 0x02
    364e:	0f c0       	rjmp	.+30     	; 0x366e <LCD_data_read+0x856>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3650:	69 89       	ldd	r22, Y+17	; 0x11
    3652:	7a 89       	ldd	r23, Y+18	; 0x12
    3654:	8b 89       	ldd	r24, Y+19	; 0x13
    3656:	9c 89       	ldd	r25, Y+20	; 0x14
    3658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	88 8b       	std	Y+16, r24	; 0x10
    3662:	88 89       	ldd	r24, Y+16	; 0x10
    3664:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3666:	89 81       	ldd	r24, Y+1	; 0x01
    3668:	8a 95       	dec	r24
    366a:	f1 f7       	brne	.-4      	; 0x3668 <LCD_data_read+0x850>
    366c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    366e:	ce 59       	subi	r28, 0x9E	; 158
    3670:	df 4f       	sbci	r29, 0xFF	; 255
    3672:	0f b6       	in	r0, 0x3f	; 63
    3674:	f8 94       	cli
    3676:	de bf       	out	0x3e, r29	; 62
    3678:	0f be       	out	0x3f, r0	; 63
    367a:	cd bf       	out	0x3d, r28	; 61
    367c:	cf 91       	pop	r28
    367e:	df 91       	pop	r29
    3680:	1f 91       	pop	r17
    3682:	0f 91       	pop	r16
    3684:	08 95       	ret

00003686 <LCD_Custom_Char>:

void LCD_Custom_Char(void) {
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62

	LCD_cmd(0x40);
    368e:	80 e4       	ldi	r24, 0x40	; 64
    3690:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_cmd>

	// heart shape:
	LCD_data_write(0b00000);
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00000);
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b01010);
    36a0:	8a e0       	ldi	r24, 0x0A	; 10
    36a2:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b11111);
    36a6:	8f e1       	ldi	r24, 0x1F	; 31
    36a8:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b11111);
    36ac:	8f e1       	ldi	r24, 0x1F	; 31
    36ae:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b01110);
    36b2:	8e e0       	ldi	r24, 0x0E	; 14
    36b4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00100);
    36b8:	84 e0       	ldi	r24, 0x04	; 4
    36ba:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00000);
    36be:	80 e0       	ldi	r24, 0x00	; 0
    36c0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>

	//Smile shape:
	LCD_data_write(0b00000);
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b01010);
    36ca:	8a e0       	ldi	r24, 0x0A	; 10
    36cc:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b01010);
    36d0:	8a e0       	ldi	r24, 0x0A	; 10
    36d2:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00000);
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b10001);
    36dc:	81 e1       	ldi	r24, 0x11	; 17
    36de:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b01110);
    36e2:	8e e0       	ldi	r24, 0x0E	; 14
    36e4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00000);
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00000);
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>

	//Wink:
	LCD_data_write(0b00000);
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00000);
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00011);
    3700:	83 e0       	ldi	r24, 0x03	; 3
    3702:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b11011);
    3706:	8b e1       	ldi	r24, 0x1B	; 27
    3708:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00000);
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b10001);
    3712:	81 e1       	ldi	r24, 0x11	; 17
    3714:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b01110);
    3718:	8e e0       	ldi	r24, 0x0E	; 14
    371a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00000);
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>

	//Thumb up:
	LCD_data_write(0b00000);
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00000);
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00011);
    3730:	83 e0       	ldi	r24, 0x03	; 3
    3732:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00011);
    3736:	83 e0       	ldi	r24, 0x03	; 3
    3738:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b00011);
    373c:	83 e0       	ldi	r24, 0x03	; 3
    373e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b11111);
    3742:	8f e1       	ldi	r24, 0x1F	; 31
    3744:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b11111);
    3748:	8f e1       	ldi	r24, 0x1F	; 31
    374a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
	LCD_data_write(0b11111);
    374e:	8f e1       	ldi	r24, 0x1F	; 31
    3750:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
}
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <LCD_GoTo>:

void LCD_GoTo(uint8 column, uint8 row) {
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	00 d0       	rcall	.+0      	; 0x3760 <LCD_GoTo+0x6>
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	89 83       	std	Y+1, r24	; 0x01
    3766:	6a 83       	std	Y+2, r22	; 0x02

	if(column == 0) {
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	88 23       	and	r24, r24
    376c:	29 f4       	brne	.+10     	; 0x3778 <LCD_GoTo+0x1e>
		LCD_cmd(0x80 | row);
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	80 68       	ori	r24, 0x80	; 128
    3772:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_cmd>
    3776:	07 c0       	rjmp	.+14     	; 0x3786 <LCD_GoTo+0x2c>
	}else if(column == 1) {
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	81 30       	cpi	r24, 0x01	; 1
    377c:	21 f4       	brne	.+8      	; 0x3786 <LCD_GoTo+0x2c>
		LCD_cmd(0xC0 | row);
    377e:	8a 81       	ldd	r24, Y+2	; 0x02
    3780:	80 6c       	ori	r24, 0xC0	; 192
    3782:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_cmd>
	}

}
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	08 95       	ret

00003790 <LCD_String>:


void LCD_String(uint8 *string) {
    3790:	df 93       	push	r29
    3792:	cf 93       	push	r28
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62
    3798:	6c 97       	sbiw	r28, 0x1c	; 28
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	de bf       	out	0x3e, r29	; 62
    37a0:	0f be       	out	0x3f, r0	; 63
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	9c 8f       	std	Y+28, r25	; 0x1c
    37a6:	8b 8f       	std	Y+27, r24	; 0x1b

	for(int i = 0; string[i] != '\0'; i++) {
    37a8:	1a 8e       	std	Y+26, r1	; 0x1a
    37aa:	19 8e       	std	Y+25, r1	; 0x19
    37ac:	cd c0       	rjmp	.+410    	; 0x3948 <LCD_String+0x1b8>


		LCD_data_write(string[i]);
    37ae:	29 8d       	ldd	r18, Y+25	; 0x19
    37b0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    37b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37b6:	fc 01       	movw	r30, r24
    37b8:	e2 0f       	add	r30, r18
    37ba:	f3 1f       	adc	r31, r19
    37bc:	80 81       	ld	r24, Z
    37be:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_data_write>
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	a8 ec       	ldi	r26, 0xC8	; 200
    37c8:	b2 e4       	ldi	r27, 0x42	; 66
    37ca:	8d 8b       	std	Y+21, r24	; 0x15
    37cc:	9e 8b       	std	Y+22, r25	; 0x16
    37ce:	af 8b       	std	Y+23, r26	; 0x17
    37d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37d2:	6d 89       	ldd	r22, Y+21	; 0x15
    37d4:	7e 89       	ldd	r23, Y+22	; 0x16
    37d6:	8f 89       	ldd	r24, Y+23	; 0x17
    37d8:	98 8d       	ldd	r25, Y+24	; 0x18
    37da:	2b ea       	ldi	r18, 0xAB	; 171
    37dc:	3a ea       	ldi	r19, 0xAA	; 170
    37de:	4a ea       	ldi	r20, 0xAA	; 170
    37e0:	50 e4       	ldi	r21, 0x40	; 64
    37e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	89 8b       	std	Y+17, r24	; 0x11
    37ec:	9a 8b       	std	Y+18, r25	; 0x12
    37ee:	ab 8b       	std	Y+19, r26	; 0x13
    37f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    37f2:	69 89       	ldd	r22, Y+17	; 0x11
    37f4:	7a 89       	ldd	r23, Y+18	; 0x12
    37f6:	8b 89       	ldd	r24, Y+19	; 0x13
    37f8:	9c 89       	ldd	r25, Y+20	; 0x14
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 e8       	ldi	r20, 0x80	; 128
    3800:	5f e3       	ldi	r21, 0x3F	; 63
    3802:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3806:	88 23       	and	r24, r24
    3808:	1c f4       	brge	.+6      	; 0x3810 <LCD_String+0x80>
		__ticks = 1;
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	88 8b       	std	Y+16, r24	; 0x10
    380e:	91 c0       	rjmp	.+290    	; 0x3932 <LCD_String+0x1a2>
	else if (__tmp > 255)
    3810:	69 89       	ldd	r22, Y+17	; 0x11
    3812:	7a 89       	ldd	r23, Y+18	; 0x12
    3814:	8b 89       	ldd	r24, Y+19	; 0x13
    3816:	9c 89       	ldd	r25, Y+20	; 0x14
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	4f e7       	ldi	r20, 0x7F	; 127
    381e:	53 e4       	ldi	r21, 0x43	; 67
    3820:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3824:	18 16       	cp	r1, r24
    3826:	0c f0       	brlt	.+2      	; 0x382a <LCD_String+0x9a>
    3828:	7b c0       	rjmp	.+246    	; 0x3920 <LCD_String+0x190>
	{
		_delay_ms(__us / 1000.0);
    382a:	6d 89       	ldd	r22, Y+21	; 0x15
    382c:	7e 89       	ldd	r23, Y+22	; 0x16
    382e:	8f 89       	ldd	r24, Y+23	; 0x17
    3830:	98 8d       	ldd	r25, Y+24	; 0x18
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	4a e7       	ldi	r20, 0x7A	; 122
    3838:	54 e4       	ldi	r21, 0x44	; 68
    383a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	8c 87       	std	Y+12, r24	; 0x0c
    3844:	9d 87       	std	Y+13, r25	; 0x0d
    3846:	ae 87       	std	Y+14, r26	; 0x0e
    3848:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    384a:	6c 85       	ldd	r22, Y+12	; 0x0c
    384c:	7d 85       	ldd	r23, Y+13	; 0x0d
    384e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3850:	9f 85       	ldd	r25, Y+15	; 0x0f
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	4a e7       	ldi	r20, 0x7A	; 122
    3858:	55 e4       	ldi	r21, 0x45	; 69
    385a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	88 87       	std	Y+8, r24	; 0x08
    3864:	99 87       	std	Y+9, r25	; 0x09
    3866:	aa 87       	std	Y+10, r26	; 0x0a
    3868:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    386a:	68 85       	ldd	r22, Y+8	; 0x08
    386c:	79 85       	ldd	r23, Y+9	; 0x09
    386e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3870:	9b 85       	ldd	r25, Y+11	; 0x0b
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	40 e8       	ldi	r20, 0x80	; 128
    3878:	5f e3       	ldi	r21, 0x3F	; 63
    387a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    387e:	88 23       	and	r24, r24
    3880:	2c f4       	brge	.+10     	; 0x388c <LCD_String+0xfc>
		__ticks = 1;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	9f 83       	std	Y+7, r25	; 0x07
    3888:	8e 83       	std	Y+6, r24	; 0x06
    388a:	3f c0       	rjmp	.+126    	; 0x390a <LCD_String+0x17a>
	else if (__tmp > 65535)
    388c:	68 85       	ldd	r22, Y+8	; 0x08
    388e:	79 85       	ldd	r23, Y+9	; 0x09
    3890:	8a 85       	ldd	r24, Y+10	; 0x0a
    3892:	9b 85       	ldd	r25, Y+11	; 0x0b
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	3f ef       	ldi	r19, 0xFF	; 255
    3898:	4f e7       	ldi	r20, 0x7F	; 127
    389a:	57 e4       	ldi	r21, 0x47	; 71
    389c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38a0:	18 16       	cp	r1, r24
    38a2:	4c f5       	brge	.+82     	; 0x38f6 <LCD_String+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    38a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    38a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    38aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	40 e2       	ldi	r20, 0x20	; 32
    38b2:	51 e4       	ldi	r21, 0x41	; 65
    38b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	bc 01       	movw	r22, r24
    38be:	cd 01       	movw	r24, r26
    38c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	9f 83       	std	Y+7, r25	; 0x07
    38ca:	8e 83       	std	Y+6, r24	; 0x06
    38cc:	0f c0       	rjmp	.+30     	; 0x38ec <LCD_String+0x15c>
    38ce:	80 e9       	ldi	r24, 0x90	; 144
    38d0:	91 e0       	ldi	r25, 0x01	; 1
    38d2:	9d 83       	std	Y+5, r25	; 0x05
    38d4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38d6:	8c 81       	ldd	r24, Y+4	; 0x04
    38d8:	9d 81       	ldd	r25, Y+5	; 0x05
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <LCD_String+0x14a>
    38de:	9d 83       	std	Y+5, r25	; 0x05
    38e0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e2:	8e 81       	ldd	r24, Y+6	; 0x06
    38e4:	9f 81       	ldd	r25, Y+7	; 0x07
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	9f 83       	std	Y+7, r25	; 0x07
    38ea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ec:	8e 81       	ldd	r24, Y+6	; 0x06
    38ee:	9f 81       	ldd	r25, Y+7	; 0x07
    38f0:	00 97       	sbiw	r24, 0x00	; 0
    38f2:	69 f7       	brne	.-38     	; 0x38ce <LCD_String+0x13e>
    38f4:	24 c0       	rjmp	.+72     	; 0x393e <LCD_String+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f6:	68 85       	ldd	r22, Y+8	; 0x08
    38f8:	79 85       	ldd	r23, Y+9	; 0x09
    38fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    38fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    38fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	9f 83       	std	Y+7, r25	; 0x07
    3908:	8e 83       	std	Y+6, r24	; 0x06
    390a:	8e 81       	ldd	r24, Y+6	; 0x06
    390c:	9f 81       	ldd	r25, Y+7	; 0x07
    390e:	9b 83       	std	Y+3, r25	; 0x03
    3910:	8a 83       	std	Y+2, r24	; 0x02
    3912:	8a 81       	ldd	r24, Y+2	; 0x02
    3914:	9b 81       	ldd	r25, Y+3	; 0x03
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	f1 f7       	brne	.-4      	; 0x3916 <LCD_String+0x186>
    391a:	9b 83       	std	Y+3, r25	; 0x03
    391c:	8a 83       	std	Y+2, r24	; 0x02
    391e:	0f c0       	rjmp	.+30     	; 0x393e <LCD_String+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3920:	69 89       	ldd	r22, Y+17	; 0x11
    3922:	7a 89       	ldd	r23, Y+18	; 0x12
    3924:	8b 89       	ldd	r24, Y+19	; 0x13
    3926:	9c 89       	ldd	r25, Y+20	; 0x14
    3928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392c:	dc 01       	movw	r26, r24
    392e:	cb 01       	movw	r24, r22
    3930:	88 8b       	std	Y+16, r24	; 0x10
    3932:	88 89       	ldd	r24, Y+16	; 0x10
    3934:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3936:	89 81       	ldd	r24, Y+1	; 0x01
    3938:	8a 95       	dec	r24
    393a:	f1 f7       	brne	.-4      	; 0x3938 <LCD_String+0x1a8>
    393c:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_String(uint8 *string) {

	for(int i = 0; string[i] != '\0'; i++) {
    393e:	89 8d       	ldd	r24, Y+25	; 0x19
    3940:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3942:	01 96       	adiw	r24, 0x01	; 1
    3944:	9a 8f       	std	Y+26, r25	; 0x1a
    3946:	89 8f       	std	Y+25, r24	; 0x19
    3948:	29 8d       	ldd	r18, Y+25	; 0x19
    394a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    394c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    394e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3950:	fc 01       	movw	r30, r24
    3952:	e2 0f       	add	r30, r18
    3954:	f3 1f       	adc	r31, r19
    3956:	80 81       	ld	r24, Z
    3958:	88 23       	and	r24, r24
    395a:	09 f0       	breq	.+2      	; 0x395e <LCD_String+0x1ce>
    395c:	28 cf       	rjmp	.-432    	; 0x37ae <LCD_String+0x1e>


		LCD_data_write(string[i]);
		_delay_us(100);
	}
}
    395e:	6c 96       	adiw	r28, 0x1c	; 28
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	f8 94       	cli
    3964:	de bf       	out	0x3e, r29	; 62
    3966:	0f be       	out	0x3f, r0	; 63
    3968:	cd bf       	out	0x3d, r28	; 61
    396a:	cf 91       	pop	r28
    396c:	df 91       	pop	r29
    396e:	08 95       	ret

00003970 <CLR_LCD>:

void CLR_LCD() {
    3970:	df 93       	push	r29
    3972:	cf 93       	push	r28
    3974:	cd b7       	in	r28, 0x3d	; 61
    3976:	de b7       	in	r29, 0x3e	; 62
    3978:	2e 97       	sbiw	r28, 0x0e	; 14
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	de bf       	out	0x3e, r29	; 62
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	cd bf       	out	0x3d, r28	; 61
	LCD_cmd(0x01);
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_cmd>
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	a0 e0       	ldi	r26, 0x00	; 0
    3990:	b0 e4       	ldi	r27, 0x40	; 64
    3992:	8b 87       	std	Y+11, r24	; 0x0b
    3994:	9c 87       	std	Y+12, r25	; 0x0c
    3996:	ad 87       	std	Y+13, r26	; 0x0d
    3998:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399a:	6b 85       	ldd	r22, Y+11	; 0x0b
    399c:	7c 85       	ldd	r23, Y+12	; 0x0c
    399e:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	4a e7       	ldi	r20, 0x7A	; 122
    39a8:	55 e4       	ldi	r21, 0x45	; 69
    39aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	8f 83       	std	Y+7, r24	; 0x07
    39b4:	98 87       	std	Y+8, r25	; 0x08
    39b6:	a9 87       	std	Y+9, r26	; 0x09
    39b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ba:	6f 81       	ldd	r22, Y+7	; 0x07
    39bc:	78 85       	ldd	r23, Y+8	; 0x08
    39be:	89 85       	ldd	r24, Y+9	; 0x09
    39c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e8       	ldi	r20, 0x80	; 128
    39c8:	5f e3       	ldi	r21, 0x3F	; 63
    39ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ce:	88 23       	and	r24, r24
    39d0:	2c f4       	brge	.+10     	; 0x39dc <CLR_LCD+0x6c>
		__ticks = 1;
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	9e 83       	std	Y+6, r25	; 0x06
    39d8:	8d 83       	std	Y+5, r24	; 0x05
    39da:	3f c0       	rjmp	.+126    	; 0x3a5a <CLR_LCD+0xea>
	else if (__tmp > 65535)
    39dc:	6f 81       	ldd	r22, Y+7	; 0x07
    39de:	78 85       	ldd	r23, Y+8	; 0x08
    39e0:	89 85       	ldd	r24, Y+9	; 0x09
    39e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	3f ef       	ldi	r19, 0xFF	; 255
    39e8:	4f e7       	ldi	r20, 0x7F	; 127
    39ea:	57 e4       	ldi	r21, 0x47	; 71
    39ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39f0:	18 16       	cp	r1, r24
    39f2:	4c f5       	brge	.+82     	; 0x3a46 <CLR_LCD+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e2       	ldi	r20, 0x20	; 32
    3a02:	51 e4       	ldi	r21, 0x41	; 65
    3a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	bc 01       	movw	r22, r24
    3a0e:	cd 01       	movw	r24, r26
    3a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	9e 83       	std	Y+6, r25	; 0x06
    3a1a:	8d 83       	std	Y+5, r24	; 0x05
    3a1c:	0f c0       	rjmp	.+30     	; 0x3a3c <CLR_LCD+0xcc>
    3a1e:	80 e9       	ldi	r24, 0x90	; 144
    3a20:	91 e0       	ldi	r25, 0x01	; 1
    3a22:	9c 83       	std	Y+4, r25	; 0x04
    3a24:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a26:	8b 81       	ldd	r24, Y+3	; 0x03
    3a28:	9c 81       	ldd	r25, Y+4	; 0x04
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	f1 f7       	brne	.-4      	; 0x3a2a <CLR_LCD+0xba>
    3a2e:	9c 83       	std	Y+4, r25	; 0x04
    3a30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a32:	8d 81       	ldd	r24, Y+5	; 0x05
    3a34:	9e 81       	ldd	r25, Y+6	; 0x06
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	9e 83       	std	Y+6, r25	; 0x06
    3a3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a40:	00 97       	sbiw	r24, 0x00	; 0
    3a42:	69 f7       	brne	.-38     	; 0x3a1e <CLR_LCD+0xae>
    3a44:	14 c0       	rjmp	.+40     	; 0x3a6e <CLR_LCD+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a46:	6f 81       	ldd	r22, Y+7	; 0x07
    3a48:	78 85       	ldd	r23, Y+8	; 0x08
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	9e 83       	std	Y+6, r25	; 0x06
    3a58:	8d 83       	std	Y+5, r24	; 0x05
    3a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5e:	9a 83       	std	Y+2, r25	; 0x02
    3a60:	89 83       	std	Y+1, r24	; 0x01
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	9a 81       	ldd	r25, Y+2	; 0x02
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <CLR_LCD+0xf6>
    3a6a:	9a 83       	std	Y+2, r25	; 0x02
    3a6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_cmd(0x80);
    3a6e:	80 e8       	ldi	r24, 0x80	; 128
    3a70:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_cmd>
}
    3a74:	2e 96       	adiw	r28, 0x0e	; 14
    3a76:	0f b6       	in	r0, 0x3f	; 63
    3a78:	f8 94       	cli
    3a7a:	de bf       	out	0x3e, r29	; 62
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	cd bf       	out	0x3d, r28	; 61
    3a80:	cf 91       	pop	r28
    3a82:	df 91       	pop	r29
    3a84:	08 95       	ret

00003a86 <Rtrn_Home_LCD>:

void Rtrn_Home_LCD() {
    3a86:	df 93       	push	r29
    3a88:	cf 93       	push	r28
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	68 97       	sbiw	r28, 0x18	; 24
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
	LCD_cmd(0x02);
    3a9a:	82 e0       	ldi	r24, 0x02	; 2
    3a9c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_cmd>
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	a0 e0       	ldi	r26, 0x00	; 0
    3aa6:	b0 e4       	ldi	r27, 0x40	; 64
    3aa8:	8d 8b       	std	Y+21, r24	; 0x15
    3aaa:	9e 8b       	std	Y+22, r25	; 0x16
    3aac:	af 8b       	std	Y+23, r26	; 0x17
    3aae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ab8:	2b ea       	ldi	r18, 0xAB	; 171
    3aba:	3a ea       	ldi	r19, 0xAA	; 170
    3abc:	4a ea       	ldi	r20, 0xAA	; 170
    3abe:	50 e4       	ldi	r21, 0x40	; 64
    3ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	89 8b       	std	Y+17, r24	; 0x11
    3aca:	9a 8b       	std	Y+18, r25	; 0x12
    3acc:	ab 8b       	std	Y+19, r26	; 0x13
    3ace:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3ad0:	69 89       	ldd	r22, Y+17	; 0x11
    3ad2:	7a 89       	ldd	r23, Y+18	; 0x12
    3ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	40 e8       	ldi	r20, 0x80	; 128
    3ade:	5f e3       	ldi	r21, 0x3F	; 63
    3ae0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ae4:	88 23       	and	r24, r24
    3ae6:	1c f4       	brge	.+6      	; 0x3aee <Rtrn_Home_LCD+0x68>
		__ticks = 1;
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	88 8b       	std	Y+16, r24	; 0x10
    3aec:	91 c0       	rjmp	.+290    	; 0x3c10 <Rtrn_Home_LCD+0x18a>
	else if (__tmp > 255)
    3aee:	69 89       	ldd	r22, Y+17	; 0x11
    3af0:	7a 89       	ldd	r23, Y+18	; 0x12
    3af2:	8b 89       	ldd	r24, Y+19	; 0x13
    3af4:	9c 89       	ldd	r25, Y+20	; 0x14
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	4f e7       	ldi	r20, 0x7F	; 127
    3afc:	53 e4       	ldi	r21, 0x43	; 67
    3afe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b02:	18 16       	cp	r1, r24
    3b04:	0c f0       	brlt	.+2      	; 0x3b08 <Rtrn_Home_LCD+0x82>
    3b06:	7b c0       	rjmp	.+246    	; 0x3bfe <Rtrn_Home_LCD+0x178>
	{
		_delay_ms(__us / 1000.0);
    3b08:	6d 89       	ldd	r22, Y+21	; 0x15
    3b0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	4a e7       	ldi	r20, 0x7A	; 122
    3b16:	54 e4       	ldi	r21, 0x44	; 68
    3b18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	8c 87       	std	Y+12, r24	; 0x0c
    3b22:	9d 87       	std	Y+13, r25	; 0x0d
    3b24:	ae 87       	std	Y+14, r26	; 0x0e
    3b26:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b28:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	4a e7       	ldi	r20, 0x7A	; 122
    3b36:	55 e4       	ldi	r21, 0x45	; 69
    3b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	88 87       	std	Y+8, r24	; 0x08
    3b42:	99 87       	std	Y+9, r25	; 0x09
    3b44:	aa 87       	std	Y+10, r26	; 0x0a
    3b46:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3b48:	68 85       	ldd	r22, Y+8	; 0x08
    3b4a:	79 85       	ldd	r23, Y+9	; 0x09
    3b4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e8       	ldi	r20, 0x80	; 128
    3b56:	5f e3       	ldi	r21, 0x3F	; 63
    3b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b5c:	88 23       	and	r24, r24
    3b5e:	2c f4       	brge	.+10     	; 0x3b6a <Rtrn_Home_LCD+0xe4>
		__ticks = 1;
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	9f 83       	std	Y+7, r25	; 0x07
    3b66:	8e 83       	std	Y+6, r24	; 0x06
    3b68:	3f c0       	rjmp	.+126    	; 0x3be8 <Rtrn_Home_LCD+0x162>
	else if (__tmp > 65535)
    3b6a:	68 85       	ldd	r22, Y+8	; 0x08
    3b6c:	79 85       	ldd	r23, Y+9	; 0x09
    3b6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b70:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	3f ef       	ldi	r19, 0xFF	; 255
    3b76:	4f e7       	ldi	r20, 0x7F	; 127
    3b78:	57 e4       	ldi	r21, 0x47	; 71
    3b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b7e:	18 16       	cp	r1, r24
    3b80:	4c f5       	brge	.+82     	; 0x3bd4 <Rtrn_Home_LCD+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b82:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b84:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b86:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b88:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	40 e2       	ldi	r20, 0x20	; 32
    3b90:	51 e4       	ldi	r21, 0x41	; 65
    3b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	bc 01       	movw	r22, r24
    3b9c:	cd 01       	movw	r24, r26
    3b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	9f 83       	std	Y+7, r25	; 0x07
    3ba8:	8e 83       	std	Y+6, r24	; 0x06
    3baa:	0f c0       	rjmp	.+30     	; 0x3bca <Rtrn_Home_LCD+0x144>
    3bac:	80 e9       	ldi	r24, 0x90	; 144
    3bae:	91 e0       	ldi	r25, 0x01	; 1
    3bb0:	9d 83       	std	Y+5, r25	; 0x05
    3bb2:	8c 83       	std	Y+4, r24	; 0x04
    3bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    3bb8:	01 97       	sbiw	r24, 0x01	; 1
    3bba:	f1 f7       	brne	.-4      	; 0x3bb8 <Rtrn_Home_LCD+0x132>
    3bbc:	9d 83       	std	Y+5, r25	; 0x05
    3bbe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    3bc2:	9f 81       	ldd	r25, Y+7	; 0x07
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	9f 83       	std	Y+7, r25	; 0x07
    3bc8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bca:	8e 81       	ldd	r24, Y+6	; 0x06
    3bcc:	9f 81       	ldd	r25, Y+7	; 0x07
    3bce:	00 97       	sbiw	r24, 0x00	; 0
    3bd0:	69 f7       	brne	.-38     	; 0x3bac <Rtrn_Home_LCD+0x126>
    3bd2:	24 c0       	rjmp	.+72     	; 0x3c1c <Rtrn_Home_LCD+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd4:	68 85       	ldd	r22, Y+8	; 0x08
    3bd6:	79 85       	ldd	r23, Y+9	; 0x09
    3bd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bda:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	9f 83       	std	Y+7, r25	; 0x07
    3be6:	8e 83       	std	Y+6, r24	; 0x06
    3be8:	8e 81       	ldd	r24, Y+6	; 0x06
    3bea:	9f 81       	ldd	r25, Y+7	; 0x07
    3bec:	9b 83       	std	Y+3, r25	; 0x03
    3bee:	8a 83       	std	Y+2, r24	; 0x02
    3bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	f1 f7       	brne	.-4      	; 0x3bf4 <Rtrn_Home_LCD+0x16e>
    3bf8:	9b 83       	std	Y+3, r25	; 0x03
    3bfa:	8a 83       	std	Y+2, r24	; 0x02
    3bfc:	0f c0       	rjmp	.+30     	; 0x3c1c <Rtrn_Home_LCD+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bfe:	69 89       	ldd	r22, Y+17	; 0x11
    3c00:	7a 89       	ldd	r23, Y+18	; 0x12
    3c02:	8b 89       	ldd	r24, Y+19	; 0x13
    3c04:	9c 89       	ldd	r25, Y+20	; 0x14
    3c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	88 8b       	std	Y+16, r24	; 0x10
    3c10:	88 89       	ldd	r24, Y+16	; 0x10
    3c12:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	8a 95       	dec	r24
    3c18:	f1 f7       	brne	.-4      	; 0x3c16 <Rtrn_Home_LCD+0x190>
    3c1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
}
    3c1c:	68 96       	adiw	r28, 0x18	; 24
    3c1e:	0f b6       	in	r0, 0x3f	; 63
    3c20:	f8 94       	cli
    3c22:	de bf       	out	0x3e, r29	; 62
    3c24:	0f be       	out	0x3f, r0	; 63
    3c26:	cd bf       	out	0x3d, r28	; 61
    3c28:	cf 91       	pop	r28
    3c2a:	df 91       	pop	r29
    3c2c:	08 95       	ret

00003c2e <Sev_Seg_write>:

#include "7_Segma.h"

const uint8 Sev_Segment[10] = {0,1,2,3,4,5,6,7,8,9};

void Sev_Seg_write(uint8 num) {
    3c2e:	df 93       	push	r29
    3c30:	cf 93       	push	r28
    3c32:	cd b7       	in	r28, 0x3d	; 61
    3c34:	de b7       	in	r29, 0x3e	; 62
    3c36:	6f 97       	sbiw	r28, 0x1f	; 31
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	f8 94       	cli
    3c3c:	de bf       	out	0x3e, r29	; 62
    3c3e:	0f be       	out	0x3f, r0	; 63
    3c40:	cd bf       	out	0x3d, r28	; 61
    3c42:	8f 8f       	std	Y+31, r24	; 0x1f

	uint8 Firstno = num%10;
    3c44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c46:	9a e0       	ldi	r25, 0x0A	; 10
    3c48:	69 2f       	mov	r22, r25
    3c4a:	0e 94 14 21 	call	0x4228	; 0x4228 <__udivmodqi4>
    3c4e:	89 2f       	mov	r24, r25
    3c50:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 Secondno = num/10;
    3c52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c54:	9a e0       	ldi	r25, 0x0A	; 10
    3c56:	69 2f       	mov	r22, r25
    3c58:	0e 94 14 21 	call	0x4228	; 0x4228 <__udivmodqi4>
    3c5c:	8d 8f       	std	Y+29, r24	; 0x1d

	for(num = 0; num < 100; num++) {
    3c5e:	1f 8e       	std	Y+31, r1	; 0x1f
    3c60:	3b c1       	rjmp	.+630    	; 0x3ed8 <Sev_Seg_write+0x2aa>
	Dio_write_PORT(Rw, LOW);
    3c62:	8a e0       	ldi	r24, 0x0A	; 10
    3c64:	60 e0       	ldi	r22, 0x00	; 0
    3c66:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(Rs, HIGH);
    3c6a:	89 e0       	ldi	r24, 0x09	; 9
    3c6c:	61 e0       	ldi	r22, 0x01	; 1
    3c6e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>

	Dio_write_PORT(D4, GET_BIT(Firstno, 0));
    3c72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c74:	98 2f       	mov	r25, r24
    3c76:	91 70       	andi	r25, 0x01	; 1
    3c78:	84 e0       	ldi	r24, 0x04	; 4
    3c7a:	69 2f       	mov	r22, r25
    3c7c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(Firstno, 1));
    3c80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c82:	86 95       	lsr	r24
    3c84:	98 2f       	mov	r25, r24
    3c86:	91 70       	andi	r25, 0x01	; 1
    3c88:	85 e0       	ldi	r24, 0x05	; 5
    3c8a:	69 2f       	mov	r22, r25
    3c8c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(Firstno, 2));
    3c90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c92:	86 95       	lsr	r24
    3c94:	86 95       	lsr	r24
    3c96:	98 2f       	mov	r25, r24
    3c98:	91 70       	andi	r25, 0x01	; 1
    3c9a:	86 e0       	ldi	r24, 0x06	; 6
    3c9c:	69 2f       	mov	r22, r25
    3c9e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D7, GET_BIT(Firstno, 3));
    3ca2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ca4:	86 95       	lsr	r24
    3ca6:	86 95       	lsr	r24
    3ca8:	86 95       	lsr	r24
    3caa:	98 2f       	mov	r25, r24
    3cac:	91 70       	andi	r25, 0x01	; 1
    3cae:	87 e0       	ldi	r24, 0x07	; 7
    3cb0:	69 2f       	mov	r22, r25
    3cb2:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	a0 e2       	ldi	r26, 0x20	; 32
    3cbc:	b1 e4       	ldi	r27, 0x41	; 65
    3cbe:	89 8f       	std	Y+25, r24	; 0x19
    3cc0:	9a 8f       	std	Y+26, r25	; 0x1a
    3cc2:	ab 8f       	std	Y+27, r26	; 0x1b
    3cc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc6:	69 8d       	ldd	r22, Y+25	; 0x19
    3cc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ccc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	4a e7       	ldi	r20, 0x7A	; 122
    3cd4:	55 e4       	ldi	r21, 0x45	; 69
    3cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	8d 8b       	std	Y+21, r24	; 0x15
    3ce0:	9e 8b       	std	Y+22, r25	; 0x16
    3ce2:	af 8b       	std	Y+23, r26	; 0x17
    3ce4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    3cea:	8f 89       	ldd	r24, Y+23	; 0x17
    3cec:	98 8d       	ldd	r25, Y+24	; 0x18
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	40 e8       	ldi	r20, 0x80	; 128
    3cf4:	5f e3       	ldi	r21, 0x3F	; 63
    3cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cfa:	88 23       	and	r24, r24
    3cfc:	2c f4       	brge	.+10     	; 0x3d08 <Sev_Seg_write+0xda>
		__ticks = 1;
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	9c 8b       	std	Y+20, r25	; 0x14
    3d04:	8b 8b       	std	Y+19, r24	; 0x13
    3d06:	3f c0       	rjmp	.+126    	; 0x3d86 <Sev_Seg_write+0x158>
	else if (__tmp > 65535)
    3d08:	6d 89       	ldd	r22, Y+21	; 0x15
    3d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	3f ef       	ldi	r19, 0xFF	; 255
    3d14:	4f e7       	ldi	r20, 0x7F	; 127
    3d16:	57 e4       	ldi	r21, 0x47	; 71
    3d18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d1c:	18 16       	cp	r1, r24
    3d1e:	4c f5       	brge	.+82     	; 0x3d72 <Sev_Seg_write+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d20:	69 8d       	ldd	r22, Y+25	; 0x19
    3d22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	40 e2       	ldi	r20, 0x20	; 32
    3d2e:	51 e4       	ldi	r21, 0x41	; 65
    3d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	bc 01       	movw	r22, r24
    3d3a:	cd 01       	movw	r24, r26
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	9c 8b       	std	Y+20, r25	; 0x14
    3d46:	8b 8b       	std	Y+19, r24	; 0x13
    3d48:	0f c0       	rjmp	.+30     	; 0x3d68 <Sev_Seg_write+0x13a>
    3d4a:	80 e9       	ldi	r24, 0x90	; 144
    3d4c:	91 e0       	ldi	r25, 0x01	; 1
    3d4e:	9a 8b       	std	Y+18, r25	; 0x12
    3d50:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d52:	89 89       	ldd	r24, Y+17	; 0x11
    3d54:	9a 89       	ldd	r25, Y+18	; 0x12
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	f1 f7       	brne	.-4      	; 0x3d56 <Sev_Seg_write+0x128>
    3d5a:	9a 8b       	std	Y+18, r25	; 0x12
    3d5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d60:	9c 89       	ldd	r25, Y+20	; 0x14
    3d62:	01 97       	sbiw	r24, 0x01	; 1
    3d64:	9c 8b       	std	Y+20, r25	; 0x14
    3d66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d68:	8b 89       	ldd	r24, Y+19	; 0x13
    3d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d6c:	00 97       	sbiw	r24, 0x00	; 0
    3d6e:	69 f7       	brne	.-38     	; 0x3d4a <Sev_Seg_write+0x11c>
    3d70:	14 c0       	rjmp	.+40     	; 0x3d9a <Sev_Seg_write+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d72:	6d 89       	ldd	r22, Y+21	; 0x15
    3d74:	7e 89       	ldd	r23, Y+22	; 0x16
    3d76:	8f 89       	ldd	r24, Y+23	; 0x17
    3d78:	98 8d       	ldd	r25, Y+24	; 0x18
    3d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	9c 8b       	std	Y+20, r25	; 0x14
    3d84:	8b 8b       	std	Y+19, r24	; 0x13
    3d86:	8b 89       	ldd	r24, Y+19	; 0x13
    3d88:	9c 89       	ldd	r25, Y+20	; 0x14
    3d8a:	98 8b       	std	Y+16, r25	; 0x10
    3d8c:	8f 87       	std	Y+15, r24	; 0x0f
    3d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d90:	98 89       	ldd	r25, Y+16	; 0x10
    3d92:	01 97       	sbiw	r24, 0x01	; 1
    3d94:	f1 f7       	brne	.-4      	; 0x3d92 <Sev_Seg_write+0x164>
    3d96:	98 8b       	std	Y+16, r25	; 0x10
    3d98:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(10);

	Dio_write_PORT(Rs, LOW);
    3d9a:	89 e0       	ldi	r24, 0x09	; 9
    3d9c:	60 e0       	ldi	r22, 0x00	; 0
    3d9e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(Rw, HIGH);
    3da2:	8a e0       	ldi	r24, 0x0A	; 10
    3da4:	61 e0       	ldi	r22, 0x01	; 1
    3da6:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>

	Dio_write_PORT(D4, GET_BIT(Secondno, 0));
    3daa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dac:	98 2f       	mov	r25, r24
    3dae:	91 70       	andi	r25, 0x01	; 1
    3db0:	84 e0       	ldi	r24, 0x04	; 4
    3db2:	69 2f       	mov	r22, r25
    3db4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D5, GET_BIT(Secondno, 1));
    3db8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dba:	86 95       	lsr	r24
    3dbc:	98 2f       	mov	r25, r24
    3dbe:	91 70       	andi	r25, 0x01	; 1
    3dc0:	85 e0       	ldi	r24, 0x05	; 5
    3dc2:	69 2f       	mov	r22, r25
    3dc4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D6, GET_BIT(Secondno, 2));
    3dc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dca:	86 95       	lsr	r24
    3dcc:	86 95       	lsr	r24
    3dce:	98 2f       	mov	r25, r24
    3dd0:	91 70       	andi	r25, 0x01	; 1
    3dd2:	86 e0       	ldi	r24, 0x06	; 6
    3dd4:	69 2f       	mov	r22, r25
    3dd6:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
	Dio_write_PORT(D7, GET_BIT(Secondno, 3));
    3dda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ddc:	86 95       	lsr	r24
    3dde:	86 95       	lsr	r24
    3de0:	86 95       	lsr	r24
    3de2:	98 2f       	mov	r25, r24
    3de4:	91 70       	andi	r25, 0x01	; 1
    3de6:	87 e0       	ldi	r24, 0x07	; 7
    3de8:	69 2f       	mov	r22, r25
    3dea:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Dio_write_PORT>
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	a0 e2       	ldi	r26, 0x20	; 32
    3df4:	b1 e4       	ldi	r27, 0x41	; 65
    3df6:	8b 87       	std	Y+11, r24	; 0x0b
    3df8:	9c 87       	std	Y+12, r25	; 0x0c
    3dfa:	ad 87       	std	Y+13, r26	; 0x0d
    3dfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	4a e7       	ldi	r20, 0x7A	; 122
    3e0c:	55 e4       	ldi	r21, 0x45	; 69
    3e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	8f 83       	std	Y+7, r24	; 0x07
    3e18:	98 87       	std	Y+8, r25	; 0x08
    3e1a:	a9 87       	std	Y+9, r26	; 0x09
    3e1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e20:	78 85       	ldd	r23, Y+8	; 0x08
    3e22:	89 85       	ldd	r24, Y+9	; 0x09
    3e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	40 e8       	ldi	r20, 0x80	; 128
    3e2c:	5f e3       	ldi	r21, 0x3F	; 63
    3e2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e32:	88 23       	and	r24, r24
    3e34:	2c f4       	brge	.+10     	; 0x3e40 <Sev_Seg_write+0x212>
		__ticks = 1;
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	9e 83       	std	Y+6, r25	; 0x06
    3e3c:	8d 83       	std	Y+5, r24	; 0x05
    3e3e:	3f c0       	rjmp	.+126    	; 0x3ebe <Sev_Seg_write+0x290>
	else if (__tmp > 65535)
    3e40:	6f 81       	ldd	r22, Y+7	; 0x07
    3e42:	78 85       	ldd	r23, Y+8	; 0x08
    3e44:	89 85       	ldd	r24, Y+9	; 0x09
    3e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	3f ef       	ldi	r19, 0xFF	; 255
    3e4c:	4f e7       	ldi	r20, 0x7F	; 127
    3e4e:	57 e4       	ldi	r21, 0x47	; 71
    3e50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e54:	18 16       	cp	r1, r24
    3e56:	4c f5       	brge	.+82     	; 0x3eaa <Sev_Seg_write+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	40 e2       	ldi	r20, 0x20	; 32
    3e66:	51 e4       	ldi	r21, 0x41	; 65
    3e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6c:	dc 01       	movw	r26, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	bc 01       	movw	r22, r24
    3e72:	cd 01       	movw	r24, r26
    3e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e78:	dc 01       	movw	r26, r24
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	9e 83       	std	Y+6, r25	; 0x06
    3e7e:	8d 83       	std	Y+5, r24	; 0x05
    3e80:	0f c0       	rjmp	.+30     	; 0x3ea0 <Sev_Seg_write+0x272>
    3e82:	80 e9       	ldi	r24, 0x90	; 144
    3e84:	91 e0       	ldi	r25, 0x01	; 1
    3e86:	9c 83       	std	Y+4, r25	; 0x04
    3e88:	8b 83       	std	Y+3, r24	; 0x03
    3e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8e:	01 97       	sbiw	r24, 0x01	; 1
    3e90:	f1 f7       	brne	.-4      	; 0x3e8e <Sev_Seg_write+0x260>
    3e92:	9c 83       	std	Y+4, r25	; 0x04
    3e94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e96:	8d 81       	ldd	r24, Y+5	; 0x05
    3e98:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9a:	01 97       	sbiw	r24, 0x01	; 1
    3e9c:	9e 83       	std	Y+6, r25	; 0x06
    3e9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea4:	00 97       	sbiw	r24, 0x00	; 0
    3ea6:	69 f7       	brne	.-38     	; 0x3e82 <Sev_Seg_write+0x254>
    3ea8:	14 c0       	rjmp	.+40     	; 0x3ed2 <Sev_Seg_write+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    3eac:	78 85       	ldd	r23, Y+8	; 0x08
    3eae:	89 85       	ldd	r24, Y+9	; 0x09
    3eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb6:	dc 01       	movw	r26, r24
    3eb8:	cb 01       	movw	r24, r22
    3eba:	9e 83       	std	Y+6, r25	; 0x06
    3ebc:	8d 83       	std	Y+5, r24	; 0x05
    3ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec2:	9a 83       	std	Y+2, r25	; 0x02
    3ec4:	89 83       	std	Y+1, r24	; 0x01
    3ec6:	89 81       	ldd	r24, Y+1	; 0x01
    3ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	f1 f7       	brne	.-4      	; 0x3eca <Sev_Seg_write+0x29c>
    3ece:	9a 83       	std	Y+2, r25	; 0x02
    3ed0:	89 83       	std	Y+1, r24	; 0x01
void Sev_Seg_write(uint8 num) {

	uint8 Firstno = num%10;
	uint8 Secondno = num/10;

	for(num = 0; num < 100; num++) {
    3ed2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ed4:	8f 5f       	subi	r24, 0xFF	; 255
    3ed6:	8f 8f       	std	Y+31, r24	; 0x1f
    3ed8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3eda:	84 36       	cpi	r24, 0x64	; 100
    3edc:	08 f4       	brcc	.+2      	; 0x3ee0 <Sev_Seg_write+0x2b2>
    3ede:	c1 ce       	rjmp	.-638    	; 0x3c62 <Sev_Seg_write+0x34>
	Dio_write_PORT(D6, GET_BIT(Secondno, 2));
	Dio_write_PORT(D7, GET_BIT(Secondno, 3));

	_delay_ms(10);
	}
}
    3ee0:	6f 96       	adiw	r28, 0x1f	; 31
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
    3eec:	cf 91       	pop	r28
    3eee:	df 91       	pop	r29
    3ef0:	08 95       	ret

00003ef2 <Test_7_Segment>:

void Test_7_Segment() {
    3ef2:	df 93       	push	r29
    3ef4:	cf 93       	push	r28
    3ef6:	cd b7       	in	r28, 0x3d	; 61
    3ef8:	de b7       	in	r29, 0x3e	; 62
    3efa:	60 97       	sbiw	r28, 0x10	; 16
    3efc:	0f b6       	in	r0, 0x3f	; 63
    3efe:	f8 94       	cli
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	0f be       	out	0x3f, r0	; 63
    3f04:	cd bf       	out	0x3d, r28	; 61

	for(int i = 0; i <10; i++) {
    3f06:	18 8a       	std	Y+16, r1	; 0x10
    3f08:	1f 86       	std	Y+15, r1	; 0x0f
    3f0a:	7f c0       	rjmp	.+254    	; 0x400a <Test_7_Segment+0x118>
		Sev_Seg_write(Sev_Segment[i]);
    3f0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f0e:	98 89       	ldd	r25, Y+16	; 0x10
    3f10:	fc 01       	movw	r30, r24
    3f12:	e0 57       	subi	r30, 0x70	; 112
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	80 81       	ld	r24, Z
    3f18:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <Sev_Seg_write>
    3f1c:	80 e0       	ldi	r24, 0x00	; 0
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	aa e7       	ldi	r26, 0x7A	; 122
    3f22:	b4 e4       	ldi	r27, 0x44	; 68
    3f24:	8b 87       	std	Y+11, r24	; 0x0b
    3f26:	9c 87       	std	Y+12, r25	; 0x0c
    3f28:	ad 87       	std	Y+13, r26	; 0x0d
    3f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f34:	20 e0       	ldi	r18, 0x00	; 0
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	4a e7       	ldi	r20, 0x7A	; 122
    3f3a:	55 e4       	ldi	r21, 0x45	; 69
    3f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f40:	dc 01       	movw	r26, r24
    3f42:	cb 01       	movw	r24, r22
    3f44:	8f 83       	std	Y+7, r24	; 0x07
    3f46:	98 87       	std	Y+8, r25	; 0x08
    3f48:	a9 87       	std	Y+9, r26	; 0x09
    3f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f4e:	78 85       	ldd	r23, Y+8	; 0x08
    3f50:	89 85       	ldd	r24, Y+9	; 0x09
    3f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	40 e8       	ldi	r20, 0x80	; 128
    3f5a:	5f e3       	ldi	r21, 0x3F	; 63
    3f5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f60:	88 23       	and	r24, r24
    3f62:	2c f4       	brge	.+10     	; 0x3f6e <Test_7_Segment+0x7c>
		__ticks = 1;
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	9e 83       	std	Y+6, r25	; 0x06
    3f6a:	8d 83       	std	Y+5, r24	; 0x05
    3f6c:	3f c0       	rjmp	.+126    	; 0x3fec <Test_7_Segment+0xfa>
	else if (__tmp > 65535)
    3f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f70:	78 85       	ldd	r23, Y+8	; 0x08
    3f72:	89 85       	ldd	r24, Y+9	; 0x09
    3f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	3f ef       	ldi	r19, 0xFF	; 255
    3f7a:	4f e7       	ldi	r20, 0x7F	; 127
    3f7c:	57 e4       	ldi	r21, 0x47	; 71
    3f7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f82:	18 16       	cp	r1, r24
    3f84:	4c f5       	brge	.+82     	; 0x3fd8 <Test_7_Segment+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f86:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f88:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	40 e2       	ldi	r20, 0x20	; 32
    3f94:	51 e4       	ldi	r21, 0x41	; 65
    3f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	cb 01       	movw	r24, r22
    3f9e:	bc 01       	movw	r22, r24
    3fa0:	cd 01       	movw	r24, r26
    3fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa6:	dc 01       	movw	r26, r24
    3fa8:	cb 01       	movw	r24, r22
    3faa:	9e 83       	std	Y+6, r25	; 0x06
    3fac:	8d 83       	std	Y+5, r24	; 0x05
    3fae:	0f c0       	rjmp	.+30     	; 0x3fce <Test_7_Segment+0xdc>
    3fb0:	80 e9       	ldi	r24, 0x90	; 144
    3fb2:	91 e0       	ldi	r25, 0x01	; 1
    3fb4:	9c 83       	std	Y+4, r25	; 0x04
    3fb6:	8b 83       	std	Y+3, r24	; 0x03
    3fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3fba:	9c 81       	ldd	r25, Y+4	; 0x04
    3fbc:	01 97       	sbiw	r24, 0x01	; 1
    3fbe:	f1 f7       	brne	.-4      	; 0x3fbc <Test_7_Segment+0xca>
    3fc0:	9c 83       	std	Y+4, r25	; 0x04
    3fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc8:	01 97       	sbiw	r24, 0x01	; 1
    3fca:	9e 83       	std	Y+6, r25	; 0x06
    3fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fce:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd2:	00 97       	sbiw	r24, 0x00	; 0
    3fd4:	69 f7       	brne	.-38     	; 0x3fb0 <Test_7_Segment+0xbe>
    3fd6:	14 c0       	rjmp	.+40     	; 0x4000 <Test_7_Segment+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    3fda:	78 85       	ldd	r23, Y+8	; 0x08
    3fdc:	89 85       	ldd	r24, Y+9	; 0x09
    3fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	9e 83       	std	Y+6, r25	; 0x06
    3fea:	8d 83       	std	Y+5, r24	; 0x05
    3fec:	8d 81       	ldd	r24, Y+5	; 0x05
    3fee:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff0:	9a 83       	std	Y+2, r25	; 0x02
    3ff2:	89 83       	std	Y+1, r24	; 0x01
    3ff4:	89 81       	ldd	r24, Y+1	; 0x01
    3ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff8:	01 97       	sbiw	r24, 0x01	; 1
    3ffa:	f1 f7       	brne	.-4      	; 0x3ff8 <Test_7_Segment+0x106>
    3ffc:	9a 83       	std	Y+2, r25	; 0x02
    3ffe:	89 83       	std	Y+1, r24	; 0x01
	}
}

void Test_7_Segment() {

	for(int i = 0; i <10; i++) {
    4000:	8f 85       	ldd	r24, Y+15	; 0x0f
    4002:	98 89       	ldd	r25, Y+16	; 0x10
    4004:	01 96       	adiw	r24, 0x01	; 1
    4006:	98 8b       	std	Y+16, r25	; 0x10
    4008:	8f 87       	std	Y+15, r24	; 0x0f
    400a:	8f 85       	ldd	r24, Y+15	; 0x0f
    400c:	98 89       	ldd	r25, Y+16	; 0x10
    400e:	8a 30       	cpi	r24, 0x0A	; 10
    4010:	91 05       	cpc	r25, r1
    4012:	0c f4       	brge	.+2      	; 0x4016 <Test_7_Segment+0x124>
    4014:	7b cf       	rjmp	.-266    	; 0x3f0c <Test_7_Segment+0x1a>
		Sev_Seg_write(Sev_Segment[i]);
		_delay_ms(1000);
	}
}
    4016:	60 96       	adiw	r28, 0x10	; 16
    4018:	0f b6       	in	r0, 0x3f	; 63
    401a:	f8 94       	cli
    401c:	de bf       	out	0x3e, r29	; 62
    401e:	0f be       	out	0x3f, r0	; 63
    4020:	cd bf       	out	0x3d, r28	; 61
    4022:	cf 91       	pop	r28
    4024:	df 91       	pop	r29
    4026:	08 95       	ret

00004028 <main>:
#include "BIT_MATH.h"
#include "STD_Types.h"



int main() {
    4028:	df 93       	push	r29
    402a:	cf 93       	push	r28
    402c:	cd b7       	in	r28, 0x3d	; 61
    402e:	de b7       	in	r29, 0x3e	; 62
    4030:	6d 97       	sbiw	r28, 0x1d	; 29
    4032:	0f b6       	in	r0, 0x3f	; 63
    4034:	f8 94       	cli
    4036:	de bf       	out	0x3e, r29	; 62
    4038:	0f be       	out	0x3f, r0	; 63
    403a:	cd bf       	out	0x3d, r28	; 61

	// I/O DDRs/PORTS/PINS Initialization.
	Dio_init();
    403c:	0e 94 49 0b 	call	0x1692	; 0x1692 <Dio_init>
	// SPI_MASTER_Communication_Protocol_Intializtaion.
	SPI_MASTER_INIT();
    4040:	0e 94 9d 06 	call	0xd3a	; 0xd3a <SPI_MASTER_INIT>
	// UART Communication Protocol Intializtaion.
	USART_Init(103);
    4044:	67 e6       	ldi	r22, 0x67	; 103
    4046:	70 e0       	ldi	r23, 0x00	; 0
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <USART_Init>

	uint8 data = 0;
    4050:	1d 8e       	std	Y+29, r1	; 0x1d
    4052:	80 e0       	ldi	r24, 0x00	; 0
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	a0 e2       	ldi	r26, 0x20	; 32
    4058:	b1 e4       	ldi	r27, 0x41	; 65
    405a:	89 8f       	std	Y+25, r24	; 0x19
    405c:	9a 8f       	std	Y+26, r25	; 0x1a
    405e:	ab 8f       	std	Y+27, r26	; 0x1b
    4060:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4062:	69 8d       	ldd	r22, Y+25	; 0x19
    4064:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4066:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4068:	9c 8d       	ldd	r25, Y+28	; 0x1c
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	4a e7       	ldi	r20, 0x7A	; 122
    4070:	55 e4       	ldi	r21, 0x45	; 69
    4072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	8d 8b       	std	Y+21, r24	; 0x15
    407c:	9e 8b       	std	Y+22, r25	; 0x16
    407e:	af 8b       	std	Y+23, r26	; 0x17
    4080:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4082:	6d 89       	ldd	r22, Y+21	; 0x15
    4084:	7e 89       	ldd	r23, Y+22	; 0x16
    4086:	8f 89       	ldd	r24, Y+23	; 0x17
    4088:	98 8d       	ldd	r25, Y+24	; 0x18
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	40 e8       	ldi	r20, 0x80	; 128
    4090:	5f e3       	ldi	r21, 0x3F	; 63
    4092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4096:	88 23       	and	r24, r24
    4098:	2c f4       	brge	.+10     	; 0x40a4 <main+0x7c>
		__ticks = 1;
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	9c 8b       	std	Y+20, r25	; 0x14
    40a0:	8b 8b       	std	Y+19, r24	; 0x13
    40a2:	3f c0       	rjmp	.+126    	; 0x4122 <main+0xfa>
	else if (__tmp > 65535)
    40a4:	6d 89       	ldd	r22, Y+21	; 0x15
    40a6:	7e 89       	ldd	r23, Y+22	; 0x16
    40a8:	8f 89       	ldd	r24, Y+23	; 0x17
    40aa:	98 8d       	ldd	r25, Y+24	; 0x18
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	3f ef       	ldi	r19, 0xFF	; 255
    40b0:	4f e7       	ldi	r20, 0x7F	; 127
    40b2:	57 e4       	ldi	r21, 0x47	; 71
    40b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40b8:	18 16       	cp	r1, r24
    40ba:	4c f5       	brge	.+82     	; 0x410e <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40bc:	69 8d       	ldd	r22, Y+25	; 0x19
    40be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	40 e2       	ldi	r20, 0x20	; 32
    40ca:	51 e4       	ldi	r21, 0x41	; 65
    40cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	bc 01       	movw	r22, r24
    40d6:	cd 01       	movw	r24, r26
    40d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40dc:	dc 01       	movw	r26, r24
    40de:	cb 01       	movw	r24, r22
    40e0:	9c 8b       	std	Y+20, r25	; 0x14
    40e2:	8b 8b       	std	Y+19, r24	; 0x13
    40e4:	0f c0       	rjmp	.+30     	; 0x4104 <main+0xdc>
    40e6:	80 e9       	ldi	r24, 0x90	; 144
    40e8:	91 e0       	ldi	r25, 0x01	; 1
    40ea:	9a 8b       	std	Y+18, r25	; 0x12
    40ec:	89 8b       	std	Y+17, r24	; 0x11
    40ee:	89 89       	ldd	r24, Y+17	; 0x11
    40f0:	9a 89       	ldd	r25, Y+18	; 0x12
    40f2:	01 97       	sbiw	r24, 0x01	; 1
    40f4:	f1 f7       	brne	.-4      	; 0x40f2 <main+0xca>
    40f6:	9a 8b       	std	Y+18, r25	; 0x12
    40f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40fa:	8b 89       	ldd	r24, Y+19	; 0x13
    40fc:	9c 89       	ldd	r25, Y+20	; 0x14
    40fe:	01 97       	sbiw	r24, 0x01	; 1
    4100:	9c 8b       	std	Y+20, r25	; 0x14
    4102:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4104:	8b 89       	ldd	r24, Y+19	; 0x13
    4106:	9c 89       	ldd	r25, Y+20	; 0x14
    4108:	00 97       	sbiw	r24, 0x00	; 0
    410a:	69 f7       	brne	.-38     	; 0x40e6 <main+0xbe>
    410c:	14 c0       	rjmp	.+40     	; 0x4136 <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    410e:	6d 89       	ldd	r22, Y+21	; 0x15
    4110:	7e 89       	ldd	r23, Y+22	; 0x16
    4112:	8f 89       	ldd	r24, Y+23	; 0x17
    4114:	98 8d       	ldd	r25, Y+24	; 0x18
    4116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    411a:	dc 01       	movw	r26, r24
    411c:	cb 01       	movw	r24, r22
    411e:	9c 8b       	std	Y+20, r25	; 0x14
    4120:	8b 8b       	std	Y+19, r24	; 0x13
    4122:	8b 89       	ldd	r24, Y+19	; 0x13
    4124:	9c 89       	ldd	r25, Y+20	; 0x14
    4126:	98 8b       	std	Y+16, r25	; 0x10
    4128:	8f 87       	std	Y+15, r24	; 0x0f
    412a:	8f 85       	ldd	r24, Y+15	; 0x0f
    412c:	98 89       	ldd	r25, Y+16	; 0x10
    412e:	01 97       	sbiw	r24, 0x01	; 1
    4130:	f1 f7       	brne	.-4      	; 0x412e <main+0x106>
    4132:	98 8b       	std	Y+16, r25	; 0x10
    4134:	8f 87       	std	Y+15, r24	; 0x0f

	while (1) {
		_delay_ms(10);

		// Receiving Bluetooth data by UART.
		data = USART_Receive();
    4136:	0e 94 8e 06 	call	0xd1c	; 0xd1c <USART_Receive>
    413a:	8d 8f       	std	Y+29, r24	; 0x1d

		// Transmitting data received
		SPI_MSTR_TRNSMT(data);
    413c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    413e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <SPI_MSTR_TRNSMT>
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	a0 e2       	ldi	r26, 0x20	; 32
    4148:	b1 e4       	ldi	r27, 0x41	; 65
    414a:	8b 87       	std	Y+11, r24	; 0x0b
    414c:	9c 87       	std	Y+12, r25	; 0x0c
    414e:	ad 87       	std	Y+13, r26	; 0x0d
    4150:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4152:	6b 85       	ldd	r22, Y+11	; 0x0b
    4154:	7c 85       	ldd	r23, Y+12	; 0x0c
    4156:	8d 85       	ldd	r24, Y+13	; 0x0d
    4158:	9e 85       	ldd	r25, Y+14	; 0x0e
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	4a e7       	ldi	r20, 0x7A	; 122
    4160:	55 e4       	ldi	r21, 0x45	; 69
    4162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	8f 83       	std	Y+7, r24	; 0x07
    416c:	98 87       	std	Y+8, r25	; 0x08
    416e:	a9 87       	std	Y+9, r26	; 0x09
    4170:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4172:	6f 81       	ldd	r22, Y+7	; 0x07
    4174:	78 85       	ldd	r23, Y+8	; 0x08
    4176:	89 85       	ldd	r24, Y+9	; 0x09
    4178:	9a 85       	ldd	r25, Y+10	; 0x0a
    417a:	20 e0       	ldi	r18, 0x00	; 0
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	40 e8       	ldi	r20, 0x80	; 128
    4180:	5f e3       	ldi	r21, 0x3F	; 63
    4182:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4186:	88 23       	and	r24, r24
    4188:	2c f4       	brge	.+10     	; 0x4194 <main+0x16c>
		__ticks = 1;
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	9e 83       	std	Y+6, r25	; 0x06
    4190:	8d 83       	std	Y+5, r24	; 0x05
    4192:	3f c0       	rjmp	.+126    	; 0x4212 <main+0x1ea>
	else if (__tmp > 65535)
    4194:	6f 81       	ldd	r22, Y+7	; 0x07
    4196:	78 85       	ldd	r23, Y+8	; 0x08
    4198:	89 85       	ldd	r24, Y+9	; 0x09
    419a:	9a 85       	ldd	r25, Y+10	; 0x0a
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	3f ef       	ldi	r19, 0xFF	; 255
    41a0:	4f e7       	ldi	r20, 0x7F	; 127
    41a2:	57 e4       	ldi	r21, 0x47	; 71
    41a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41a8:	18 16       	cp	r1, r24
    41aa:	4c f5       	brge	.+82     	; 0x41fe <main+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	40 e2       	ldi	r20, 0x20	; 32
    41ba:	51 e4       	ldi	r21, 0x41	; 65
    41bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c0:	dc 01       	movw	r26, r24
    41c2:	cb 01       	movw	r24, r22
    41c4:	bc 01       	movw	r22, r24
    41c6:	cd 01       	movw	r24, r26
    41c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	9e 83       	std	Y+6, r25	; 0x06
    41d2:	8d 83       	std	Y+5, r24	; 0x05
    41d4:	0f c0       	rjmp	.+30     	; 0x41f4 <main+0x1cc>
    41d6:	80 e9       	ldi	r24, 0x90	; 144
    41d8:	91 e0       	ldi	r25, 0x01	; 1
    41da:	9c 83       	std	Y+4, r25	; 0x04
    41dc:	8b 83       	std	Y+3, r24	; 0x03
    41de:	8b 81       	ldd	r24, Y+3	; 0x03
    41e0:	9c 81       	ldd	r25, Y+4	; 0x04
    41e2:	01 97       	sbiw	r24, 0x01	; 1
    41e4:	f1 f7       	brne	.-4      	; 0x41e2 <main+0x1ba>
    41e6:	9c 83       	std	Y+4, r25	; 0x04
    41e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ea:	8d 81       	ldd	r24, Y+5	; 0x05
    41ec:	9e 81       	ldd	r25, Y+6	; 0x06
    41ee:	01 97       	sbiw	r24, 0x01	; 1
    41f0:	9e 83       	std	Y+6, r25	; 0x06
    41f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f4:	8d 81       	ldd	r24, Y+5	; 0x05
    41f6:	9e 81       	ldd	r25, Y+6	; 0x06
    41f8:	00 97       	sbiw	r24, 0x00	; 0
    41fa:	69 f7       	brne	.-38     	; 0x41d6 <main+0x1ae>
    41fc:	2a cf       	rjmp	.-428    	; 0x4052 <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4200:	78 85       	ldd	r23, Y+8	; 0x08
    4202:	89 85       	ldd	r24, Y+9	; 0x09
    4204:	9a 85       	ldd	r25, Y+10	; 0x0a
    4206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	9e 83       	std	Y+6, r25	; 0x06
    4210:	8d 83       	std	Y+5, r24	; 0x05
    4212:	8d 81       	ldd	r24, Y+5	; 0x05
    4214:	9e 81       	ldd	r25, Y+6	; 0x06
    4216:	9a 83       	std	Y+2, r25	; 0x02
    4218:	89 83       	std	Y+1, r24	; 0x01
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	9a 81       	ldd	r25, Y+2	; 0x02
    421e:	01 97       	sbiw	r24, 0x01	; 1
    4220:	f1 f7       	brne	.-4      	; 0x421e <main+0x1f6>
    4222:	9a 83       	std	Y+2, r25	; 0x02
    4224:	89 83       	std	Y+1, r24	; 0x01
    4226:	15 cf       	rjmp	.-470    	; 0x4052 <main+0x2a>

00004228 <__udivmodqi4>:
    4228:	99 1b       	sub	r25, r25
    422a:	79 e0       	ldi	r23, 0x09	; 9
    422c:	04 c0       	rjmp	.+8      	; 0x4236 <__udivmodqi4_ep>

0000422e <__udivmodqi4_loop>:
    422e:	99 1f       	adc	r25, r25
    4230:	96 17       	cp	r25, r22
    4232:	08 f0       	brcs	.+2      	; 0x4236 <__udivmodqi4_ep>
    4234:	96 1b       	sub	r25, r22

00004236 <__udivmodqi4_ep>:
    4236:	88 1f       	adc	r24, r24
    4238:	7a 95       	dec	r23
    423a:	c9 f7       	brne	.-14     	; 0x422e <__udivmodqi4_loop>
    423c:	80 95       	com	r24
    423e:	08 95       	ret

00004240 <__prologue_saves__>:
    4240:	2f 92       	push	r2
    4242:	3f 92       	push	r3
    4244:	4f 92       	push	r4
    4246:	5f 92       	push	r5
    4248:	6f 92       	push	r6
    424a:	7f 92       	push	r7
    424c:	8f 92       	push	r8
    424e:	9f 92       	push	r9
    4250:	af 92       	push	r10
    4252:	bf 92       	push	r11
    4254:	cf 92       	push	r12
    4256:	df 92       	push	r13
    4258:	ef 92       	push	r14
    425a:	ff 92       	push	r15
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	cf 93       	push	r28
    4262:	df 93       	push	r29
    4264:	cd b7       	in	r28, 0x3d	; 61
    4266:	de b7       	in	r29, 0x3e	; 62
    4268:	ca 1b       	sub	r28, r26
    426a:	db 0b       	sbc	r29, r27
    426c:	0f b6       	in	r0, 0x3f	; 63
    426e:	f8 94       	cli
    4270:	de bf       	out	0x3e, r29	; 62
    4272:	0f be       	out	0x3f, r0	; 63
    4274:	cd bf       	out	0x3d, r28	; 61
    4276:	09 94       	ijmp

00004278 <__epilogue_restores__>:
    4278:	2a 88       	ldd	r2, Y+18	; 0x12
    427a:	39 88       	ldd	r3, Y+17	; 0x11
    427c:	48 88       	ldd	r4, Y+16	; 0x10
    427e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4280:	6e 84       	ldd	r6, Y+14	; 0x0e
    4282:	7d 84       	ldd	r7, Y+13	; 0x0d
    4284:	8c 84       	ldd	r8, Y+12	; 0x0c
    4286:	9b 84       	ldd	r9, Y+11	; 0x0b
    4288:	aa 84       	ldd	r10, Y+10	; 0x0a
    428a:	b9 84       	ldd	r11, Y+9	; 0x09
    428c:	c8 84       	ldd	r12, Y+8	; 0x08
    428e:	df 80       	ldd	r13, Y+7	; 0x07
    4290:	ee 80       	ldd	r14, Y+6	; 0x06
    4292:	fd 80       	ldd	r15, Y+5	; 0x05
    4294:	0c 81       	ldd	r16, Y+4	; 0x04
    4296:	1b 81       	ldd	r17, Y+3	; 0x03
    4298:	aa 81       	ldd	r26, Y+2	; 0x02
    429a:	b9 81       	ldd	r27, Y+1	; 0x01
    429c:	ce 0f       	add	r28, r30
    429e:	d1 1d       	adc	r29, r1
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	f8 94       	cli
    42a4:	de bf       	out	0x3e, r29	; 62
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	cd bf       	out	0x3d, r28	; 61
    42aa:	ed 01       	movw	r28, r26
    42ac:	08 95       	ret

000042ae <_exit>:
    42ae:	f8 94       	cli

000042b0 <__stop_program>:
    42b0:	ff cf       	rjmp	.-2      	; 0x42b0 <__stop_program>
